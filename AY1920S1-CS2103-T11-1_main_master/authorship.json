[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d Incident Management System"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103-T11-1/main[image:https://travis-ci.org/AY1920S1-CS2103-T11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103-T11-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103-T11-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "https://codacy.com/manual/madanalogy/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dAY1920S1-CS2103-T11-1/main\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/ce01660ac3c2476396d4c476921027a5[Codacy Badge]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "https://app.netlify.com/sites/whattheduke/deploys[image:https://api.netlify.com/api/v1/badges/3b2b545d-4c96-47b6-8dcb-6f818d9621fb/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::images/Ui.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* This is an Incident Management System (IMS), a desktop application tailored for emergency call operators."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Using this app, call operators will record essential information on the incident, and dispatch nearest available vehicles to site at high efficiency."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* The streamlined workflow of the IMS is designed to enable call operators to dispatch vehicles and prepare reports without wasting any precious time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* IMS is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "The roles of an emergency response operator is not only to pick up these calls, but also:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 1. dispatch vehicles accordingly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 2. capture incident details in a report"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "The Incident Management System is a more convenient and less error prone way for the users to complete their jobs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "It allows users to:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 1. Create and store incidents/reports"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 2. Automised filling of certain fields e.g. Date, time to reduce human error"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 3. Retrieve the report at a later date for reference"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* 4. Modify/Update the report"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d Contents:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* This is a brownfield project, expanding on the source code of AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 14,
      "madanalogy": 5,
      "Yoshi275": 1,
      "-": 23,
      "tirameshu": 6
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    archiveName \u003d \u0027ims-1.3.jar\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        \u0027site-name\u0027: \u0027Incident Management System\u0027,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103-T11-1/main\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 7,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The Incident Management System was developed by the https://github.com/AY1920S1-CS2103-T11-1[CS2103-T11-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore] taking https://nus-cs2103-ay1920s1.github.io/website/index.html[CS2103] in Semester 1 of AY2019/20."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Ahmed Bahajjaj"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::madanalogy.png[width\u003d\"300\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{empty}[https://madanalogy.github.io[website]][https://github.com/madanalogy[github]] [\u003c\u003cAhmed#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Responsibilities: Scheduling and Deadlines + In charge of `Logic` and `Person` model"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Mandy Wang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::tirameshu.png[width\u003d\"300\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{empty}[http://github.com/tirameshu[github]] [\u003c\u003cMandy#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Responsibilities: Documentation + In charge of `Vehicle` Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Atharv Joshi"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::atharvjoshi.png[width\u003d\"300\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{empty}[http://github.com/atharvjoshi[github]] [\u003c\u003cAtharv#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Responsibilities: Testing + In charge of `UI`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Cheryl Ng"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::yoshi275.png[width\u003d\"300\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{empty}[http://github.com/yoshi275[github]] [\u003c\u003cCheryl#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Responsibilities: Integration + In charge of `Incident` Model"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Mei An"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::hellopanda128.png[width\u003d\"300\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "{empty}[http://github.com/hellopanda128[github]] [\u003c\u003cMeiAn#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Responsibilities: Code Quality + In charge of `Storage`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 25,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103-T11-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Email us* : You can also reach us at `ng.cheryl [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 2,
      "-": 5
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d IncidentManager Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":repoURL: https://github.com/se-edu/incidentManager-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "A project often depends on third-party libraries. For example, Incident Manager depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 45
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d Incident Management System - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ":websiteURL: https://ay1920s1-cs2103-t11-1.github.io"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "By: `Team CS2103-T11-1`      Since: `October 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  `Logic` uses the `IncidentManagerParser` class to parse the user command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* stores the Incident Manager data."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `IncidentManager`, which `Person` can reference. This would allow `IncidentManager` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[[Design-Person]]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d Person Model component"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Person.java[`Person.java`]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The `Person`,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* represents a user account on the incident manager."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Contains the account `Username`, `Password`, `Name`, `Phone`, `Email`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[[Design-Incident]]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Incident component"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Incident.java[`Incident.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The `Incident`,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::IncidentClassDiagram.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* represents an incident report in the incident manager."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* contains the attributes `CallerNumber`, `Description`, `IncidentDateTime` and IncidentId`."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Also contains a `Person` object representing the \u0027Operator\u0027 who filed the incident, a `District` which represents the location of the incident, and a `Vehicle` representing the vehicle dispatched to investigate this incident."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Has three states encapsulated by a `Status` enum - `INCOMPLETE_DRAFT` (report not completely filled and not submitted), `COMPLETE_DRAFT` (report completely filled but not submitted), and `SUBMITTED_REPORT` (report completely filled and submitted)."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[[Design-Vehicle]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Incident component"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Vehicle.java[`Vehicle.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The `Vehicle`,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* represents a vehicle that can be dispatched to incident sites."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Contains the attributes `VehicleNumber`, `VehicleType`, `district` and `availability`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* can save the Incident Manager data in json format and read it back."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Classes used by multiple components are in the `seedu.incidentManager.commons` package."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// tag::accessControl[]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d Access Control feature"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The access control feature is centered around three core concepts:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "1. Command Restrictions: Restriction of access to commands until after identity is verified"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "2. Identity Verification: Verification of identity via unique credentials and a confidential key"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "3. Account Management Restrictions: Access level restrictions for commands affecting other accounts"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command Restrictions"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Prior to login, the user is only granted access to the `Login`, `Register`, `Help`, and `Exit` commands. This is achieved via a guard statement in the `LogicManager` checking whether the user is logged in or the command created is an approved command that doesn\u0027t require login."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The guard statement throws a command exception and informs the user of the available commands prior to login."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Activity Diagram for illustration:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::AccessActivityDiagram.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Identity Verification"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Users are required to login via the `Login` command with a `Username` and `Password`. See user guide for more details on the command syntax for `Login`. Users are also allowed to `Logout` and thus end their `Session`."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Session details are displayed on the status bar in the GUI to reflect whether a user is logged in, and the username as well as time logged in if a user is logged in."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Class Diagram for illustration:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::SessionClassDiagram.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Uniqueness of a username is ensured by preventing duplicates during the account creation [`RegisterCommand`] and account update [`UpdateCommand`] processes. The respective commands will check the list of accounts in the model and throw an exception if a duplicate is found."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Account Management Restrictions"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "To prevent abuse (e.g. adding a dummy account and editing/deleting other accounts), all new accounts are differentiated from `Admin` accounts. This restriction based on access level is implemented via account `Tags`:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only a `Person` with an admin `Tag` can access account management features. Such a person will henceforth be referred to as an Admin."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Users who are not admins are not allowed to add tags (via both AddCommand and UpdateCommand)."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only Admins are allowed to edit or add tags (via both AddCommand and UpdateCommand)."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Non-admins can still edit their own account details via the `UpdateCommand`. Refer to user guide for more info."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Additional access restrictions:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only admins can update an account that is not their own."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only admins can access the delete command."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Admins cannot delete their own account."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Admins cannot \u0027downgrade\u0027 themselves by removing their own admin tag."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The checks described above all function in the command execution stage. The `RegisterCommand`, `UpdateCommand`, and `DeleteCommand` retrieves the logged in `Person` from the `Model` via utilisation of the `Session` object."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Sequence Diagram for illustration:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::AccessSequenceDiagram.png[]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "NOTE: The lifeline for DeleteCommand should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of the diagram."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Command Restrictions are Managed"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Current Choice:** Guard statement in LogicManager prior to Command Execution."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Single control point, easy to maintain and debug."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Command still gets instantiated, memory allocated to command creation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Alternative:** Guard statement in IncidentManagerParser"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Early catching of restriction, command doesn\u0027t get instantiated unnecessarily."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Need to expose model to parser, increasing coupling."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Identity Verification is Managed"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Current Choice:** Unique username and password."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Sufficiently advanced users can access the data file directly to retrieve user passwords."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Alternative:** Physical security USB dongle."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Secure individually identifiable token."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Prone to loss and potential duplication."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Account Management Restrictions are Managed"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Current Choice:** Utilisation of Account Tags"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Users cannot add tags to themselves."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Alternative:** Addition of an Admin account attribute."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Distinct object class, improves cohesiveness."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Hard to implement."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d Known Issues"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "A sufficiently advanced user can access the data file directly to manipulate account details. Data file encryption will resolve this issue, but has yet to be implemented."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// end::accessControl[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// tag::accountManagement[]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d Account Management feature"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The account management feature functions as a suite of commands available to the user. The commands available as part of this suite:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Register Command - Creates a new user account."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Update Command - Edits a user account. Not including an index updates your own account."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Delete Command - Deletes a a user account. Not allowed to delete your own account."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* List Persons Command - Lists all user accounts or those whose tags match the user input."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Find Persons Command - Searches for user accounts based on matching name or username keywords."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Swap Command - Swaps GUI interface between account management and incident management."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Users are restricted from accessing commands affecting objects not on display. They need to invoke `Swap` to access the different command suites."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Only `Admin` accounts can access the full suite of account management features. See access control feature for more information. Non-Admins only have access to `Register`, `List`, `Find`, and `Swap` commands, as well as `Update` for their own account."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "In the code base, Persons represent user accounts. See person model for more information."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Update executes"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Current Choice:** No index indicates own account update"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Improves user experience, user does not need to look for their own index."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Susceptible to user error."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Alternative:** Select index of own account for update"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Decreases user experience, user will first need to find their own index."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How Tag searching executes"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Current Choice:** Adding keywords after the list command performs a search"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Does not require argument prefixes, improves user experience."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Decreases system cohesiveness as searching is performed in two separate commands."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* **Alternative:** Utilising find command to search for tags"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Pros: Centralise all account search operations in one command, improves system cohesiveness."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** Cons: Requires the addition of argument prefixes, decreases user experience."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// end::accountManagement[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// tag::incidentdraftcreation[]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d Incident Draft Creation feature"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "The incident draft creation mechanism is facilitated by the New Command. It creates a new draft incident report based on district of incident, optional automatic vehicle dispatchment."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "With automatic vehicle dispatchment:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::NewDraftSequenceDiagramAuto.png[]"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "With manual vehicle dispatchment:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::NewDraftSequenceDiagramManual.png[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How incident draft creation executes"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Alternative 1:** Auto assignment of vehicles"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Reduces number of steps of execution."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** User need not waste time on decision making; an available vehicle will be dispatched directly, and if no vehicles are available, user will be notified as well."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons: User does not get to choose vehicle to dispatch, especially if vehicle of a specific type is wanted."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Alternative 2:** Manual assignment of vehicles"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros: User is able to choose vehicle to dispatch, especially if a specific vehicle type is wanted."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons: More number of steps, potentially a waste of time."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// end::incidentdraftcreation[]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// tag::incidentfillandsubmit[]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d Incident Filling and Submission feature"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The incident filling and submission subroutines are facilitated by the `fill` and `submit` commands respectively."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "In the IMS, each incident can have one of three statuses - `INCOMPLETE_DRAFT`, `COMPLETE_DRAFT`, and `SUBMITTED REPORT`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "These three statuses are maintained by an `enum` in `Incident`. Executing the `fill` command changes the status of"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "drafts (complete or incomplete) into `COMPLETE_DRAFT` while the `submit` command changes the status of only `COMPLETE_DRAFTS` to `SUBMITTED_REPORT`."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Overview of `Fill` and `Submit`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Each command works in two modes:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Without parameters: +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "In this mode, the command - `fill` or `submit` - lists the incidents that are ready for Filling (i.e. only all complete and incomplete drafts) or Submitting (i.e. only all complete drafts)."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. With parameters:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "In this mode, the command - `fill` or `submit` - actually fills (i.e. makes incident status `COMPLETE_DRAFT`) or submits (i.e. changes incident status from `COMPLETE_DRAFT` to `SUBMITTED_REPORT`) the specified incident."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The implementation of these two modes is discussed below. As both `fill` and `submit` are rather similar in their implementation, a detailed discussion of only the `fill` command is given below."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d No parameter mode (listing incidents)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "This mode leverages the ability of the `ListIncidentsCommand` to list incidents by different predicates."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "When the `IncidentManagerParser` parses a `fill` command without parameters, it returns a new `ListIncidentsCommand`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "with predicate `Incident::isDraft`. This `ListIncidentsCommand` is then executed as per usual."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "For the `submit` command, the predicate `Incident::isCompleteDraft` is used instead."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::FillCommandNoParamsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Parameter mode (modifying incidents)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* For the `fill` command with parameters, the `FillCommandParser` will be invoked to parse the fields `targetIndex`, `callerNumber`, and `description` and return a `FillCommand` containing these non-null fields."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* The `execute()` method in `FillCommand` will then retrieve the specified incident if there are drafts to be filled and if the index is valid."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Two helper methods - `processReportFilling` and `fillReport` - will complete the filling process. `fillReport` returns a new `Incident` which is a copy of the incident report to be filled, but with the specified caller and description details and a `COMPLETE_DRAFT` status."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* The old incident report will be removed from the system and be replaced with the new updated incident report."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* The new incident report is placed at the front of the incident list for easy access."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::FillCommandWithParamsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".In this sequence diagram, the helper methods within `FillCommand` are omitted for clarity."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The `SubmitCommand` functions similarly, with one crucial difference. As no Incident fields are to be updated, the specified incident is simply retrieved, and its fields are copied into a new `Incident` object with a `SUBMITTED_REPORT` status."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How incident `fill` and `submit` commands execute in no parameter mode"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Current choice:** Use `ListIncidents` command with appropriate predicate to fulfill `fill` and `submit` functionalities in no-parameter mode."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Intuitive and convenient to use. If user needs easy access to reports that can be filled or submitted, they do not need to remember a new command keyword. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. Requires lesser code. Abstraction of the filtered listing subroutine reduces the amount of redundant code. +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Cons: +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Might be potentially confusing to user as `FillCommand` is performing a function of listing that is extraneous to the function of filling."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. This mode might be redundant **if** the user follows a strict incident management workflow where any newly generated incident is promptly filled and submitted without it remaining in the system as a draft."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Alternative 1:** Extend `FillCommand` to create two child classes `FillCommandNoParams` and `FillCommandWithParams`. +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Better use of the OOP principle of inheritance. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. Reduce coupling between `ListIncidentsCommand` and `FillCommand`."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Con: +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Increases amount of code and hence marginally reduces app performance as one additional new class needs to be created."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. Misleading use of abstraction as the `FillCommandNoParams` is technically not performing the function of filling but that of listing."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Alternative 2:** Separate the \u0027listing\u0027 and the \u0027filling\u0027 aspect by using separate command words."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pro: +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Most appropriate use of abstraction and single responsibility principle, which are crucial OOP concepts."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Con: +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. User needs to either remember an additional command word or type a longer `list-i` command by specifying the filter predicate, which reduces user convenience."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How incident `fill` and `submit` commands execute in parameter mode"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Current choice:** Both `callerNumber` and `description` fields need to be specified when filling specified incident report. The other incident report fields are auto-filled and can only be changed by using the `edit` command once the incident report has been submitted."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Improved accountability. Prevents a user from changing the most important fields of the incident report, such as `incidentId`, `incidentDateTime`, and `vehicle`, without first committing the report into the system. +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. More convenient for the user as they only have to specify 2 report fields instead of 6 or 7."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Cons: +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. User is unable to fill `callerNumber` independently of `description` unless they first submit the incident report and then use the `edit` command."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. If an incident report has a very long description, then this way of filling the report can be troublesome."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Alternative 1:** Combine `fill` and `submit` functions i.e. filling a report completely will automatically submit it."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pros: +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Easier to implement as Incident reports have two statuses - DRAFT or SUBMITTED - instead of three."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. More convenient as this results in one less step in the user\u0027s workflow and one less command word for the user to remember."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Con: +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Less adaptable and modular. If new fields are added to the incident report, then the user might want to enter / replace those fields by executing repeated fill commands in parameter mode without committing the report into the system and possibly alerting their supervisors and/or relevant agencies with incomplete / likely to change information."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* **Alternative 2:** Allow `fill` command to fill variable number of fields."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Pro: +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Satisfies the cons of the two approaches above as it is versatile enough to allow the user to independently fill different incident report fields as well as adaptable enough to accommodate extra fields."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Con: +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. Harder to implement as we would need to make elaborate and thorough methods to parse the variable arguments."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d Known Issues"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "A user cannot independently fill the various incident report fields unless they first submit the incident report."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d\u003d Activity diagram summarising Incident creation, filling, and submission features"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::IncidentReportingActivityDiagram.png[]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "In this activity diagram, the catch-all term \u0027report\u0027 is used to encompass the acts of creating, filling, and submitting incident reports."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// end::incidentfillandsubmit[]"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// tag::incidentsearch[]"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d Incident Search feature"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The incident search mechanism features a set of different types of searches that a user could utilise. Further documentation on the commands available in this set can be found within the link:{websiteURL}/main/UserGuide.html. The types of searches are as listed:"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Unfiltered - Displays all incidents in `Model`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* ID - Displays all incidents with exact matches in `IncidentId incidentId` in `Incident incident`"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Description - Displays all incidents with keyword(s) contained within the `Description description` in `Incident incident`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Operator - Displays all incidents with keyword(s) contained within the name of the `Person operator` in `Incident incident`"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The incident search mechanism is facilitated by `ModelManager`, which implements abstract class `Model`. It contains a `FilteredList\u003cIncidents\u003e filteredIncidents`, which internally stores the list of displayed incidents in the GUI. Additionally, it implements the following key method:"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* `updateFilteredIncidentsList(Predicate\u003cIncident\u003e predicate)` - Updates the stored filtered incidents list with the new predicate"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "There are two possible commands within this set of searches. Firstly, we will consider when the user calls the command `incidents` in the application."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The following sequence diagram shows how the `incidents` command works:"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::ListIncidentsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "As indicated in the diagram, the `LogicManager` instantiates a `ListIncidentsCommand` upon running command `execute(incidents)`. It then calls `ListIncidentsCommand#execute()`, which runs `Model#updateFilteredIncidentList` with the predicate `PREDICATE_SHOW_ALL_INCIDENTS`. This `Predicate\u003cIncident\u003e` always evaluates to true. This `Predicate\u003cIncident\u003e` is passed to `FilteredList\u003cIncident\u003e filteredList`, as a parameter to run the method `setPredicate()`. This updates the list of visible incidents. `CommandResult commandResult` is also returned to the `LogicManager` to log the success/failure of the method."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Next, we will look at an example in which the user calls `search` to look for incidents written by an operator whose name contains `Alex`."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The execution of this method is a little more complex."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The following sequence diagram shows how the `search` command identifies the keyword and flag, and returns related incidents:"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::SearchIncidentsSequenceDiagram.png[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "The key difference is the utility of the `SearchIncidentsCommandParser` to parse the keyword after tag `op\\` in the command. It creates a `NameKeywordsPredicate` using the String \"Alex\", which is returned to be used in constructing a new instance of `SearchIncidentsCommand`, stored as a `Predicate\u003cIncident\u003e predicate`. From there, the process is similar, in that `SearchIncidentsCommand#execute()` is run, causing the Model to run `Model#updateFilteredIncidentList(predicate)` using the predicate stored in `SearchIncidentsCommand`. Upon updating the list similar to the `incidents` listing command above, `SearchIncidentsCommand` also calls `Model#getFilteredIncidentList()` to return `ObservableList\u003cIncident\u003e`. It obtains the size of this list, and returns it in `CommandResult commandResult`."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How incident search keyword is inputted"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 1 (current choice):** Parse user input after flag (eg. `op\\` or `desc\\`)"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Have to parse keyword from command and flag, user has to follow style of flag for successful search."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 2:** Prompt user for search input"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Pros: Separates command from keyword for ease of reading and parsing."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Difficult to implement multi-command execution."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How listing all incidents is called"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 1 (current choice):** Utilise separate command `incidents`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Pros: Intuitive to use."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Similar code under different command."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 2:** Utilise `search` command (eg. `search unfiltered`)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Pros: Less overlap in code."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Unintuitive to the user as no search is being made, even more keywords to remember."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How predicate is added to `SearchIncidentsCommand`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 1 (current choice):** `SearchIncidentsCommandParser` class calls `Model` to create a new Predicate based on search string."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Pros: Abstracts the creation and management of predicates to the `Model`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Requires greater level of coupling between classes."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* **Alternative 2:** `SearchIncidentsCommand` or `SearchIncidentsCommandParser` directly create Predicate based on search string."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Pros: Less dependencies within the parser class."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** Cons: Breaks abstraction flow."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// end::incidentsearch[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// tag::incidentedit[]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d\u003d Incident Edit feature"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "The incident edit mechanism is facilitated by `EditCommand` class. Validity of user input is checked when `execute()` is called and an exception is thrown if invalid."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "An exception will be thrown under these 2 conditions:"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* `index.getZeroBased() \u003e\u003d listOfIncidents.size()`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* `!incidentToEdit.equals(editedIncident) \u0026\u0026 model.hasIncident(editedIncident)`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Below is an activity diagram to illustrate the process that the user may go through"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::EditCommandActivity.png[]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "To prevent direct access and modification to the attributes in an incident object, a new incident object is created"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "using `EditIncident` each time the command is executed and then replaced at the specified index in a"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "`List\u003cIncident\u003e` that is facilitated by `FilteredIncidentList` class. This is all done in the execution stage."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Below is a sequence diagram to illustrate how the command executes:"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::EditCommandSequence.png[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How incident edit executes"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* **Alternative 1 (current choice):** Create a new incident object and replace the old copy in the list"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Pros: able to control access to attributes in incident objects"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Cons: more tedious implementation and more objects created"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "* **Alternative 2:** Directly access the attributes of the incident and change it"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Pros: less objects created, do not need to worry much about `IncidentId` of instance."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Cons: More prone to errors since attributes can be directly access and changed outside the class."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "// end::incidentedit[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "// tag::vehiclesearch[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d Vehicle Search feature"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "The vehicle search mechanism features a set of different types of searches that a user could utilise. Further documentation on the commands available in this set can be found within the link:{websiteURL}/main/UserGuide.html. The types of searches are as listed:"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Unfiltered - Displays all vehicles in `Model`."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* District - Displays all vehicles with `District district` in list of specified districts."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Vehicle Number - Displays all vehicles with `VehicleNumber vehicleNumberKeyword` in `Vehicle vehicle`. Need not be exact matches."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Vehicle Type - Displays all vehicles with exact matches in `VehicleType vehicleType` in `Vehicle vehicle`."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "The vehicle search mechanism is facilitated by `ModelManager`, which implements abstract class `Model`. It contains a `FilteredList\u003cVehicle\u003e filteredVehicles`, which internally stores the list of displayed vehicles in the GUI. Additionally, it implements the following key method:"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* `updateFilteredVehiclesList(Predicate\u003cVehicle\u003e predicate)` - Updates the stored filtered vehicle list with the new predicate"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How vehicle search keyword is inputted"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Current choice:** Parse user input after flag (eg. `ds/` or `vnum/`)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Easy to implement."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Reduce number of steps of input, more efficient."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Have to parse keyword from command and flag, user has to follow style of flag for successful search."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** User might confuse relevant flags, eg ds/ and l/, as they both pertain to districts."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** User might have to remember too many flags."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Alternative 2:** Prompt user for search input"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Separates command from keyword for ease of reading and parsing."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** User need not remember flags and will not confuse flags, just key in information as prompted."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Difficult to implement multi-command execution."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Requires multiple steps of input, slower and less efficient."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How listing all vehicles is called"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Current choice:** Utilise separate command `list-v`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros:"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Intuitive to user, as it contains clear action word."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Consistent with other list commands."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons:"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*** Some users might find it more intuitive to simply call `vehicles`."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* **Alternative 2:** Utilise separate command `vehicles`"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Pros: Intuitive for some."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** Cons: Appears separate from other list commands even though they are of the same nature and implemented similarly."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*Target user profile*: Emergency Services Call Operator"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* needs to quickly dispatch emergency vehicles"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* has a need to manage a significant number of incidents"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* can type fast, prefers typing over mouse input"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*Value proposition*: manage incidents and vehicle dispatch faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |log into the system with a password |secure the system against unauthorised access"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |log into the system with a unique identifier |hold accountable others who use the system"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |new user |create an account |log into the system to manage incidents"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |open the app |I can dispatch personnel and record an incident"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |view available vehicles |I can dispatch vehicles"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |confused operator\t|automatically prevent sending of non available vehicles |I won\u0027t be allowed to send occupied vehicles"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |to select a vehicle\t|it would be dispatched"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |to contact the dispatched vehicle and confirm it has been selected |it would be dispatched"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |an ID to be generated for my summaries |my reports can be tagged for easy search"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator |to have prompts for fields |I know the information required"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |careless operator\t|edit the report |I won\u0027t have to retype everything"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* * *` |operator on shift\t|to save the case for future retrieval |So that others can reference it locally"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |operator handling many cases |to quickly find relevant parties |I can submit the incident log"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |regular operator |to view the phone number |I can contact the caller whenever necessary"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |regular operator |to view the address |I can dispatch personnel based on proximity to address"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |operator who likes visual cues |to view the vehicles on patrol on a map |I have a visual on who to dispatch"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As an operator |to view the available vehicles in descending order of proximity to site |the vehicle can reach the incident site asap"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As an overwhelmed operator |to filter the available vehicles |I won\u0027t get confused over which vehicle to send"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As a tired operator |warning prompt when I select the least optimal available vehicle |I minimise fatigue errors"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As a busy operator |automatic spell and grammar check |so that I can type fast without worry"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As an operator |keyboard shortcuts |I can type while I talk"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`* *` |As an operator working under supervisors |to alert the relevant parties |So that they can act on it"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`*` |advanced operator |to auto-transcribe the call |I can store the call transcript for record-keeping purposes"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`*` |operator |automatic triangulation of the call location |I can dispatch a vehicle even if the caller does not know his/her address"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`*` |as an anxious operator |nearby vehicles to be notified of the incident even though they\u0027re not dispatched |In case backup is needed"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|`*` |As an operator that has to take many calls |to select from drop down lists for certain fields  |so that I can fill in the summary report fast"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "(For all use cases below, the *System* is the `IMS` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Use case: User Login"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "1.  User inputs username and password"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "2.  IMS checks username \u0026 password"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "3.  IMS provides user with access"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* 2a. The username is not found or password is incorrect."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "+"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** 2a1. IMS shows a generic error message to deter malicious intent."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Use case: New incident"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "1.  User requests to create a new incident"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "2.  IMS prompts for confirmation of vehicle assignment"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "3.  User accepts auto assigned vehicle for dispatch"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "4.  IMS creates a new incident with autofill details"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "5.  IMS prompts for completion of incident report"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "6.  User fills in necessary details"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "7.  User submits incident report"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* 3a. User opts for manual assignment."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** 3a1. IMS displays list of all available vehicles."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** 3a2. User selects index of vehicle to dispatch."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* 6a. User opts to complete report later."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** 6a1. IMS stores incident as a draft."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Use case: Edit Incident"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "1.  User searches for an incident"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "2.  IMS retrieves the incident"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "3.  User edits the incident details"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "4.  IMS saves the edited incident report"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "+"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* 2a. The incident is not found."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "** 2a1. IMS shows an error message."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "+"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Should be able to hold up to 1000 incidents without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Performance first for vehicle dispatch upon new incident creation."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Interface should prioritise user experience since operators function in a high stress environment."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[[IMS]] IMS::"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Incident Management System"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 97,
      "hellopanda128": 24,
      "madanalogy": 223,
      "Yoshi275": 109,
      "-": 348,
      "tirameshu": 63
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d IncidentManager - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":repoURL: https://github.com/se-edu/incidentManager-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "|https://github.com/AY1920S1-CS2103-T11-1/main"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "Yoshi275": 1,
      "-": 120
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Assume you are planing to expand the functionality of the IncidentManager (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "What other user stories do you think IncidentManager should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Assume that IncidentManager confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Currently, IncidentManager data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Note how the `IncidentManager` class implements the `ReadOnlyIncidentManager` interface so that clients who don\u0027t need write access to the `IncidentManager` can access the `IncidentManager` through the `ReadOnlyIncidentManager` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::ReadOnlyIncidentManagerUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Do some enhancements to the IncidentManager GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Consider adding a new command to the Incident Manager. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Is it possible to make the `IncidentManagerParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance IncidentManager"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Enhance IncidentManager in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 11,
      "-": 205
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d IncidentManager Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":repoURL: https://github.com/se-edu/incidentManager-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/incidentManager-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/incidentManager-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, IncidentManager\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 5,
      "-": 79
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d IncidentManager Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":repoURL: https://github.com/se-edu/incidentManager-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 50
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d Incident Management System - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103-T11-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "By: `Team CS2103-T11-1`      Since: `October 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "The Incident Management System (IMS) is a desktop app made for emergency call operators for coordinating emergency vehicle dispatch and incident report generation. IMS is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). The streamlined workflow of the IMS is designed to enable call operators to dispatch vehicles and prepare reports without wasting any precious time. That\u0027s because, in an emergency, every second counts."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".  Download the latest `ims.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Incident Manager."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  You will first need to `register` an account, or `login` with one of the pre-made accounts."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Logging in with an account that has the `Admin` tag gives you admin access to the system."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "(TODO)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Some commands have admin restrictions. Admins accounts are identified by the `Admin` tag."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "An account with admin privileges is included in the sample data with `Username` *Agent01* and `Password` *password*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// tag::access[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Logging in: `login`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Logs the user into the IMS and registers the active session. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `login u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "The only commands available prior to login are `Register`, `Login`, `Help`, and `Exit`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Logging out: `logout`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Logs the user out of the IMS and closes the user\u0027s session. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `logout`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Swapping interfaces: `swap`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Swaps the user interface between account view and incidents/vehicle view. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `swap`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "A user cannot access commands affecting entities not displayed in their current interface view."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Account Management Interface:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "image::account.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// end::access[]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// tag::account[]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Registering an account: `register`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Registers an account into the Incident Management System +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `register n/NAME p/PHONE_NUMBER e/EMAIL u/USERNAME w/PASSWORD [t/TAG]...`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "A account can have any number of tags (including 0). Only logged-in admins can add tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "****"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Usernames must be at least 3 characters in length."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Usernames can only consist of alphanumeric characters and the following special characters, excluding the parentheses, (.-)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Usernames cannot begin or end with a non alphanumeric character."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Usernames and Passwords cannot be blank or contain a whitespace."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Passwords must be at least 6 characters in length."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Passwords can only contain alphanumeric characters and/or these special characters, excluding the parentheses, (!#$%\u0026\u0027*+/\u003d?`{|}~^.-)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "****"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `register n/John Doe p/98765432 e/johnd@example.com u/op1 w/password`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `register n/Betsy Crowe e/betsycrowe@example.com u/oc1 w/password p/1234567 t/Team-1-OC`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Updating an account : `update`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Updates an existing account in the incident Manager or the own account of the user logged in if the index is left empty. +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `update [INDEX] [n/NAME] [p/PHONE] [e/EMAIL] [u/USERNAME] [w/PASSWORD] [t/TAG]...`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Only admins can update other user accounts. Non-admins cannot specify an index when executing the update command."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* If an index is not provided, update executes on the account of the user logged in."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* If an index is provided, updates the account at the specified `INDEX`. The index refers to the index number shown in the displayed account list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* When updating tags, the existing tags of the account will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only admins can access and edit tags. Admins cannot remove their own admin tag."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* You can remove all the account\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "****"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `update p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "updates the phone number and email address of the logged in account to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `update 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "updates the name of the 2nd account to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Listing accounts : `list-a`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Shows a list of all accounts registered in the incident Manager or those whose tags match any of the keywords if a keyword is specified. +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `list-a [KEYWORD] [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* The search is case insensitive. e.g `admin` will match `Admin`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only the account tags are searched."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only full words will be matched e.g. `ad` will not match `admin`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Accounts matching all keywords will be returned (i.e. `AND` search)."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `list-a` +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Displays the entire list of accounts"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `list-a team-1 admin` +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Returns a list of all accounts that have both the `admin` and `team-1` tag"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Locating accounts by name or username: `find-a`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Finds accounts whose name or username contains any of the given keywords. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `find-a KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only the name and username is searched."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Only full words will be matched for Names e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Partial words will be matched for Usernames e.g. `Agent` will match `Agent01`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Accounts matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `find-a John` +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `find-a Betsy agent` +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Returns any account having names or usernames `Betsy` or `agent`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Deleting an account : `delete-a`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Deletes the specified account from the incident Manager. +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `delete-a INDEX`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* Deletes the account at the specified `INDEX`."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* The index refers to the index number shown in the displayed account list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Only admins can access the delete command. You cannot delete your own account."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `list-a` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "`delete-a 2` +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Deletes the 2nd account in the incident Manager."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* `find-a Agent01` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "`delete-a 1` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Deletes the 1st account in the results of the `find` command."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// end::account[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// tag::incident[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Create New Incident: `new`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "This command works in two ways:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*1. auto/y* +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Format: `new l/DISTRICT_NUM auto/y`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* An available vehicle in the given district will be automatically dispatched to the incident site."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* The vehicle pane will show all available vehicles in the district."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** If no vehicle is available, the vehicle pane will be blank, and a relevant message is displayed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Valid district numbers are from 1 to 28!"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Example usage:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoYBeforeSS.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Expected outcome: In this case, there is no vehicle available in district 1."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoYAfterSS.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*2. auto/n* +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Format: `new l/DISTRICT_NUM auto/n`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* A list of available vehicles in the given district will be shown."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* A message will also appear to prompt user to also include the index of the chosen vehicle."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** If no vehicle is available, the vehicle pane will be blank, and a relevant message is displayed."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* Example usage:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoNBeforeSS.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoNPromptSS.png[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoNAfterPromptSS.png[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::newCommandAutoNAfterSS.png["
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "If multiple flags of the same prefix is provided by user, the command will take the last valid parameter of each prefix. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "For example `new l/1 l/2 l/3 auto/y auto/n` is equivalent to `new l/3 auto/n`. +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Rationale: user need not waste time backspacing if an input was keyed in wrongly."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d Filling a draft incident report: `fill`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Fills a draft incident report if relevant parameters are specified, otherwise lists all draft reports ready for filling."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "This command works in two modes:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "*1. No parameter mode* +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Format: `fill` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Lists all draft incident reports ready to be filled."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* This command lists both incomplete and complete drafts."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** If no drafts exist, a relevant message is displayed in the GUI result panel while the GUI incident panel view remains unchanged."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Example usage:"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::fillCommandNoParamsBeforeScreenshot.png[FillExample1]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. Incident panel GUI shows all incidents before executing `fill` in no-parameter mode."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::fillCommandNoParamsAfterScreenshot.png[]"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. Incident panel GUI shows all draft incidents after executing `fill` in no-parameter mode."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "*2. Parameter mode* +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Format: `fill [INDEX] [c/CALLER_NUMBER] [d/DESCRIPTION]` +"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Fills the draft incident report corresponding to the specified index with the phone number of the caller who reported the incident and the description of the incident."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Index must be assigned *with reference to the currently shown list of incidents* on the GUI incident panel."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Both incomplete and complete drafts can be filled."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Fields of complete drafts will be overwritten."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Executing this command changes incident `status` to `COMPLETE_DRAFT`."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Both `CALLER_NUMBER` and `DESCRIPTION` fields must be specified while executing this command."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* The newly filled draft will now appear at the top of the list of incidents in the GUI incident panel view."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Example usage:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::fillCommandWithParamsBeforeScreenshot.png[]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. After using `fill` in no parameter mode, this screenshot shows how to fill the 2nd incident in the displayed list."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Expected outcome:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::fillCommandWithParamsAfterScreenshot.png[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. After using `fill` in parameter mode, this screenshot shows that the description of the specified incident has been updated while the caller number has been overwritten with the new value. The status of the draft has changed from `INCOMPLETE_DRAFT` to `COMPLETE_DRAFT`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Using `fill` in both modes one after the other thus enables convenient listing and filling of target incident reports."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d Submitting a completed draft report: `submit`"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Submits a completed draft incident report if relevant parameters are specified, otherwise lists all completed drafts ready for submission."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Similar to `fill`, this command also works in two modes:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "*1. No parameter mode* +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Format: `submit` +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Lists all completed draft incident reports ready for submission."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* This command only lists complete drafts."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** If no complete drafts exist, a relevant message is displayed in the GUI result panel while the GUI incident panel view remains unchanged."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Expected outcome of `submit`:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::submitCommandNoParamsAfterScreenshot.png[]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. Executing `submit` in no parameter mode lists all completed drafts ready for submission."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "*2. Parameter mode* +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Format: `submit [INDEX]` +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Submits the completed draft incident report corresponding to the specified index."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Index must be assigned *with reference to the currently shown list of incidents* on the GUI incident panel."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Only complete drafts can be submitted."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "** Executing this command changes incident `status` to `SUBMITTED_REPORT`."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* The newly submitted draft will now appear at the top of the list of incidents in the GUI incident panel view."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* Expected outcome of `submit 2`:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "image::submitCommandWithParamsAfterScreenshot.png[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ".Fig X. The incident filled using the `fill` command above has been submitted. The newly submitted incident is listed at the top and its status changes from `COMPLETE_DRAFT` to `SUBMITTED_REPORT`."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Using `submit` in both modes right after using `fill` thus enables convenient submitting of newly filled complete incident report drafts."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// end::incident[]"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// tag::common[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//Clears all entries from the incident Manager. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//Format: `clear`"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d Listing all incidents: `list-i`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Shows a list of all incidents in the Incident Manager +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Format: `list-i`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "****"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* The listing returns all incidents, inclusive of all drafts and submitted incident reports"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* All keywords and parameters used are ignored"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "****"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Example usage and expected outcome:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::listIncidentsCommand.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003d\u003d\u003d Locating an incident report using incident ID, operator name or description keyword: `find-i`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Finds incidents containing the relevant specified parameters."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Possible Parameters: `id`/`op`/`desc`"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "*Different Parameters*"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "**By Operator Name** +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Format: `find-i op/KEYWORD` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Lists all incidents whereby the operator name contains the given keyword"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Successful Usage and Expected Outcome:"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithOperatorParameter.png[]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Failed Usage and Expected Outcome:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithOperatorParameterFailed.png[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "**By Description** +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Format: `find-i desc/KEYWORD` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Lists all incidents whereby the incident description contains the given keyword"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Successful Usage and Expected Outcome:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithDescriptionParameter.png[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Failed Usage and Expected Outcome:"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithDescriptionParameterFailed.png[]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "**By ID**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Format: `find-i id/KEYWORD` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Lists all incidents whereby the incident ID is an exact match with the given keyword"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Successful Usage and Expected Outcome:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithIdParameter.png[]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Failed Usage and Expected Outcome:"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "image::findIncidentsCommandWithIdParameterFailed.png[]"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Requires an exact ID match"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Failed Usage:"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** The ID does not match the given keyword exactly"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Example of Successful Usage:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "** ID matches the given keyword exactly"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "****"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* The search is case insensitive. e.g `dave` will match `Dave`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Only the specified parameter is searched, and only one parameter can be searched each time"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* Only full words will be matched e.g. `Fir` will not match `Fire`"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "****"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* `find-i id/0920160001` +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Returns Incident #0920160001"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* `find-i op/Dave` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Returns any incidents whereby the operator\u0027s name contains \u0027Dave\u0027"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* `find-i desc/fire` +"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Returns any incidents whereby the description contains \u0027fire\u0027"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d\u003d Editing an Incident: `edit-i`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Edits an existing incident in the Incident Manager as identified by the index in the display."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Format: `edit-i [INDEX] [l/DISTRICT] [C/CALLER NUMBER] [d/DESCRIPTION]`"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** If an index is not provided, system will prompt for index. Does not make any edits."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Number of fields provided for update is optional and can vary."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "If no fields are provided, incident will remain unchanged."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Existing values will be updated to input values provided."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Edits that result in duplicate incidents are not allowed"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Incidents with all the same fields (`DateTime`, `District`, `IncidentId`, `Caller Number`) are considered duplicates."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Example of input:"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** `edit-i 1 l/2 d/This is an incident description.`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*** result: only district and description is changed."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** `edit-i 1`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*** result: `No new fields were provided, incident is not edited.`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editIncident1.png[]"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editIncident2.png[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d\u003d Adding a Vehicle: `add-v`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Adds a vehicle into the Incident Management System."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Format: `add-v [l/DISTRICT] \u0026 [vn/VEHICLE NUMBER] \u0026 [vt/VEHICLE TYPE] \u0026 [a/AVAILABILITY]`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "All fields must be provided in order to make a valid addition to the Incident Management System. If any of the fields are missing,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "vehicle will not be added."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Vehicles that have the same vehicle number and vehicle type are considered to duplicate vehicles"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Duplicate vehicles cannot be added into the Incident Management System."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** `add-v l/2 vn/12345 vt/Ambulance a/available`"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*** result: `New vehicle added: Ambulance Vehicle Number: 12345 District: 2 Availability: AVAILABLE`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** `add-v l/12 vn/23456 vt/Patrol Car a/busy`"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*** result: `New vehicle added: Patrol Car Vehicle Number: 23456 District: 12 Availability: BUSY`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::addVehicle1.png[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::addVehicle2.png[]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d\u003d Editing a Vehicle: `edit-v`"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Edits a vehicle identified by the index displayed in the Incident Management System."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Format: `edit-v [INDEX] [l/DISTRICT] [vn/VEHICLE NUMBER] [vt/VEHICLE TYPE] [a/AVAILABILITY]`"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Number of fields provided for edit may vary. If no fields are provided, the vehicle will not be edited."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Edit inputs that result in duplicate vehicles in the list will not be allowed."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Only vehicles displayed on the interface are valid of edit."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Existing values will be updated to the input values given."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** `edit-v 1 l/13 vt/Ambulance`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*** result: district will be changed to 13 and vehicle type will be changed to Ambulance"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Edit vehicle:"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editVehicle1.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editVehicle2.png[]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Edit Vehicle that results in duplicates:"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editDuplicateVeh1.png[]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::editDuplicateVeh2.png[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "// tag::find-v[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u003d\u003d\u003d Finding a Vehicle: `find-v`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Finds a vehicle by its district number, vehicle number or vehicle type."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "The command works in three ways:"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*1. Find by district*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Format: `find-v ds/DISTRICT [MORE DISTRICTS]`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** User can input multiple districts to search for vehicles in."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVDsBeforeSS.png[]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVDsAfterSS.png[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ".Fig X finding vehicle by district number."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*2. Find by vehicle number*"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Format: `find-v vnum/NUMBER`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** The number need not be an exact match of any vehicle number; any vehicle with input number in its vehicle number will be returned. +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVVnumBeforeSS.png[]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVVnumAfterSS.png[]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ".Fig X finding vehicke by vehicle number."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "//end::find-v[]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "*3. Find by vehicle type*"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Format: `find-v vtype/VEHICLE TYPE`"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "** The vehicle type keyword must match the actual vehicle type exactly."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Example usage:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVVtypeBeforeSS.png[]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "image::findVVtypeAfterSS.png[]"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "\u003d\u003d\u003d Deleting a Vehicle: `delete-v`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Deletes a vehicle in the list as identified by the index."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "Format: `delete-v [INDEX]`"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** A valid index has to be provided"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "A valid index is a positive integer and points to a vehicle displayed in the vehicles list."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "** Vehicles that are currently dispatched or indicated as `BUSY` will not be able to be deleted."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::deleteVehicle1.png[]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "image::deleteVehicle2.png[]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Incident Manager data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// end::common[]"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// tag::incidentversionhistory[]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003d\u003d\u003d Track incident history `[coming in v2.0]`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Allows user to track any changes made to an incident report throughout its lifecycle in the incident management system. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Format: `track [INDEX]` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Function: Outputs a list of timestamps and a brief summary of changes made to the specified incident report."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "This feature will allow the user to improve accountability in filing incident reports. As the IMS handles incident data which is very sensitive in nature, it will be crucial for users to know when exactly were what changes made to a given incident report."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "// end::incidentversionhistory[]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d\u003d Decrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Decrypts the incident manager data file. +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Format: `decrypt PASSWORD`"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Data files will be encrypted by default. Users can decrypt the file with the command above."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Incident Management System folder."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Login* : `login u/USERNAME p/PASSWORD`"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Logout* : `logout`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Swap* : `swap`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *Register* : `register n/NAME p/PHONE_NUMBER e/EMAIL u/USERNAME p/PASSWORD [t/TAG]...` +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "e.g. `register n/James Ho p/22224444 e/jamesho@example.com u/Agent-3 w/password t/Admin t/Team-01`"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *Update* : `update [INDEX] [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [u/USERNAME] [p/PASSWORD] [t/TAG]...` +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "e.g. `update 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *List Accounts* : `list-a [KEYWORD] [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "e.g. `list-a Admin`"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *Find Account* : `find-a KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "e.g. `find-a James Jake`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *Delete Account* : `delete-a INDEX` +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "e.g. `delete-a 3`"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "* *New* `new l/DISTRICT auto/y`"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* *Fill*"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. `fill` (to list all draft incidents ready for filling)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. `fill [INDEX] [c/CALLER_NUMBER] [d/DESCRIPTION]` (to fill specified incident report) +"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "e.g. `fill 1 c/98984932 d/This is a sample description for incident 1 in district 3.`"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "* *Submit*"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "1. `submit` (to list all completed draft incidents ready for submission)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "2. `submit` [INDEX] (to submit specified incident report) +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "e.g. `submit 4`"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *List Incidents* : `list-i`"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "* *Find Incidents* : `find-i [op/KEYWORD] [desc/KEYWORD] [id/KEYWORD]` +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "e.g. `find-i op/alex`"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* *List Vehicles* : `list-v`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "* *Find Vehicles* : `find-v [ds/KEYWORDS] [vtype/KEYWORD] [vnum/KEYWORD]` +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "e.g. `find-v ds/1 2 3`"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 86,
      "hellopanda128": 89,
      "madanalogy": 138,
      "Yoshi275": 81,
      "-": 111,
      "tirameshu": 96
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This document was originally written for _IncidentManager Level 4_ and hence its screenshots refer to `incidentManager-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For use with _IncidentManager Level 3_, wherever `incidentManager-level4` is used in the screenshots, you should use *`incidentManager-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  You will be brought to the `Select repository` page. Select `GitHub`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on whether you are the owner of the repository, you can either"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "grant access:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "https://ci.appveyor.com/project/damithc/incidentManager-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 91
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This document was originally written for _IncidentManager Level 4_ and hence its screenshots refer to `incidentManager-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For use with _IncidentManager Level 3_, wherever `incidentManager-level4` is used in the screenshots, you should use *`incidentManager-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ". Enter an arbitrary description e.g. incidentManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 45
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This document was originally written for _IncidentManager Level 4_ and hence its screenshots refer to `incidentManager-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For use with _IncidentManager Level 3_, wherever `incidentManager-level4` is used in the screenshots, you should use *`incidentManager-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e. Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://coveralls.io/ and click `SIGN IN`. Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  After logging in, you will be brought to the `Your Repositories` page. On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Find the switch for the forked repository."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".  You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub. If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click `Settings`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".  Uncheck the `LEAVE COMMENTS?` checkbox. Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments, width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 61
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Creates the `incidentManager.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 98
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This document was originally written for _IncidentManager Level 4_ and hence its screenshots refer to `incidentManager-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For use with _IncidentManager Level 3_, wherever `incidentManager-level4` is used in the screenshots, you should use *`incidentManager-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites. With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation. This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`. Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ". You will then be brought to the setup page. Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access, width \u003d 630]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name, width \u003d 630]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link, width \u003d 630]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/change_site_name.png[Change site name, width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 57
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 210
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "This document was originally written for _IncidentManager Level 4_ and hence its screenshots refer to `incidentManager-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "For use with _IncidentManager Level 3_, wherever `incidentManager-level4` is used in the screenshots, you should use *`incidentManager-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/incidentManager-level3/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 137
    }
  },
  {
    "path": "docs/diagrams/AccessActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":User attempts to execute command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "if () then ([else])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    if () then ([else])"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    :System displays error message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    else ([is Login or Add or Exit])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    :Command is executed;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "else ([isLoggedIn])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ":Command is executed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "stop"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 18
    }
  },
  {
    "path": "docs/diagrams/AccessSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \"u:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":Session\" as Session MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[-\u003e LogicManager : execute(delete)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(delete)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand -\u003e Model : getLoggedInPerson()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Model -\u003e Session : getLoggedInPerson()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate Session"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Session --\u003e Model :"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate Session"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "alt LoggedInPerson is Admin"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand --\u003e Model : deletePerson()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Model --\u003e Model : deletePerson()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "else  else"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand --\u003e DeleteCommand : throw Exception"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "end"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "destroy DeleteCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 59
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveIncidentManager(incidentManager)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager *-right-\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList -[hidden]down- UniquePersonList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o-right-\u003e Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Person o-up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/CommitActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":User executes command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "if () then ([command commits IncidentManager])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    :Purge redunant states;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    :Save IncidentManager to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    incidentManagerStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "stop"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 12
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommandParser --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommandParser --\u003e IncidentManagerParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 10,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/FillCommandNoParamsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \"l:ListIncidentsCommand\" as ListIncidentsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[-\u003e IncidentManagerParser : parseCommand(fill)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "create ListIncidentsCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "IncidentManagerParser -\u003e ListIncidentsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate ListIncidentsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "ListIncidentsCommand --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate ListIncidentsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[\u003c--IncidentManagerParser : l"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[-\u003e ListIncidentsCommand : execute()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate ListIncidentsCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "destroy IncidentManagerParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "ListIncidentsCommand -\u003e Model : updateFilteredIncidentList(Incident:isDraft)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Model --\u003e ListIncidentsCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[\u003c-- ListIncidentsCommand : resultMessage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate ListIncidentsCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "destroy ListIncidentsCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 42
    }
  },
  {
    "path": "docs/diagrams/FillCommandWithParamsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \":FillCommandParser\" as FillCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \"f:FillCommand\" as FillCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \"fi:FilteredList\u003cIncident\u003e\" as FilteredList MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "participant \"updatedIncident:Incident\" as Incident MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[-\u003e FillCommandParser : parse([args])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate FillCommandParser"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "create FillCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommandParser -\u003e FillCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate FillCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand --\u003e FillCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate FillCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[\u003c--FillCommandParser : f"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate FillCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[-\u003e FillCommand : execute()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate FillCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "destroy FillCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand -\u003e Model : getFilteredIncidentList()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Model --\u003e FillCommand : fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand -\u003e FilteredList : get([INDEX])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate FilteredList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FilteredList --\u003e FillCommand : incidentToFill"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate FilteredList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "create Incident"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand -\u003e Incident"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate Incident"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Incident --\u003e FillCommand : updatedIncident"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate Incident"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand -\u003e Model : remove(incidentToFill)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Model --\u003e FillCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "FillCommand -\u003e Model : add(updatedIncident)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Model --\u003e FillCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "[\u003c-- FillCommand : resultMessage"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "deactivate FillCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "destroy FillCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 69
    }
  },
  {
    "path": "docs/diagrams/IncidentClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class Incident {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "status:Status"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "show Incident members"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "hide Incident methods"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class IncidentDateTime"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class Person"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class Vehicle"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class IncidentId"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class District"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class Description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class CallerNumber"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Incident *--\u003e IncidentDateTime"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Incident *--\u003e IncidentId"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Incident *--\u003e Person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Vehicle \u003c-* Incident"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "District \u003c--* Incident"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Description \u003c--* Incident"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "Incident *-\u003e CallerNumber"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "show Status attributes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "enum Status \u003c\u003cenumeration\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "INCOMPLETE_DRAFT"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "COMPLETE_DRAFT"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "SUBMITTED_REPORT"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 36
    }
  },
  {
    "path": "docs/diagrams/IncidentReportingActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "repeat"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ":User wants to report incident(s);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "if () then ([create an incident report])"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :User executes \u0027new\u0027 command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    if () then ([assign vehicle(s) manually])"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        :User chooses vehicle to dispatch;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    else ([assign vehicle(s) automatically])"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        :System dispatches closest available vehicle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :New incomplete draft incident report created;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "else ([fill or submit an incident report])"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    if () then ([fill an incident report])"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        :User executes \u0027fill\u0027 command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if() then ([no parameters])"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            :All draft incident reports listed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            :User executes \u0027fill\u0027 command with parameters;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        else ([with parameters])"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        :Specified draft incident report completely filled;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "else ([submit an incident report])"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :User executes \u0027submit\u0027 command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    if() then ([no parameters])"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :All completely filled draft incident reports listed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :User executes \u0027submit\u0027 command with parameters;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    else ([with parameters])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    :Specified draft incident report submitted;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "endif"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "endif"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "repeat while () is ([report another incident])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "-\u003e [end session];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "stop"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 36
    }
  },
  {
    "path": "docs/diagrams/ListIncidentsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \"l:ListIncidentsCommand\" as ListIncidentsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \"filteredIncidents:FilteredList\u003cIncident\u003e\" as FilteredList MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[-\u003e LogicManager : execute(incidents)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(incidents)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "create ListIncidentsCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "IncidentManagerParser -\u003e ListIncidentsCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate ListIncidentsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "ListIncidentsCommand --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate ListIncidentsCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "LogicManager -\u003e ListIncidentsCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate ListIncidentsCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "ListIncidentsCommand -\u003e Model : updatedFilteredIncidentList(PREDICATE_SHOW_ALL_INCIDENTS)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model -\u003e FilteredList : setPredicate(PREDICATE_SHOW_ALL_INCIDENTS)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate FilteredList"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " FilteredList --\u003e Model :"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate FilteredList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model --\u003e ListIncidentsCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "ListIncidentsCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate ListIncidentsCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "ListIncidentsCommand -[hidden]-\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "destroy ListIncidentsCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 51
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Class IncidentManagerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "LogicManager --\u003e\"1\" IncidentManagerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Interface ReadOnlyIncidentManager \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Class IncidentManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Class ReadOnlyIncidentManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Package Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class Person"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class UniquePersonList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager .up.|\u003e ReadOnlyIncidentManager"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "ModelManager o--\u003e \"1\" IncidentManager"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager *--\u003e \"1\" UniquePersonList"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "UniquePersonList o--\u003e \"*\" Person"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e Address"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Person *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Name -[hidden]right-\u003e Phone"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Phone -[hidden]right-\u003e Address"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Address -[hidden]right-\u003e Email"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager --\u003e\"1\" Person : filtered list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 6,
      "-": 50
    }
  },
  {
    "path": "docs/diagrams/NewDraftSequenceDiagramAuto.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \"n:NewCommand\" as NewCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "box Incident MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \"draft:Incident\" as Incident MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "box FindVehiclesCommand LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \"f:FindVehiclesCommand\" as FindVehiclesCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "participant \":Session\" as Session MODEL_COLOR"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "end box"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "[-\u003e LogicManager : execute(\"new l/1 auto/y\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u0027# parsing\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(\"new l/1 auto/y\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "create NewCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "IncidentManagerParser -\u003e NewCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate NewCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate NewCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : n"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u0027# get operator\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "LogicManager -\u003e NewCommand : execute()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate NewCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand -\u003e Model : getLoggedInPerson()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Model -\u003e Session : getLoggedInPerson()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate Session"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Session --\u003e Model : loggedInPerson"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate Session"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Model --\u003e NewCommand"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u0027# creating draft\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "create Incident"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand -\u003e Incident : createIncident"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate Incident"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "Incident --\u003e NewCommand : draft"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate Incident"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "\u0027# dispatch vehicle\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "create FindVehiclesCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand -\u003e FindVehiclesCommand : dispatchVehicle(draft, true, model)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate FindVehiclesCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "FindVehiclesCommand --\u003e NewCommand : f"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate FindVehiclesCommand"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand -\u003e FindVehiclesCommand : execute()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "activate FindVehiclesCommand"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "FindVehiclesCommand -\u003e FindVehiclesCommand : autoAssignVehicle"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "FindVehiclesCommand --\u003e NewCommand : dispatchedVehicle"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate FindVehiclesCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate NewCommand"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "NewCommand -[hidden]-\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "destroy NewCommand"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 85
    }
  },
  {
    "path": "docs/diagrams/SearchIncidentsSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":SearchIncidentsCommandParser\" as SearchIncidentsCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \"l:SearchIncidentsCommand\" as SearchIncidentsCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "participant \"filteredIncidents:FilteredList\u003cIncident\u003e\" as FilteredList MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[-\u003e LogicManager : execute(\"search op/Alex\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(\"search op/Alex\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "create SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "IncidentManagerParser -\u003e SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommandParser --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "IncidentManagerParser -\u003e SearchIncidentsCommandParser : parse(\"Alex\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommandParser -\u003e Model : \"Alex\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model --\u003e SearchIncidentsCommandParser : predicate"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "create SearchIncidentsCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommandParser -\u003e SearchIncidentsCommand : predicate"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate SearchIncidentsCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand --\u003e SearchIncidentsCommandParser : l"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate SearchIncidentsCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommandParser --\u003e IncidentManagerParser : l"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : l"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "destroy SearchIncidentsCommandParser"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "LogicManager -\u003e SearchIncidentsCommand : execute()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate SearchIncidentsCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand -\u003e Model : updatedFilteredIncidentList(predicate)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model -\u003e FilteredList : setPredicate(predicate)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate FilteredList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " FilteredList --\u003e Model :"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate FilteredList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model --\u003e SearchIncidentsCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand -\u003e Model : getFilteredIncidentList"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "Model --\u003e SearchIncidentsCommand"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand -\u003e SearchIncidentsCommand : size()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand --\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate SearchIncidentsCommand"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "SearchIncidentsCommand -[hidden]-\u003e LogicManager : commandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 78
    }
  },
  {
    "path": "docs/diagrams/SessionClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Model *-right-\u003e \"1\" Session"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Session *-down-\u003e \"0..1\" Person"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person o-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person *--\u003e Name"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person *--\u003e Phone"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person *--\u003e Email"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person *--\u003e Username"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Person *--\u003e Password"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 17
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Interface IncidentManagerStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Class JsonIncidentManagerStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "StorageManager o--\u003e IncidentManagerStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "JsonIncidentManagerStorage .left.|\u003e IncidentManagerStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "JsonIncidentManagerStorage .down.\u003e JsonSerializableIncidentManagerStorage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "JsonSerializableIncidentManagerStorage .right.\u003e JsonSerializablePerson"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "JsonSerializablePerson .right.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 6,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState0.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title Initial state"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab2:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "hide State2"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState1.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"delete 5\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab2:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "hide State3"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 19
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState2.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"add n/David\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab2:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState3.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"undo\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab2:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState4.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"list\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab2:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State2"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 17
    }
  },
  {
    "path": "docs/diagrams/UndoRedoState5.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassFontColor #000000"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam ClassBorderColor #000000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "title After command \"clear\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "package States \u003c\u003crectangle\u003e\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State1 as \"__ab0:IncidentManager__\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State2 as \"__ab1:IncidentManager__\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    class State3 as \"__ab3:IncidentManager__\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "State1 -[hidden]right-\u003e State2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "State2 -[hidden]right-\u003e State3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "class Pointer as \"Current State\" #FFFFF"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Pointer -up-\u003e State3"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "note right on link: State ab2 deleted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@end"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 18
    }
  },
  {
    "path": "docs/diagrams/UndoSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":IncidentManagerParser\" as IncidentManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"u:UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "participant \":VersionedIncidentManager\" as VersionedIncidentManager MODEL_COLOR"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(undo)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "LogicManager -\u003e IncidentManagerParser : parseCommand(undo)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate IncidentManagerParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "create UndoCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser -\u003e UndoCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "UndoCommand --\u003e IncidentManagerParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManagerParser --\u003e LogicManager : u"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate IncidentManagerParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e UndoCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "activate UndoCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "UndoCommand -\u003e Model : undoIncidentManager()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Model -\u003e VersionedIncidentManager : undo()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "activate VersionedIncidentManager"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "VersionedIncidentManager -\u003e VersionedIncidentManager :resetData(ReadOnlyIncidentManager)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "VersionedIncidentManager --\u003e Model :"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "deactivate VersionedIncidentManager"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e UndoCommand"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate UndoCommand"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "UndoCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "destroy UndoCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 14,
      "-": 39
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "Participant \":IncidentManagerParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ecp -\u003e ec ++: index, editPersonDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 20
    }
  },
  {
    "path": "docs/team/Ahmed.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d Ahmed Bahajjaj - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d PROJECT: IncidentManager - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager - Level 3 is a desktop incident Manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 5,
      "-": 67
    }
  },
  {
    "path": "docs/team/Atharv.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d PROJECT: IncidentManager - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager - Level 3 is a desktop incident Manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 68
    }
  },
  {
    "path": "docs/team/Cheryl.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d PROJECT: IncidentManager - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager - Level 3 is a desktop incident Manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 68
    }
  },
  {
    "path": "docs/team/Mandy.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d PROJECT: IncidentManager - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager - Level 3 is a desktop incident Manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 68
    }
  },
  {
    "path": "docs/team/MeiAn.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003d\u003d PROJECT: IncidentManager - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "IncidentManager - Level 3 is a desktop incident Manager application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 68
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "When working on Incident Manager, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".invalidPersonIncidentManager.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 115
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     Command command \u003d incidentManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         storage.saveIncidentManager(model.getIncidentManager());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".IncidentManagerParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".IncidentManagerParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "`JsonIncidentManager#saveIncidentManager()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableIncidentManager``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".JsonSerializableIncidentManager#JsonSerializableIncidentManager()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Converts a given {@code ReadOnlyIncidentManager} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * {@code JsonSerializableIncidentManager}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public JsonSerializableIncidentManager(ReadOnlyIncidentManager source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "`JsonSerializableIncidentManager`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "this tutorial, you learned more about the inner workings of IncidentManager and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".. Save the incident Manager in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ".. Add a new entity to the incident Manager"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 14,
      "-": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.storage.IncidentManagerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.storage.JsonIncidentManagerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing IncidentManager ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManagerStorage incidentManagerStorage \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new JsonIncidentManagerStorage(userPrefs.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        storage \u003d new StorageManager(incidentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Optional\u003cReadOnlyIncidentManager\u003e incidentManagerOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ReadOnlyIncidentManager initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            incidentManagerOptional \u003d storage.readIncidentManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (!incidentManagerOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample IncidentManager\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            initialData \u003d incidentManagerOptional.orElseGet(SampleDataUtil::getSampleIncidentManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty IncidentManager\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            initialData \u003d new IncidentManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty IncidentManager\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            initialData \u003d new IncidentManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty IncidentManager\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logger.info(\"Starting IncidentManager \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 20,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String LOG_FILE \u003d \"incidentManager.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_IRRELEVANT_PREFIXES \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"Please do not enter irrelevant prefixes/ fields!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_PERSON_FOUND \u003d \"No persons found matching keyword.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_SINGLE_PERSON_LISTED \u003d \"1 person listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_INVALID_INCIDENT_INDEX \u003d \"The incident index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_INVALID_VEHICLE_INDEX \u003d \"The vehicle index provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_INCIDENTS_FOUND \u003d \"No incidents found matching keyword.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_SINGLE_INCIDENT_LISTED \u003d \"1 incident listed!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_INCIDENTS_LISTED_OVERVIEW \u003d \"%1$d incidents listed!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_VEHICLES_FOUND \u003d \"No vehicles found matching keyword.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_SINGLE_VEHICLE_LISTED \u003d \"1 vehicle listed!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_VEHICLES_LISTED_OVERVIEW \u003d \"%1$d vehicles listed!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_VEHICLE_ASSIGNMENT_PROMPT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"Please include the index of the vehicle you would like to assign, with the district prefix! \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    + \"eg new l/1 auto/n v/1\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_VEHICLE_OOB \u003d \"Vehicle out of bounds!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_NO_AVAILABLE_VEHICLE \u003d \"No vehicle available in this district!\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_VEHICLE_BUSY \u003d \"Vehicle is busy!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_VTYPE \u003d \"No such vehicle type!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_INVALID_VEHICLE_NUMBER \u003d \"Invalid vehicle number! \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"All vehicle numbers must follow the format: ABC1234D\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VEHICLE_NUMBER \u003d \"A vehicle with this vehicle number already exists, \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"please try another.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_NOT_ONE_DISTRICT \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"Please ensure there is one input for district number!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_AUTO_ONLY_Y_N \u003d \"Auto can only be y or n!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_ALL_INCIDENTS_LISTED \u003d \"Listed all incidents\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_INCIDENTS_LISTED \u003d \"No incident reports present in the system\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_ALL_DRAFT_INCIDENTS_LISTED \u003d \"Listed all draft incident reports\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_DRAFTS_LISTED \u003d \"No drafts present in the system\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_ALL_COMPLETE_INCIDENTS_LISTED \u003d \"Listed all incident reports ready for\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \" submission\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_NO_INCIDENT_TO_SUBMIT \u003d \"No reports ready for submission present in the system\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_ACCESS_ADMIN \u003d \"You must be an admin to perform this operation. \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Please see help page for more info.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 5,
      "madanalogy": 2,
      "Yoshi275": 19,
      "-": 13,
      "tirameshu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns the IncidentManager."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @see seedu.address.model.Model#getIncidentManager()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    ReadOnlyIncidentManager getIncidentManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** Returns the current person logged in */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Person getLoggedInPerson();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** Returns the login time */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    String getLoginTime();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** Returns true if currently in person view mode */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    boolean isPersonView();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** Toggles the current view mode */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void isPersonView(boolean isPersonView);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of incidents */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    ObservableList\u003cIncident\u003e getFilteredIncidentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of vehicles */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    ObservableList\u003cVehicle\u003e getFilteredVehicleList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Path getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4,
      "madanalogy": 16,
      "Yoshi275": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.parser.IncidentManagerParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final IncidentManagerParser incidentManagerParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireAllNonNull(model, storage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManagerParser \u003d new IncidentManagerParser(true, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManagerParser.setLoggedIn(model.isLoggedIn());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Command command \u003d incidentManagerParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            assert storage !\u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            assert(model.getIncidentManager() !\u003d null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            storage.saveIncidentManager(model.getIncidentManager());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ReadOnlyIncidentManager getIncidentManager() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return model.getIncidentManager();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Person getLoggedInPerson() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return model.getLoggedInPerson();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String getLoginTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return model.getLoginTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isPersonView() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManagerParser.isPersonView();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void isPersonView(boolean isPersonView) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManagerParser.setPersonView(isPersonView);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ObservableList\u003cIncident\u003e getFilteredIncidentList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return model.getFilteredIncidentList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ObservableList\u003cVehicle\u003e getFilteredVehicleList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return model.getFilteredVehicleList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return model.getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 6,
      "madanalogy": 33,
      "Yoshi275": 5,
      "-": 71,
      "tirameshu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Adds a person to the incident management system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"register\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \": Registers an account into the Incident Management system.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_USERNAME + \"USERNAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_PASSWORD + \"PASSWORD \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_USERNAME + \"John123 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_PASSWORD + \"password \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_TAG + \"Supervisor \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_TAG + \"Team-A\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New user added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This user already exists in the incident management system\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Access Control check for tag addition"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!toAdd.getTags().isEmpty() \u0026\u0026 Person.isNotAdmin(model.getLoggedInPerson())) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ACCESS_ADMIN);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 20,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddVehicleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VNUM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Adds a vehicle to the IMS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class AddVehicleCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-v\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" Adds a vehicle to the Incident Managment System.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[ \" + PREFIX_DISTRICT + \"DISTRICT] \u0026 \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[ \" + PREFIX_VNUM + \"[VEHICLE NUMBER] \u0026 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[ \" + PREFIX_VTYPE + \"[VEHICLE TYPE] \u0026 \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"[ \" + PREFIX_AVAIL + \"[AVAILABILITY( \" + Availability.MESSAGE_CONSTRAINTS + \")] \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \" \" + PREFIX_DISTRICT + \"2 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \" \" + PREFIX_VTYPE + \"Ambulance \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \" \" + PREFIX_VNUM + \"5903S\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_ADD_VEHICLE_SUCCESS \u003d \"New vehicle added: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VEHICLE \u003d \"This vehicle already exists in the system.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private Vehicle toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public AddVehicleCommand(Vehicle vehicle) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(vehicle);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.toAdd \u003d vehicle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (model.hasVehicle(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VEHICLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (model.hasVNum(toAdd.getVehicleNumber().toString())) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_VEHICLE_NUMBER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.addVehicle(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_VEHICLE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!(other instanceof AddVehicleCommand)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return toAdd.equals(((AddVehicleCommand) other).toAdd);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 65,
      "tirameshu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Incident Manager has been cleared!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (model.getLoggedInPerson() \u003d\u003d null || Person.isNotAdmin(model.getLoggedInPerson())) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ACCESS_ADMIN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setIncidentManager(new IncidentManager());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 10,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** The application should switch persons display for incidents and vehicles. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final boolean login;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final boolean logout;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final boolean swap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Constructs a {@code CommandResult} with the flags needed for login feature."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean login, boolean logout, boolean swap) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.login \u003d login;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.logout \u003d logout;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.swap \u003d swap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        showHelp \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        exit \u003d false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        login \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logout \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        swap \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isLogin() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return login;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isLogout() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return logout;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isSwap() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return swap;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 32,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-a\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_DELETE_ERROR \u003d \"You cannot delete your own account!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Access Control check for command operation"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (Person.isNotAdmin(model.getLoggedInPerson())) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ACCESS_ADMIN);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        //Prevent deletion of own account"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (personToDelete.equals(model.getLoggedInPerson())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_ERROR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 56,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteVehicleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Deletes a vehicle identified using its index in the IMS."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class DeleteVehicleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-v\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \"INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DELETE_VEHICLE_SUCCESS \u003d \"Deleted Vehicle %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DELETE_VEHICLE_ERROR \u003d \"You cannot delete a vehicle that is currently \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"dispatched.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public DeleteVehicleCommand(Index index) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        List\u003cVehicle\u003e listOfVehicles \u003d model.getFilteredVehicleList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d listOfVehicles.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VEHICLE_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Vehicle toDelete \u003d listOfVehicles.get(index.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        //So that vehicles currently dispatched cannot be deleted"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (toDelete.getAvailability().equals(new Availability(\"Busy\"))) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_DELETE_VEHICLE_ERROR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.deleteVehicle(toDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_VEHICLE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!(other instanceof DeleteVehicleCommand)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return ((DeleteVehicleCommand) other).index.equals(this.index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditIncidentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALLER_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INCIDENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Edits the details of an existing incident in the IMS."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditIncidentCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-i\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the incident identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"by the index number used in the displayed incidents list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[\" + PREFIX_DISTRICT + \"DISTRICT] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"[\" + PREFIX_CALLER_NUMBER + \"CALLER NUMBER] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + PREFIX_CALLER_NUMBER + \"91302402 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + PREFIX_DESCRIPTION + \"This is a incident description.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INCIDENT \u003d \"This incident already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_EDIT_INCIDENT_SUCCESS \u003d \"Edited Incident: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_INCIDENT_NOT_EDITED \u003d \"No fields were provided, incident is not edited.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private final EditIncident editIncident;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param editIncident details to edit the incident with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentCommand(Index index, EditIncident editIncident) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(editIncident);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.editIncident \u003d new EditIncident(editIncident);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        List\u003cIncident\u003e listOfIncidents \u003d model.getFilteredIncidentList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d listOfIncidents.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INCIDENT_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident incidentToEdit \u003d listOfIncidents.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident editedIncident \u003d createEditedIncident(incidentToEdit, editIncident, model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!incidentToEdit.equals(editedIncident) \u0026\u0026 model.hasIncident(editedIncident)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_INCIDENT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (editedIncident.equals(incidentToEdit) \u0026\u0026 incidentToEdit.getDesc().equals(editedIncident.getDesc())) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_INCIDENT_NOT_EDITED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.setIncident(incidentToEdit, editedIncident);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.updateFilteredIncidentList(PREDICATE_SHOW_ALL_INCIDENTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_INCIDENT_SUCCESS, editedIncident));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Creates and returns a {@code Incident} with the details of {@code IncidentToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * edited with {@code editIncident}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private static Incident createEditedIncident(Incident incidentToEdit, EditIncident editIncident, Model model) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assert incidentToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Person operator \u003d model.getLoggedInPerson();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        District updateDistrict \u003d editIncident.getDistrict().orElse(incidentToEdit.getDistrict());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        CallerNumber updateCaller \u003d editIncident.getCaller().orElse(incidentToEdit.getCallerNumber());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        IncidentDateTime dateTime \u003d incidentToEdit.getDateTime();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Description updateDesc \u003d editIncident.getDesc().orElse(incidentToEdit.getDesc());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        IncidentId incidentId \u003d incidentToEdit.getIncidentId();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Status status \u003d incidentToEdit.getStatus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Vehicle vehicle \u003d incidentToEdit.getVehicle();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new Incident(operator, updateDistrict, dateTime, incidentId, updateCaller,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                updateDesc, status, vehicle);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!(other instanceof EditIncidentCommand)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand e \u003d (EditIncidentCommand) other;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 editIncident.equals(e.editIncident);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Stores the details to edit the incident with. Each non-empty field value will replace the corresponding"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * field value of the incident."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static class EditIncident {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private District district;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private CallerNumber caller;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private Description desc;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public EditIncident() {}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public EditIncident(EditIncident toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            setDistrict(toCopy.district);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            setCaller(toCopy.caller);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            setDesc(toCopy.desc);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return CollectionUtil.isAnyNonNull(district, caller, desc);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setDistrict(District district) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.district \u003d district;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cDistrict\u003e getDistrict() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.district);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setCaller(CallerNumber caller) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.caller \u003d caller;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cCallerNumber\u003e getCaller() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.caller);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setDesc(Description desc) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.desc \u003d desc;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cDescription\u003e getDesc() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.desc);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (!(other instanceof EditIncident)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            EditIncident e \u003d (EditIncident) other;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return getDistrict().equals(e.getDistrict())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    \u0026\u0026 getCaller().equals(e.getCaller())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    \u0026\u0026 getDesc().equals(e.getDesc());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4,
      "hellopanda128": 124,
      "-": 64,
      "tirameshu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditVehicleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VEHICLES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Edits details of existing vehicle in the IMS."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditVehicleCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-v\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the vehicle identified \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"by the index number used in the displayed vehicle list. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[\" + PREFIX_DISTRICT + \"VEHICLE DISTRICT] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[\" + PREFIX_VTYPE + \"VEHICLE TYPE] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"[\" + PREFIX_AVAIL + \"AVAILABILITY]\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + PREFIX_DISTRICT + \"2 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + PREFIX_VTYPE + \"Ambulance \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VEHICLE \u003d \"This vehicle already exists in the IMS.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_EDIT_VEHICLE_SUCCESS \u003d \"Edited Vehicle: %1$s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String MESSAGE_VEHICLE_NOT_EDITED \u003d \"No new fields were provided, vehicle is not edited.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private final EditVehicle editVehicle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditVehicleCommand(Index index, EditVehicle editVehicle) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(editVehicle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.editVehicle \u003d new EditVehicle(editVehicle);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        List\u003cVehicle\u003e listOfVehicle \u003d model.getFilteredVehicleList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d listOfVehicle.size()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_VEHICLE_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Vehicle vehicleToEdit \u003d listOfVehicle.get(index.getZeroBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Vehicle editedVehicle \u003d createEditedVehicle(vehicleToEdit, editVehicle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!editedVehicle.equals(vehicleToEdit) \u0026\u0026 model.hasVehicle(editedVehicle)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_VEHICLE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (editedVehicle.equals(vehicleToEdit) \u0026\u0026 editedVehicle.getDistrict().equals(vehicleToEdit.getDistrict())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 editedVehicle.getAvailability().equals(vehicleToEdit.getAvailability())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new CommandException(MESSAGE_VEHICLE_NOT_EDITED);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.setVehicle(vehicleToEdit, editedVehicle);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        model.updateFilteredVehicleList(PREDICATE_SHOW_ALL_VEHICLES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_VEHICLE_SUCCESS, editedVehicle));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Creates and returns a {@code Vehicle} object with the details from {@code vehicleToEdit}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Edit by {@code EditVehicle}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public Vehicle createEditedVehicle(Vehicle vehicleToEdit, EditVehicle editDetails) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assert vehicleToEdit !\u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        District vehicleDistrict \u003d editDetails.getVehicleDistrict().orElse(vehicleToEdit.getDistrict());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        VehicleType vehicleType \u003d editDetails.getVehicleType().orElse(vehicleToEdit.getVehicleType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Availability vehicleAvailability \u003d editDetails.getVehicleAvailability().orElse(vehicleToEdit.getAvailability());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        VehicleNumber vehicleNumber \u003d vehicleToEdit.getVehicleNumber();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new Vehicle(vehicleType, vehicleNumber, vehicleDistrict, vehicleAvailability);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Stores the details to edit the vehicle with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * corresponding field value of the the vehicle."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static class EditVehicle {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private VehicleType vehicleType;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private District vehicleDistrict;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        private Availability vehicleAvailability;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public EditVehicle() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public EditVehicle(EditVehicle copy) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleDistrict \u003d copy.vehicleDistrict;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleType \u003d copy.vehicleType;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleAvailability \u003d copy.vehicleAvailability;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setVehicleType(VehicleType vt) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleType \u003d vt;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cVehicleType\u003e getVehicleType() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.vehicleType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setVehicleDistrict(District d) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleDistrict \u003d d;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cDistrict\u003e getVehicleDistrict() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.vehicleDistrict);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public Optional\u003cAvailability\u003e getVehicleAvailability() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return Optional.ofNullable(this.vehicleAvailability);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setVehicleAvailability(Availability a) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            this.vehicleAvailability \u003d a;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (!(other instanceof EditVehicle)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            EditVehicle e \u003d (EditVehicle) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return e.vehicleType.equals(this.vehicleType)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    \u0026\u0026 e.vehicleDistrict.equals(this.vehicleDistrict);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FillCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALLER_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Fills a draft incident report, if specified, otherwise lists all draft incident reports ready for filling."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class FillCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"fill\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Fills incident report drafts.\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"Use \" + COMMAND_WORD + \" without parameters to list all drafts.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"Use \" + COMMAND_WORD + \" with parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + COMMAND_WORD + \" INDEX (must be a positive integer) \" + PREFIX_CALLER_NUMBER + \"CALLER NUMBER \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \" + \"to fill a given draft.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"Existing completed reports will be overwritten. Submitted reports can be edited using \u0027edit\u0027 command.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String MESSAGE_FILL_DRAFT_SUCCESS \u003d \"Incident report filled: %1$s\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String MESSAGE_NO_DRAFTS_TO_FILL \u003d \"No drafts present in the system\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String MESSAGE_INCIDENT_HAS_BEEN_SUBMITTED \u003d \"This incident cannot be filled as it has been\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \" submitted. Please use the \u0027edit\u0027 command instead.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final CallerNumber callerNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Creates a FillCommand to fill a draft {@code Incident}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public FillCommand(Index index, CallerNumber callerNumber, Description description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireAllNonNull(index, callerNumber, description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.callerNumber \u003d callerNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!model.ifAnyIncidentsSatisfyPredicate(PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_DRAFTS_TO_FILL);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // there are drafts to be filled. Get the last shown list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        List\u003cIncident\u003e lastShownList \u003d model.getFilteredIncidentList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // throw exception if index specified is out of bounds"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INCIDENT_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident toFill \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new CommandResult(processReportFilling(model, toFill));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Processes filling of the given incident report. The report is filled if it is a draft and not filled if it has"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * already been submitted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param model current model to be modified by command"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param toFill incident report to be filled"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the string representing the command result"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String processReportFilling(Model model, Incident toFill) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // if incident has already been submitted, do not allow update"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (toFill.isSubmitted()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return MESSAGE_INCIDENT_HAS_BEEN_SUBMITTED;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // update incident as it is a draft"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident updatedIncident \u003d fillReport(toFill, callerNumber, description);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // old incident is removed from the list, and replaced by the updated incident"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // updated incident is appended to front of the list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        model.removeIncident(toFill);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        model.addIncident(updatedIncident);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return String.format(MESSAGE_FILL_DRAFT_SUCCESS, toFill);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns a new updated incident report by filling callerNumber and description fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Triggered by \u0027fill\u0027 command."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param toUpdate the incident to be filled."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param callerNumber phone number of the caller reporting the incident."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param description description of this incident."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return updated incident report."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Incident fillReport(Incident toUpdate, CallerNumber callerNumber, Description description) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident updatedIncident \u003d new Incident(toUpdate.getOperator(), toUpdate.getDistrict(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                toUpdate.getIncidentDateTime(), toUpdate.getIncidentId(), callerNumber, description,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.COMPLETE_DRAFT, toUpdate.getVehicle()); // set status as complete"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return updatedIncident;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                || (other instanceof FillCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u0026\u0026 callerNumber.equals(((FillCommand) other).callerNumber)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u0026\u0026 description.equals(((FillCommand) other).description));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 117,
      "tirameshu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindIncidentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_OPERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_SELF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.NameKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Finds and lists all incidents in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindIncidentsCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-i\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches all incidents for which IDs match exactly \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \"or description contains the first specified keyword under the relevant parameter and displays them as \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \"a list \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \"with index numbers.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_ID + \"\u003cID\u003e OR \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_OPERATOR + \"\u003cOPERATOR\u003e OR \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_DESCRIPTION + \"\u003cKEYWORD [MORE_KEYWORDS]...\u003e OR \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_SELF + \"\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_OPERATOR + \"alex \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_DESCRIPTION + \"district \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            + SEARCH_PREFIX_SELF;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Predicate\u003cIncident\u003e predicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private boolean isSelfSearch \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private List\u003cPredicate\u003e predicateArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindIncidentsCommand(List\u003cPredicate\u003e predicateArr) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.predicateArr \u003d predicateArr;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        combinePredicates();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindIncidentsCommand(List\u003cPredicate\u003e predicateArr, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.predicateArr \u003d predicateArr;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        combinePredicates();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (prefix \u003d\u003d SEARCH_PREFIX_SELF) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            this.isSelfSearch \u003d true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Combines predicates if there are multiple predicates"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private void combinePredicates() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (predicateArr.size() !\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            for (int i \u003d 0; i \u003c predicateArr.size() - 1; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                this.predicate \u003d predicateArr.get(i).and(predicateArr.get(i + 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            this.predicate \u003d predicateArr.get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (isSelfSearch) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            // TODO: quick fix to allow searching using first name. when full name is allowed in search, change this"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Name operatorName \u003d new Name(model.getLoggedInPerson().getName().fullName.split(\" \", 2)[0]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (predicate !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                predicate \u003d predicate.and(new NameKeywordsPredicate(operatorName));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                predicate \u003d new NameKeywordsPredicate(operatorName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        model.updateFilteredIncidentList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // prints grammatically correct messages to user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (model.getFilteredIncidentList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_NO_INCIDENTS_FOUND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (model.getFilteredIncidentList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SINGLE_INCIDENT_LISTED);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    String.format(Messages.MESSAGE_INCIDENTS_LISTED_OVERVIEW, model.getFilteredIncidentList().size()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof FindIncidentsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindIncidentsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindPersonsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Finds and lists all persons in the incident manager whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class FindPersonsCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-a\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all accounts whose names or usernames contain \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"any of the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob agent01\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public FindPersonsCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_NO_PERSON_FOUND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (model.getFilteredPersonList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SINGLE_PERSON_LISTED);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof FindPersonsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPersonsCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 9,
      "Yoshi275": 6,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindVehiclesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_VNUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_VTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.DistrictKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VNumKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VTypeKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Finds and lists all incidents in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindVehiclesCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-v\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Searches by district now."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Searches for vehicles by district \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"in the same district as entered by user. \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + SEARCH_PREFIX_DISTRICT + \"[district numbers separated by whitespace] \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + SEARCH_PREFIX_VNUM + \"vehicle number \\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + SEARCH_PREFIX_VTYPE + \"vehicle type\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final Predicate\u003cVehicle\u003e predicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Used only when simply listing nearby vehicles."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param districtKeywordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindVehiclesCommand(DistrictKeywordsPredicate districtKeywordsPredicate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.predicate \u003d districtKeywordsPredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Used only when simply listing nearby vehicles."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vTypeKeywordsPredicate"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public FindVehiclesCommand(VTypeKeywordsPredicate vTypeKeywordsPredicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.predicate \u003d vTypeKeywordsPredicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Used only when simply listing nearby vehicles."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vNumKeywordsPredicate"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public FindVehiclesCommand(VNumKeywordsPredicate vNumKeywordsPredicate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.predicate \u003d vNumKeywordsPredicate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Only called for normal listing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        model.updateFilteredVehicleList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (model.getFilteredVehicleList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_NO_VEHICLES_FOUND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else if (model.getFilteredVehicleList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new CommandResult(Messages.MESSAGE_SINGLE_VEHICLE_LISTED);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    String.format(Messages.MESSAGE_VEHICLES_LISTED_OVERVIEW, model.getFilteredVehicleList().size()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof FindVehiclesCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 predicate \u003d\u003d ((FindVehiclesCommand) other).predicate); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 10,
      "tirameshu": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListIncidentsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INCIDENTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Lists incidents in the address book to the user according to specified predicate."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class ListIncidentsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-i\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final Predicate\u003cIncident\u003e predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ListIncidentsCommand(Predicate\u003cIncident\u003e predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // get the filtered list before updating it."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        FilteredList\u003cIncident\u003e filteredIncidentsList \u003d model.getFilteredIncidentList().filtered(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String resultMessage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (this.predicate.equals(PREDICATE_SHOW_ALL_INCIDENTS)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            resultMessage \u003d handleAllIncidents(model, filteredIncidentsList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else if (this.predicate.equals(PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            resultMessage \u003d handleDraftIncidents(model, filteredIncidentsList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else if (this.predicate.equals(PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            resultMessage \u003d handleCompleteIncidents(model, filteredIncidentsList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            resultMessage \u003d Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new CommandResult(resultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handles the case for listing all incidents."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param model current model operated on by command"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param incidents list of incidents to update"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing command result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String handleAllIncidents(Model model, FilteredList\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        model.updateFilteredIncidentList(predicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (incidents.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_NO_INCIDENTS_LISTED;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_ALL_INCIDENTS_LISTED;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handles the case for listing all draft incidents."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param model current model operated on by command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param incidents list of incidents to update"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing command result"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String handleDraftIncidents(Model model, FilteredList\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        model.updateFilteredIncidentList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (incidents.isEmpty()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_NO_DRAFTS_LISTED;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_ALL_DRAFT_INCIDENTS_LISTED;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Handles the case for listing all complete incidents."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param model current model operated on by command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param incidents list of incidents to update"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing command result"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String handleCompleteIncidents(Model model, FilteredList\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        model.updateFilteredIncidentList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (incidents.isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_NO_INCIDENT_TO_SUBMIT;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return Messages.MESSAGE_ALL_COMPLETE_INCIDENTS_LISTED;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 62,
      "madanalogy": 1,
      "Yoshi275": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListPersonsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Lists all persons in the incident manager to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class ListPersonsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all matching accounts!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Lists all accounts or those whose tags match \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Parameters: [KEYWORD] [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" admin\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final TagContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ListPersonsCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ListPersonsCommand(TagContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.updateFilteredPersonList(Objects.requireNonNullElse(predicate, PREDICATE_SHOW_ALL_PERSONS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof ListPersonsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 ((predicate \u003d\u003d null \u0026\u0026 ((ListPersonsCommand) other).predicate \u003d\u003d null) // if predicate is null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (predicate !\u003d null \u0026\u0026 predicate.equals(((ListPersonsCommand) other).predicate))));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 43,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListVehiclesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Lists all incidents in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class ListVehiclesCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-v\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all vehicles\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final Predicate\u003cVehicle\u003e predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public ListVehiclesCommand(Predicate\u003cVehicle\u003e predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        model.updateFilteredVehicleList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof ListVehiclesCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 ((predicate \u003d\u003d null \u0026\u0026 ((ListVehiclesCommand) other).predicate \u003d\u003d null)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (predicate !\u003d null \u0026\u0026 ((ListVehiclesCommand) other).predicate.equals(predicate))));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "tirameshu": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.LoginCredentialsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Logs a user into the incident management system with a valid username and password."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Log into the incident management system \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"with a registered username and password.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Parameters: \" + PREFIX_USERNAME + \"USERNAME \" + PREFIX_PASSWORD + \"PASSWORD \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" u/Agent01 w/password\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Login Successful!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String MESSAGE_FAILURE \u003d \"You have entered an invalid username or password.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String MESSAGE_MISUSE \u003d \"You are already logged in.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final LoginCredentialsPredicate predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public LoginCommand(LoginCredentialsPredicate predicate) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (model.isLoggedIn()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_MISUSE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (model.getFilteredPersonList().size() !\u003d 1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(model.getFilteredPersonList().get(0)); // Sets session to person remaining in list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true, false, false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 predicate.equals(((LoginCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LogoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Logs a user out of the incident management system."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class LogoutCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"logout\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Successfully logged out!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"You are not logged in!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!model.isLoggedIn()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, true, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Generates a new incident report."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class NewCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"new\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Drafts an incident report to the incident management \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"system. \\n\" + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            + PREFIX_DISTRICT + \"DISTRICT NUMBER \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + PREFIX_AUTO + \"[y/n]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New incident drafted!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_REPORT \u003d \"This draft already exists in the incident \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            + \"management system\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final District district;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final boolean isAuto;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    // 0 for auto, -1 for prompt needed, 1 ... for allocation, need check oob"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final int indexOfV;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Incident draft;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Creates a NewCommand to generate a new {@code Incident}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * If isAuto is false, it means the user did not key in index for vehicle to dispatch."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public NewCommand(District district, boolean isAuto, int indexOfV) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(district);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.district \u003d district;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.isAuto \u003d isAuto;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.indexOfV \u003d indexOfV;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Assigns vehicle directly to draft if isAuto is true."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Else, lists nearby vehicles as per normal vehicle search,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * and expects user to have also keyed in index of vehicle."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param draft"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param isAuto"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void dispatchVehicle(Incident draft, boolean isAuto, Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        VehicleAssignmentCommand vehicleAssignmentCommand \u003d new VehicleAssignmentCommand(draft, isAuto, indexOfV);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleAssignmentCommand.execute(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Called regardless."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Person operator \u003d model.getLoggedInPerson();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Incident draft \u003d new Incident(operator, district);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.draft \u003d draft; // draft created here because need operator data from model"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // unnecessary because incidents are compared based on incidentId, which depends on"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // incident datetime, which cannot be the same."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (model.hasIncident(draft)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_REPORT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        dispatchVehicle(draft, isAuto, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        model.addIncident(draft);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof NewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 district.equals(((NewCommand) other).district))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 draft.equals(((NewCommand) other).draft);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 2,
      "tirameshu": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SubmitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class SubmitCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"submit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Submits completed incident reports.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"Use \" + COMMAND_WORD + \" without parameters to list all completed reports.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \"Use \" + COMMAND_WORD + \" with parameters:\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + COMMAND_WORD + \" INDEX (positive integer) to submit the specified draft.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_SUBMIT_SUCCESS \u003d \"New incident report submitted: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_NO_COMPLETED_REPORTS_TO_SUBMIT \u003d \"No reports ready for submission\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_DRAFT_IS_INCOMPLETE \u003d \"This draft is incomplete and is not ready for submission\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            + \" Please use the \u0027Fill\u0027 command to first complete the report\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_REPORT_HAS_BEEN_SUBMITTED \u003d \"This report has already been submitted\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Constructor for submit command with parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param index {@code Index} of completed report to submit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public SubmitCommand(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.targetIndex \u003d index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!model.ifAnyIncidentsSatisfyPredicate(PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new CommandResult(MESSAGE_NO_COMPLETED_REPORTS_TO_SUBMIT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // there are drafts to be submitted. Get the last shown list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        List\u003cIncident\u003e lastShownList \u003d model.getFilteredIncidentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // throw exception if index specified is out of bounds"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_INCIDENT_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // retrieve incident and try to submit it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident toSubmit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new CommandResult(processReportSubmission(model, toSubmit));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Processes submission of given incident report. The incident report is submitted if it is a complete draft and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * not submitted if it is an incomplete draft or if it has already been submitted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param model current model to be modified by command"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param toSubmit incident report to be submitted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return the string representing the command result"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String processReportSubmission(Model model, Incident toSubmit) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // if incident is not a complete draft, do not allow submission"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (toSubmit.isIncompleteDraft()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return MESSAGE_DRAFT_IS_INCOMPLETE;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } else if (toSubmit.isSubmitted()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return MESSAGE_REPORT_HAS_BEEN_SUBMITTED;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // submit incident as it is a complete draft"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident updatedIncident \u003d submitReport(toSubmit);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // old incident is removed from the list, and replaced by the updated incident"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // updated incident is appended to front of the list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        model.removeIncident(toSubmit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        model.addIncident(updatedIncident);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return String.format(MESSAGE_SUBMIT_SUCCESS, toSubmit);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Submits specified incident by returning a new incident which is a copy of the old incident with \u0027Submitted\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * status."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Triggered by \u0027submit\u0027 command."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param toSubmit the incident report to be submitted."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return updated incident report."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Incident submitReport(Incident toSubmit) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident updatedIncident \u003d new Incident(toSubmit.getOperator(), toSubmit.getDistrict(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                toSubmit.getIncidentDateTime(), toSubmit.getIncidentId(), toSubmit.getCallerNumber(),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                toSubmit.getDesc(), Incident.Status.SUBMITTED_REPORT, toSubmit.getVehicle()); // set status to submitted"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return updatedIncident;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                || (other instanceof SubmitCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SubmitCommand) other).targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 83,
      "tirameshu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Swaps the GUI interface for the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class SwapCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"swap\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Interface swapped!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"You must login to view incidents and vehicles!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!model.isLoggedIn()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, false, false, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Updates the details of an existing person in the incident manager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String UPDATE_PARAMS \u003d \"Parameters: INDEX (if Admin) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_USERNAME + \"USERNAME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_PASSWORD + \"PASSWORD] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates your account with new values.\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Only admins can update the details of the person identified \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\" + UPDATE_PARAMS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_UPDATE_PERSON_SUCCESS \u003d \"Updated Account: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to update must be provided.\\n\" + UPDATE_PARAMS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This account already exists in the incident manager.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_ADMIN_REVOKE \u003d \"You cannot remove yourself as an admin.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Please include t/admin in your update.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final UpdatePersonDescriptor updatePersonDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param index of the person in the filtered person list to update"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param updatePersonDescriptor details to update the person with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdateCommand(Index index, UpdatePersonDescriptor updatePersonDescriptor) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        //requireNonNull(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(updatePersonDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.updatePersonDescriptor \u003d new UpdatePersonDescriptor(updatePersonDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Access Control check for tag addition and index update"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (Person.isNotAdmin(model.getLoggedInPerson())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 (index !\u003d null || updatePersonDescriptor.getTags().isPresent())) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ACCESS_ADMIN);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Different target person depending on presence of index"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person personToUpdate;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            personToUpdate \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            personToUpdate \u003d model.getLoggedInPerson();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person updatedPerson \u003d createUpdatedPerson(personToUpdate, updatePersonDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!personToUpdate.isSamePerson(updatedPerson) \u0026\u0026 model.hasPerson(updatedPerson)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Admins cannot remove themselves as admins, updates status bar if username changed"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        boolean changeStatus \u003d false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (personToUpdate.equals(model.getLoggedInPerson())) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (!Person.isNotAdmin(model.getLoggedInPerson()) \u0026\u0026 Person.isNotAdmin(updatedPerson)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                throw new CommandException(MESSAGE_ADMIN_REVOKE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            changeStatus \u003d updatePersonDescriptor.getUsername().isPresent();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            model.setSession(updatedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setPerson(personToUpdate, updatedPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_PERSON_SUCCESS, updatedPerson),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                changeStatus, false, changeStatus);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToUpdate}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * updated with {@code updatePersonDescriptor}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static Person createUpdatedPerson(Person personToUpdate, UpdatePersonDescriptor updatePersonDescriptor) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assert personToUpdate !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Name updatedName \u003d updatePersonDescriptor.getName().orElse(personToUpdate.getName());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Phone updatedPhone \u003d updatePersonDescriptor.getPhone().orElse(personToUpdate.getPhone());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Email updatedEmail \u003d updatePersonDescriptor.getEmail().orElse(personToUpdate.getEmail());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Username updatedUsername \u003d updatePersonDescriptor.getUsername().orElse(personToUpdate.getUsername());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Password updatedPassword \u003d updatePersonDescriptor.getPassword().orElse(personToUpdate.getPassword());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d updatePersonDescriptor.getTags().orElse(personToUpdate.getTags());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags, updatedUsername, updatedPassword);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!(other instanceof UpdateCommand)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 updatePersonDescriptor.equals(e.updatePersonDescriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Stores the details to update the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static class UpdatePersonDescriptor {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Username username;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Password password;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public UpdatePersonDescriptor() {}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public UpdatePersonDescriptor(UpdatePersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setUsername(toCopy.username);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setPassword(toCopy.password);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * Returns true if at least one field is updated."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public boolean isAnyFieldUpdated() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, username, password, tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setUsername(Username username) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.username \u003d username;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cUsername\u003e getUsername() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.ofNullable(username);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setPassword(Password password) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.password \u003d password;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cPassword\u003e getPassword() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.ofNullable(password);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (!(other instanceof UpdatePersonDescriptor)) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            UpdatePersonDescriptor e \u003d (UpdatePersonDescriptor) other;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    \u0026\u0026 getUsername().equals(e.getUsername())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    \u0026\u0026 getPassword().equals(e.getPassword())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 270
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/VehicleAssignmentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_SINGLE_VEHICLE_LISTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VEHICLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VEHICLE_ASSIGNMENT_PROMPT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VEHICLE_BUSY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VEHICLE_OOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.AvailableInDistrictPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Assigns vehicles to newly created incidents."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Cannot be changed once assigned."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * TODO: consider vtype for auto assign."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VehicleAssignmentCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final Incident draft;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final boolean isAuto;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    // 0 for auto, +ve int for manual, -1 for prompting required."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    // based on list filtered w availability predicate."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final int indexOfV;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final Predicate\u003cVehicle\u003e predicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleAssignmentCommand(Incident draft, boolean isAuto, int indexOfV) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.draft \u003d draft;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.isAuto \u003d isAuto;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.indexOfV \u003d indexOfV;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.predicate \u003d new AvailableInDistrictPredicate(draft.getDistrict());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Automatic assignment of vehicle to newly created incident reports."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Assumes instance of no available vehicle is alr taken care of."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Assumes predicate of available in district works."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param nearbyVehicles"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private void autoAssign(ObservableList\u003cVehicle\u003e nearbyVehicles) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (!nearbyVehicles.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            draft.addVehicle(nearbyVehicles.get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new CommandException(MESSAGE_VEHICLE_BUSY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Manual assignment of vehicle to newly created incident reports."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param  nearbyVehicles"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param indexOfV"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private void manualAssign(ObservableList\u003cVehicle\u003e nearbyVehicles, int indexOfV) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (indexOfV \u003e 0) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            if (indexOfV \u003c\u003d nearbyVehicles.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Vehicle vehicle \u003d nearbyVehicles.get(indexOfV - 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                if (vehicle.isAvailable()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    draft.addVehicle(vehicle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    throw new CommandException(MESSAGE_VEHICLE_BUSY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                throw new CommandException(MESSAGE_VEHICLE_OOB);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new CommandException(MESSAGE_VEHICLE_ASSIGNMENT_PROMPT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Command result will not actually be printed, is intermediate return value."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        model.updateFilteredVehicleList(predicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        ObservableList\u003cVehicle\u003e nearbyVehicles \u003d model.getFilteredVehicleList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (nearbyVehicles.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_AVAILABLE_VEHICLE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // should only reach here if there is at least 1 nearby vehicle."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (isAuto) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            autoAssign(nearbyVehicles);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            manualAssign(nearbyVehicles, indexOfV);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (nearbyVehicles.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new CommandResult(MESSAGE_SINGLE_VEHICLE_LISTED);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_VEHICLES_LISTED_OVERVIEW, nearbyVehicles.size()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof VehicleAssignmentCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 predicate \u003d\u003d ((VehicleAssignmentCommand) other).predicate); // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                PREFIX_USERNAME, PREFIX_PASSWORD, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList, username, password);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 10,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddVehicleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VNUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.AddVehicleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Parses input arguments and returns a new AddVehicleCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class AddVehicleCommandParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses the given arguments {@code args} and returns a new AddVehicleCommand for execution"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @throws ParseException if user input is not in expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public AddVehicleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DISTRICT, PREFIX_VTYPE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                PREFIX_VNUM, PREFIX_AVAIL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_DISTRICT, PREFIX_VNUM, PREFIX_VTYPE, PREFIX_AVAIL)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                || !argMultiMap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddVehicleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        VehicleType type \u003d ParserUtil.parseVType(argMultiMap.getValue(PREFIX_VTYPE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        VehicleNumber number \u003d ParserUtil.parseVNum(argMultiMap.getValue(PREFIX_VNUM).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        District district \u003d ParserUtil.parseDistrict(argMultiMap.getValue(PREFIX_DISTRICT).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Availability availability \u003d ParserUtil.parseAvailability(argMultiMap.getValue(PREFIX_AVAIL).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Vehicle vehicle \u003d new Vehicle(type, number, district, availability);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new AddVehicleCommand(vehicle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 52,
      "tirameshu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final Prefix PREFIX_CALLER_NUMBER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /* For vehicle use */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix PREFIX_VEHICLE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix PREFIX_DISTRICT \u003d new Prefix(\"dist/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final Prefix PREFIX_VTYPE \u003d new Prefix(\"vt/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final Prefix PREFIX_VNUM \u003d new Prefix(\"vn/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final Prefix PREFIX_AVAIL \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /* For all auto-fill prompts */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix PREFIX_AUTO \u003d new Prefix(\"auto/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /* For search flags */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_OPERATOR \u003d new Prefix(\"op/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_DISTRICT \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_VTYPE \u003d new Prefix(\"vtype/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_VNUM \u003d new Prefix(\"vnum/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Prefix SEARCH_PREFIX_SELF \u003d new Prefix(\"self\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 2,
      "hellopanda128": 4,
      "madanalogy": 2,
      "Yoshi275": 7,
      "-": 14,
      "tirameshu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteVehicleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.DeleteVehicleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Parses input arguments and returns a DeleteVehicleCommand for execution."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class DeleteVehicleCommandParser implements Parser\u003cDeleteVehicleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteVehicleCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * and returns a DeleteVehicleCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public DeleteVehicleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return new DeleteVehicleCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteVehicleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditIncidentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALLER_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand.EditIncident;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Parses input arguments and creates a new EditIncidentCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditIncidentCommandParser implements Parser\u003cEditIncidentCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditIncidentCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * and returns an EditIncidentCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CALLER_NUMBER, PREFIX_DISTRICT, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    EditIncidentCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editIncident \u003d new EditIncident();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CALLER_NUMBER).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            editIncident.setCaller(ParserUtil.parseCallerNumber(argMultimap.getValue(PREFIX_CALLER_NUMBER).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DISTRICT).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            editIncident.setDistrict(ParserUtil.parseDistrict(argMultimap.getValue(PREFIX_DISTRICT).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            editIncident.setDesc(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new EditIncidentCommand(index, editIncident);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 52,
      "tirameshu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditVehicleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AVAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VTYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditVehicleCommand.EditVehicle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditVehicleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Parses input arguments and creates a new EditVehicleCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditVehicleCommandParser implements Parser\u003cEditVehicleCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of EditVehicleCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * and returns a EditVehicleCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * throws {@code ParseException} if the user does not conform to expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditVehicleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DISTRICT, PREFIX_VTYPE, PREFIX_AVAIL);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultiMap.getPreamble());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(pe.getErrorMessage() + \"\\n\" + String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                    EditVehicleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditVehicle editVehicle \u003d new EditVehicle();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_DISTRICT).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            editVehicle.setVehicleDistrict(ParserUtil.parseDistrict(argMultiMap.getValue(PREFIX_DISTRICT).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_VTYPE).isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            editVehicle.setVehicleType(ParserUtil.parseVType(argMultiMap.getValue(PREFIX_VTYPE).get()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (argMultiMap.getValue(PREFIX_AVAIL).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            editVehicle.setVehicleAvailability(ParserUtil.parseAvailability(argMultiMap.getValue(PREFIX_AVAIL).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new EditVehicleCommand(index, editVehicle);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 52,
      "tirameshu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FillCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALLER_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.commands.FillCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Parses input arguments and creates a new FillCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class FillCommandParser implements Parser\u003cFillCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FillCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * and returns a FillCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public FillCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CALLER_NUMBER, PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CALLER_NUMBER, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FillCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FillCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        CallerNumber callerNumber \u003d ParserUtil.parseCallerNumber(argMultimap.getValue(PREFIX_CALLER_NUMBER).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new FillCommand(index, callerNumber, description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindIncidentsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_OPERATOR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_SELF;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.FindIncidentsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.DescriptionKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IdKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.NameKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindIncidentsCommandParser implements Parser\u003cFindIncidentsCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPersonsCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * and returns a FindPersonsCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindIncidentsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        List\u003cPredicate\u003e predicateArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, SEARCH_PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                SEARCH_PREFIX_ID, SEARCH_PREFIX_OPERATOR, SEARCH_PREFIX_SELF);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (!(arePrefixesPresent(argMultimap, SEARCH_PREFIX_DESCRIPTION))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 !(arePrefixesPresent(argMultimap, SEARCH_PREFIX_OPERATOR))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 !(arePrefixesPresent(argMultimap, SEARCH_PREFIX_ID))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 !(arePrefixesPresent(argMultimap, SEARCH_PREFIX_SELF))) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    FindIncidentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (arePrefixesPresent(argMultimap, SEARCH_PREFIX_DESCRIPTION)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Description descriptionKeywords \u003d ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    .getValue(SEARCH_PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            predicateArr.add(new DescriptionKeywordsPredicate(descriptionKeywords));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (arePrefixesPresent(argMultimap, SEARCH_PREFIX_ID)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            IncidentId idKeywords \u003d ParserUtil.parseId(argMultimap.getValue(SEARCH_PREFIX_ID).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            predicateArr.add(new IdKeywordsPredicate(idKeywords));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (arePrefixesPresent(argMultimap, SEARCH_PREFIX_OPERATOR)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Name nameKeywords \u003d ParserUtil.parseName(argMultimap.getValue(SEARCH_PREFIX_OPERATOR).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            predicateArr.add(new NameKeywordsPredicate(nameKeywords));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (arePrefixesPresent(argMultimap, SEARCH_PREFIX_SELF)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new FindIncidentsCommand(predicateArr, SEARCH_PREFIX_SELF);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return new FindIncidentsCommand(predicateArr);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "Yoshi275": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindPersonsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.FindPersonsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Parses input arguments and creates a new FindPersonsCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class FindPersonsCommandParser implements Parser\u003cFindPersonsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPersonsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * and returns a FindPersonsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public FindPersonsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new FindPersonsCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 8,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindVehiclesCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_VNUM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_VTYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.FindVehiclesCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.DistrictKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VNumKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VTypeKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindVehiclesCommandParser implements Parser\u003cFindVehiclesCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindVehiclesCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * and returns a FindVehiclesCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public FindVehiclesCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        ArgumentMultimap argDistrictMap \u003d ArgumentTokenizer.tokenize(args, SEARCH_PREFIX_DISTRICT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        ArgumentMultimap argVTypeMap \u003d ArgumentTokenizer.tokenize(args, SEARCH_PREFIX_VTYPE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        ArgumentMultimap argVNumMap \u003d ArgumentTokenizer.tokenize(args, SEARCH_PREFIX_VNUM);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (arePrefixesPresent(argDistrictMap, SEARCH_PREFIX_DISTRICT)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            List\u003cDistrict\u003e districtKeywords \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    ParserUtil.parseDistricts(argDistrictMap.getValue(SEARCH_PREFIX_DISTRICT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return new FindVehiclesCommand(new DistrictKeywordsPredicate(districtKeywords));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else if (arePrefixesPresent(argVTypeMap, SEARCH_PREFIX_VTYPE)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            VehicleType vTypeKeywords \u003d ParserUtil.parseVType(argVTypeMap.getValue(SEARCH_PREFIX_VTYPE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new FindVehiclesCommand(new VTypeKeywordsPredicate(vTypeKeywords));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else if (arePrefixesPresent(argVNumMap, SEARCH_PREFIX_VNUM)) { // cos don\u0027t need exact match"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            String vNumKeywords \u003d argVNumMap.getValue(SEARCH_PREFIX_VNUM).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            assert(vNumKeywords !\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new FindVehiclesCommand(new VNumKeywordsPredicate(vNumKeywords));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    FindVehiclesCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 7,
      "tirameshu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/IncidentManagerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INCIDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_VEHICLES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.AddVehicleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.DeleteVehicleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditVehicleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.commands.FillCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.FindIncidentsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.FindPersonsCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.FindVehiclesCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.ListIncidentsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.ListPersonsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.ListVehiclesCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.LogoutCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.SubmitCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.SwapCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class IncidentManagerParser {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String GUI_SWAP_MESSAGE \u003d \"Please swap the interface to access the command from this suite.\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"See help page for more information.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String ACCESS_CONTROL_MESSAGE \u003d \"Only Register, Login, Exit, and Help commands are available.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"Please login to access other commands. See help page for more information.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private boolean isPersonView;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private boolean isLoggedIn;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManagerParser(boolean isPersonView, boolean isLoggedIn) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.isPersonView \u003d isPersonView;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.isLoggedIn \u003d isLoggedIn;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //@@author madanalogy"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Checks if the user is logged in to give access."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param commandWord String representing the command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if command not accessible."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void checkAccess(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Guard Statement for available commands prior to login."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!isLoggedIn \u0026\u0026 !(commandWord.equals(LoginCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(ExitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(HelpCommand.COMMAND_WORD))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(ACCESS_CONTROL_MESSAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Checks if the correct interface is showing for the given command."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param commandWord String representing the command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if in the wrong interface for command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void checkInterface(String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Guard Statement for command suite corresponding to interface swaps."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!isPersonView \u0026\u0026 (commandWord.equals(AddCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(UpdateCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(DeleteCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(ListPersonsCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(FindPersonsCommand.COMMAND_WORD))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(GUI_SWAP_MESSAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else if (isPersonView \u0026\u0026 (commandWord.equals(AddVehicleCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(EditIncidentCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(EditVehicleCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(DeleteVehicleCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(FindIncidentsCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(FindVehiclesCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(ListIncidentsCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(ListVehiclesCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(NewCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(SubmitCommand.COMMAND_WORD)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || commandWord.equals(FillCommand.COMMAND_WORD))) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(GUI_SWAP_MESSAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        checkAccess(commandWord);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        checkInterface(commandWord);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case AddVehicleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new AddVehicleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case EditIncidentCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new EditIncidentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case EditVehicleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new EditVehicleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case DeleteVehicleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new DeleteVehicleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        /* case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new ClearCommand(); */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case FindPersonsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new FindPersonsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case FindIncidentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new FindIncidentsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case FindVehiclesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new FindVehiclesCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case ListPersonsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new ListPersonsCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new ListPersonsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case ListIncidentsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new ListIncidentsCommand(PREDICATE_SHOW_ALL_INCIDENTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case ListVehiclesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new ListVehiclesCommand(PREDICATE_SHOW_ALL_VEHICLES);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case LogoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new LogoutCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case SwapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new SwapCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new UpdateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case SubmitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new ListIncidentsCommand(PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new SubmitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case FillCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (arguments.isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new ListIncidentsCommand(PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                return new FillCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        case NewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new NewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isPersonView() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return isPersonView;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setPersonView(boolean personView) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        isPersonView \u003d personView;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setLoggedIn(boolean loggedIn) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        isLoggedIn \u003d loggedIn;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4,
      "hellopanda128": 4,
      "madanalogy": 181,
      "Yoshi275": 4,
      "-": 24,
      "tirameshu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListPersonsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.ListPersonsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Parses input arguments and creates a new FindPersonsCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class ListPersonsCommandParser implements Parser\u003cListPersonsCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListPersonsCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * and returns a ListPersonsCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ListPersonsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListPersonsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new ListPersonsCommand(new TagContainsKeywordsPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.LoginCredentialsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Parses input arguments and creates a new FindPersonsCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * and returns a LoginCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public LoginCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME, PREFIX_PASSWORD)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Password password \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new LoginCommand(new LoginCredentialsPredicate(username, password));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NewCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NOT_ONE_DISTRICT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AUTO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VEHICLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.commands.NewCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Parses input arguments and creates a new FillCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class NewCommandParser implements Parser\u003cNewCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NewCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * and returns a NewCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * or does not only have 1 input for district."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public NewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DISTRICT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                PREFIX_AUTO, PREFIX_VEHICLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // if auto/y then dont need v/"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DISTRICT, PREFIX_AUTO)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NewCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        List\u003cDistrict\u003e districts \u003d ParserUtil.parseDistricts(argMultimap.getValue(PREFIX_DISTRICT).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (districts.size() !\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_ONE_DISTRICT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        boolean isAuto \u003d ParserUtil.parseAuto(argMultimap.getValue(PREFIX_AUTO).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (isAuto) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new NewCommand(districts.get(0), true, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            // I\u0027m guessing it needs all prefixes tokenised"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            ArgumentMultimap vArgMap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DISTRICT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    PREFIX_AUTO, PREFIX_VEHICLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            if (!arePrefixesPresent(vArgMap, PREFIX_VEHICLE)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                return new NewCommand(districts.get(0), false, -1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            String v \u003d vArgMap.getValue(PREFIX_VEHICLE).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            int indexOfV \u003d Integer.valueOf(v);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return new NewCommand(districts.get(0), false, indexOfV);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 2,
      "tirameshu": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_VEHICLE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_SUCH_VTYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses a {@code String username} into a {@code Username}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the given {@code username} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!Username.isValidUsername(trimmedUsername)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the given {@code password} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Password(trimmedPassword);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses a {@code String caller} into a {@code CallerNumber}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * throws ParseException if the given {@code caller} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static CallerNumber parseCallerNumber(String caller) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(caller);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String trimmedCaller \u003d caller.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!CallerNumber.isValidCaller(trimmedCaller)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(CallerNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new CallerNumber(trimmedCaller);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Used only when creating incidents, as this is the only situation where only"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * 1 input is allowed for district input."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param district"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static District parseDistrict(String district) throws ParseException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(district);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String trimmedDistrict \u003d district.trim();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (trimmedDistrict.contains(\"/\")) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_IRRELEVANT_PREFIXES);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            int dist \u003d Integer.parseInt(trimmedDistrict);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (!District.isValidDistrict(dist)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                throw new ParseException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return new District(dist);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses a {@code String district} into a list of {@code Districts}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * User input should be a number."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * throws ParseException if the given {@code district} is invalid."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static List\u003cDistrict\u003e parseDistricts(String district) throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(district);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (district.contains(\"/\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_IRRELEVANT_PREFIXES);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            List\u003cString\u003e splittedD \u003d Arrays.asList(district.trim().split(\"\\\\s\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            List\u003cDistrict\u003e districts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            for (String d: splittedD) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                int dist \u003d Integer.parseInt(d);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                if (!District.isValidDistrict(dist)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    throw new ParseException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                districts.add(new District(dist));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return districts;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses a {@code String vType} into a {@code VehicleType}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vType"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return VehicleType"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException when vType entered is not in static list in VehicleType class."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static VehicleType parseVType(String vType) throws ParseException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(vType);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String parsedVType \u003d vType.trim().toLowerCase();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (parsedVType.contains(\"/\")) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_IRRELEVANT_PREFIXES);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String[] vehicleTypes \u003d VehicleType.VEHICLE_TYPES;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        for (String type: vehicleTypes) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            if (parsedVType.equals(type.toLowerCase())) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                return new VehicleType(type);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        throw new ParseException(MESSAGE_NO_SUCH_VTYPE);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses a {@code String vNum} into a {@code VehicleNumber}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vNum"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return VehicleNumber"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException if VNum does not follow the format ABC1234D"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static VehicleNumber parseVNum(String vNum) throws ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(vNum);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String parsedVNum \u003d vNum.trim().toUpperCase();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (parsedVNum.contains(\"/\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_IRRELEVANT_PREFIXES);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else if (!VehicleNumber.isValidVehicleNumber(parsedVNum)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_VEHICLE_NUMBER);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new VehicleNumber(parsedVNum);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses a {@code String avail} into a {@code Availability}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Input will be checked for validity."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static Availability parseAvailability(String avail) throws ParseException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(avail);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String trimmedAvail \u003d avail.trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!trimmedAvail.equalsIgnoreCase(\"available\") \u0026\u0026 !trimmedAvail.equalsIgnoreCase(\"busy\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new ParseException(Availability.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return new Availability(trimmedAvail);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Will not be checked for validity as Description can vary widely"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * and does not have a fixed input format."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static Description parseDescription(String description) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Parses a {@code String dateTime} into a {@code IncidentDateTime}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Leading and trailing white spaces will be trimmed."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * throws ParseException if the give {@code dateTime} is not valid."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static IncidentDateTime parseDateTime(String dateTime) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new IncidentDateTime(trimmedDateTime);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Parses a {@code String incident id keyword} into an {@code IncidentId}."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     *"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws ParseException if the given {@code incident id keyword} is invalid."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static IncidentId parseId(String id) throws ParseException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String trimmedId \u003d id.trim();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return new IncidentId(trimmedId);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses a {@code String auto y/n} into a {@boolean isAuto}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param auto"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return isAuto"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws ParseException if the {@code auto command} is invalid."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static boolean parseAuto(String auto) throws ParseException {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        boolean isAuto;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(auto);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String parsedAuto \u003d auto.toLowerCase();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (parsedAuto.equals(\"y\")) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            isAuto \u003d true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else if (parsedAuto.equals(\"n\")) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            isAuto \u003d false;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else if (parsedAuto.contains(\"/\")) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_IRRELEVANT_PREFIXES);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new ParseException(Messages.MESSAGE_AUTO_ONLY_Y_N);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return isAuto;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4,
      "hellopanda128": 74,
      "madanalogy": 32,
      "Yoshi275": 13,
      "-": 108,
      "tirameshu": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SubmitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.commands.SubmitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Parses input arguments and creates a new SubmitCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class SubmitCommandParser implements Parser\u003cSubmitCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SubmitCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * and returns a SubmitCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public SubmitCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return new SubmitCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SubmitCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdatePersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdateCommandParser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_USERNAME,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                        PREFIX_PASSWORD, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getPreamble().equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            index \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor updatePersonDescriptor \u003d new UpdatePersonDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            updatePersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            updatePersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            updatePersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_USERNAME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            updatePersonDescriptor.setUsername(ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PASSWORD).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            updatePersonDescriptor.setPassword(ParserUtil.parsePassword(argMultimap.getValue(PREFIX_PASSWORD).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parseTagsForUpdate(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(updatePersonDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!updatePersonDescriptor.isAnyFieldUpdated()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new UpdateCommand(index, updatePersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForUpdate(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 7,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IncidentManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.UniqueIncidentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.UniqueVehicleList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class IncidentManager implements ReadOnlyIncidentManager {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final UniqueIncidentList incidents;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final UniqueVehicleList vehicles;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidents \u003d new UniqueIncidentList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicles \u003d new UniqueVehicleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManager() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Creates an IncidentManager using the Persons and Vehicles in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManager(ReadOnlyIncidentManager toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Replaces the contents of the incident list with {@code incidents}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * {@code incidents} must not contain duplicate incident."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void setIncidents(List\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.incidents.setIncidents(incidents);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Replaces the contents of the vehicle list with {@code vehicles}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code vehicles} must not contain duplicate vehicles."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void setVehicles(List\u003cVehicle\u003e vehicles) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.vehicles.setVehicles(vehicles);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Resets the existing data of this {@code IncidentManager} with {@code newData}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void resetData(ReadOnlyIncidentManager newData) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        setIncidents(newData.getIncidentList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        setVehicles(newData.getVehicleList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void setIncident(Incident target, Incident editedIncident) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(editedIncident);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        incidents.setIncident(target, editedIncident);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Removes {@code key} from this {@code IncidentManager}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    //// incident-level operation"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if an incident with the same identity as {@code incident} exists in the incident manager."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean hasIncident(Incident incident) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(incident);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidents.contains(incident);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds an incident to the front of the list in incident manager."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The incident must not already exist in the incident manager."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void addIncident(Incident i) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidents.add(i);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds an incident to the back of the list in incident manager."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The incident must not already exist in the incident manager."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void appendIncident(Incident i) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidents.append(i);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Removes an incident to the incident manager."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The incident must not already exist in the incident manager."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void removeIncident(Incident i) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidents.remove(i);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    //// vehicle-level operation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if a vehicle with the same identity as {@code vehicle} exists in the address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean hasVehicle(Vehicle vehicle) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(vehicle);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return vehicles.contains(vehicle);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns true if a vehicle with the same vehicle number exists in the IMS."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param vNum the vehicle number to be compared."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean hasVehicleNumber(String vNum) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(vNum);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return vehicles.containsVNum(vNum);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds a vehicle to the address book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The vehicle must not already exist in the address book."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void addVehicle(Vehicle v) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicles.add(v);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void setVehicle(Vehicle target, Vehicle editedVehicle) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(editedVehicle);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        vehicles.setVehicle(target, editedVehicle);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Deletes {@code Vehicle toDelete} from the incident manager provided it exists."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void deleteVehicle(Vehicle toDelete) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        vehicles.remove(toDelete);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\" + \"\\n\""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                + incidents.asUnmodifiableObservableList().size() + \" incidents\" + \"\\n\""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + vehicles.asUnmodifiableObservableList().size() + \" vehicles\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ObservableList\u003cIncident\u003e getIncidentList() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidents.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ObservableList\u003cVehicle\u003e getVehicleList() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return vehicles.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof IncidentManager // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 persons.equals(((IncidentManager) other).persons)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 incidents.equals(((IncidentManager) other).incidents)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 vehicles.equals(((IncidentManager) other).vehicles));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 58,
      "hellopanda128": 28,
      "madanalogy": 11,
      "Yoshi275": 34,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** {@code Predicate} for persons that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** {@code Predicate} for incidents that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    Predicate\u003cIncident\u003e PREDICATE_SHOW_ALL_INCIDENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /** {@code Predicate} for incidents that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    Predicate\u003cVehicle\u003e PREDICATE_SHOW_ALL_VEHICLES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /** {@code Predicate} for filtering draft incident reports */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Predicate\u003cIncident\u003e PREDICATE_SHOW_DRAFT_INCIDENT_REPORTS \u003d Incident::isDraft;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** {@code Predicate} for filtering complete incident reports */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    Predicate\u003cIncident\u003e PREDICATE_SHOW_COMPLETE_INCIDENT_REPORTS \u003d Incident::isCompleteDraft;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Person} that is logged into the {@code Session}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void setSession(Person person);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Gets the {@code Person} that is logged into the {@code Session}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Person getLoggedInPerson();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Gets the {@code Person} that is logged into the {@code Session}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    String getLoginTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if a user is logged in."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    boolean isLoggedIn();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Path getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void setIncidentManagerFilePath(Path incidentManagerFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Replaces address book data with the data in {@code incidentManager}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void setIncidentManager(ReadOnlyIncidentManager incidentManager);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /** Returns the IncidentManager */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    ReadOnlyIncidentManager getIncidentManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the incident manager."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The person must exist in the incident manager."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code person} must not already exist in the incident manager."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code target} must exist in the incident manager."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the incident"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * manager."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Replaces the given incident {@code target} with {@code editedIncident}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code target} must exit in the incident manager."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Incident details of {@code target} must not be the same as another existing incident in incident manager."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    void setIncident(Incident target, Incident editedIncident);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if an incident with the same identity as {@code incident} exists in the incident manager."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    boolean hasIncident(Incident incident);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds the given incident."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * {@code incident} must not already exist in the incident manager."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void addIncident(Incident incident);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Removes the given incident."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The {@code incident} must exist in the incident manager."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    void removeIncident(Incident incident);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns true if a vehicle of the same identity as (@code vehicle} exists in the incident manager."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    boolean hasVehicle(Vehicle vehicle);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns true if a vehicle of the same vehicle number exists in the Incident Manager."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    boolean hasVNum(String vNum);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Replaces the given Vehicle {@code target} with {@code editedVehicle}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * {@code target} must exist in the Incident Manager."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * The identity of {@code target} must not be the same as another vehicle in the Incident Manager"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    void setVehicle(Vehicle target, Vehicle editedVehicle);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Adds a {@code Vehicle toAdd} to the Incident Manager."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    void addVehicle(Vehicle toAdd);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Deletes the given vehicle if {@code vehicleToDelete} exists in the incident manager."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    void deleteVehicle(Vehicle vehicleToDelete);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /** Returns an unmodifiable view of the filtered incident list */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    ObservableList\u003cIncident\u003e getFilteredIncidentList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Returns true if incident list contains incidents filtered by given predicate */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    boolean ifAnyIncidentsSatisfyPredicate(Predicate\u003cIncident\u003e predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered vehicle list */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    ObservableList\u003cVehicle\u003e getFilteredVehicleList();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Updates the filter of the filtered Incident list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    void updateFilteredIncidentList(Predicate\u003cIncident\u003e predicate);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Updates the filter of the filtered Vehicle list to filter by the given {@code district}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @throws NullPointerException if {@code district} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    void updateFilteredVehicleList(Predicate\u003cVehicle\u003e predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 39,
      "hellopanda128": 38,
      "madanalogy": 26,
      "Yoshi275": 10,
      "-": 75,
      "tirameshu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Session session;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final IncidentManager incidentManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final FilteredList\u003cIncident\u003e filteredIncidents;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final FilteredList\u003cVehicle\u003e filteredVehicles;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Initializes a ModelManager with the given incidentManager and userPrefs."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ModelManager(ReadOnlyIncidentManager incidentManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireAllNonNull(incidentManager, userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + incidentManager + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.incidentManager \u003d new IncidentManager(incidentManager);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        session \u003d new Session(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.incidentManager.getPersonList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        filteredIncidents \u003d new FilteredList\u003c\u003e(this.incidentManager.getIncidentList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        filteredVehicles \u003d new FilteredList\u003c\u003e(this.incidentManager.getVehicleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this(new IncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setSession(Person person) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.info(\"Session started by \" + person.getUsername());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.info(\"Session Reset\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        session \u003d new Session(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Person getLoggedInPerson() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return session.getLoggedInPerson();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String getLoginTime() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return session.getLoginTime();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isLoggedIn() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return session.getLoggedInPerson() !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return userPrefs.getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManagerFilePath(Path incidentManagerFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(incidentManagerFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userPrefs.setIncidentManagerFilePath(incidentManagerFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IncidentManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManager(ReadOnlyIncidentManager incidentManager) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.incidentManager.resetData(incidentManager);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public ReadOnlyIncidentManager getIncidentManager() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager.hasPerson(person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.removePerson(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.addPerson(person);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * {@code versionedIncidentManager}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Incidents \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean hasIncident(Incident incident) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(incident);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager.hasIncident(incident);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void setIncident(Incident target, Incident editedIncident) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireAllNonNull(target, editedIncident);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.setIncident(target, editedIncident);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void addIncident(Incident incident) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.addIncident(incident);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        updateFilteredIncidentList(PREDICATE_SHOW_ALL_INCIDENTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void removeIncident(Incident incident) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidentManager.removeIncident(incident);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Incident List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Incident} backed by the internal list of"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * {@code versionedIncidentManager}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ObservableList\u003cIncident\u003e getFilteredIncidentList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return filteredIncidents;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void updateFilteredIncidentList(Predicate\u003cIncident\u003e predicate) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        filteredIncidents.setPredicate(predicate);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if the list contains incidents satisfying a given predicate."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if the list contains incidents satisfying given predicate, false otherwise."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean ifAnyIncidentsSatisfyPredicate(Predicate\u003cIncident\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return !filteredIncidents.filtered(predicate).isEmpty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Vehicles \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean hasVehicle(Vehicle vehicle) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(vehicle);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return incidentManager.hasVehicle(vehicle);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean hasVNum(String vNum) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(vNum);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return incidentManager.hasVehicleNumber(vNum);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void setVehicle(Vehicle target, Vehicle editedVehicle) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireAllNonNull(target, editedVehicle);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        incidentManager.setVehicle(target, editedVehicle);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void addVehicle(Vehicle toAdd) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        incidentManager.addVehicle(toAdd);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void deleteVehicle(Vehicle toDelete) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        incidentManager.deleteVehicle(toDelete);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Vehicle List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Vehicle} backed by the internal list of"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * {@code versionedIncidentManager}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public ObservableList\u003cVehicle\u003e getFilteredVehicleList() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return filteredVehicles;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void updateFilteredVehicleList(Predicate\u003cVehicle\u003e predicate) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        filteredVehicles.setPredicate(predicate);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager.equals(other.incidentManager)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 41,
      "hellopanda128": 40,
      "madanalogy": 56,
      "Yoshi275": 12,
      "-": 129,
      "tirameshu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyIncidentManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public interface ReadOnlyIncidentManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns an unmodifiable view of the vehicles list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * This list will not contain any duplicate vehicles."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    ObservableList\u003cIncident\u003e getIncidentList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns an unmodifiable view of the vehicles list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * This list will not contain any duplicate vehicles."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    ObservableList\u003cVehicle\u003e getVehicleList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 6,
      "madanalogy": 1,
      "Yoshi275": 7,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlySession.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Unmodifiable view of a login session"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public interface ReadOnlySession {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Person getLoggedInPerson();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    String getLoginTime();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Path getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Session.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Represents details relating to the session currently active in the incident management system."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class Session implements ReadOnlySession {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Person person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Date loginTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Session(Person person) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        loginTime \u003d new Date();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Person getLoggedInPerson() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Person(person.getName(), person.getPhone(), person.getEmail(), person.getTags(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                person.getUsername(), person.getPassword());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String getLoginTime() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return loginTime.toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!(other instanceof Session)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Session otherSession \u003d (Session) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return otherSession.getLoggedInPerson().equals(getLoggedInPerson())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 otherSession.getLoginTime().equals(getLoginTime());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Path incidentManagerFilePath \u003d Paths.get(\"data\" , \"incidentManager.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        setIncidentManagerFilePath(newUserPrefs.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManagerFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManagerFilePath(Path incidentManagerFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(incidentManagerFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.incidentManagerFilePath \u003d incidentManagerFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 incidentManagerFilePath.equals(o.incidentManagerFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return Objects.hash(guiSettings, incidentManagerFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + incidentManagerFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 10,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/CallerNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Represents a Person\u0027s CallerNumber in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class CallerNumber extends Phone {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            \"Caller number should be of length 8, only contain numerical digits and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final int CALLER_NUMBER_LENGTH \u003d 8;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructs a {@code CallerNumber}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public CallerNumber(String phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // requireNonNull(callerNumber);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // checkArgument(isValidCallerNumber(callerNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // this.callerNumber \u003d callerNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Checks if {@code caller} is a valid {@code CallerNumber}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static boolean isValidCaller(String caller) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        boolean correctLength \u003d caller.length() \u003d\u003d CALLER_NUMBER_LENGTH;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        boolean isNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            Integer.parseInt(caller);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            isNumber \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            isNumber \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return correctLength \u0026 isNumber;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!(other instanceof CallerNumber)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        CallerNumber e \u003d (CallerNumber) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return e.value.equals(this.value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 3,
      "hellopanda128": 32,
      "Yoshi275": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Represents the description of the incident."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private String desc;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Creates a filled Description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param desc the description of the event filled in by the operator."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public Description(String desc) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(desc);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        checkArgument(isValidDescription(desc), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.desc \u003d desc;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Creates a new Description that is empty."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Used to facilitate fast creation of incident reports, descriptions can be added during edits."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.desc \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return desc;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (!(other instanceof Description)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Description e \u003d (Description) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return e.desc.equals(this.desc);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 22,
      "hellopanda128": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/DescriptionKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DescriptionKeywordsPredicate implements Predicate\u003cIncident\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DescriptionKeywordsPredicate(Description descriptionKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.keywords.add(descriptionKeywords.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean test(Incident incident) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(incident.getDesc().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof DescriptionKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/IdKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class IdKeywordsPredicate implements Predicate\u003cIncident\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IdKeywordsPredicate(IncidentId idKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.keywords.add(idKeywords.getId());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean test(Incident incident) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(incident.getIncidentId().getId(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof IdKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 keywords.equals(((IdKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/Incident.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.model.vehicle.Availability.VEHICLE_BUSY_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Represents an incident report in the IMS."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class Incident {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    // auto-filled fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The operator on call who created this incident report. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final Person operator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Date and time information of this incident report. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final IncidentDateTime incidentDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The vehicle assigned to investigate this incident."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Assigned when the new incident is created, and cannot be changed after."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Vehicle vehicle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The unique id associated with this incident. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final IncidentId id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /** The district associated with this incident. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final District district;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    // fields to be filled in by the operator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** A description of this incident. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** The caller number associated with this incident. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private CallerNumber callerNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Enum to track incident status. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public enum Status {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        INCOMPLETE_DRAFT(\"Incomplete Draft\"), // incomplete draft - not all fields filled AND not submitted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        COMPLETE_DRAFT (\"Complete Draft\"), // complete draft - all fields filled AND not submitted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        SUBMITTED_REPORT(\"Submitted\"); // submitted report - all fields filled AND submitted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \"Status can only take on one of three values: INCOMPLETE_DRAFT, COMPLETE_DRAFT, SUBMITTED_REPORT\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        private String statusLabel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Status(String statusLabel) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            this.statusLabel \u003d statusLabel;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return statusLabel;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    // TODO delete this field once all constructors accept status as attribute."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Status status \u003d Status.INCOMPLETE_DRAFT; // default is draft"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /** Constructor for generating an incident draft according to \u0027new\u0027 command i.e. fills auto-filled fields."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param operator operator generating the new incident report."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param district district number where the incident occurred."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public Incident (Person operator, District district) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.district \u003d district;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.incidentDateTime \u003d new IncidentDateTime();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.id \u003d new IncidentId(incidentDateTime.getMonth(), incidentDateTime.getYear());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.status \u003d Status.INCOMPLETE_DRAFT; // newly created report"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // set to null as they will be filled in later"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.description \u003d null;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.callerNumber \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Constructor that takes in all attributes of incident. Only called when loading data."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param operator"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param district"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param incidentDateTime"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param incidentId"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param callerNumber"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param status"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vehicle"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public Incident(Person operator, District district, IncidentDateTime incidentDateTime, IncidentId incidentId,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    CallerNumber callerNumber, Description description, Status status, Vehicle vehicle) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.district \u003d district;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.incidentDateTime \u003d incidentDateTime;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.id \u003d incidentId;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.callerNumber \u003d callerNumber;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.vehicle \u003d vehicle;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public Vehicle getVehicle() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return this.vehicle; // should never be null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentDateTime getDateTime() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return this.incidentDateTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public Description getDesc() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public CallerNumber getCallerNumber() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this.callerNumber;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public District getDistrict() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return this.district;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentId getIncidentId() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Person getOperator() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return operator;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public IncidentDateTime getIncidentDateTime() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return incidentDateTime;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if incident is a complete or an incomplete draft."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if incident is a draft, false otherwise."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isDraft() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.status.equals(Status.COMPLETE_DRAFT) || this.status.equals(Status.INCOMPLETE_DRAFT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if incident is a complete draft ready for submission."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if incident is a complete draft, false otherwise."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isCompleteDraft() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.status.equals(Status.COMPLETE_DRAFT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if incident is an incomplete draft."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if incident is a incomplete draft, false otherwise."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isIncompleteDraft() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.status.equals(Status.INCOMPLETE_DRAFT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Checks if incident has been submitted."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return true if incident has been submitted, false otherwise."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean isSubmitted() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.status.equals(Status.SUBMITTED_REPORT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns true if both Incidents have at least one other identity field that is the same."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * This defines a weaker notion of equality between two Incidents."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean isSameIncident(Incident otherIncident) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (otherIncident \u003d\u003d this) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return otherIncident !\u003d null"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getCallerNumber().equals(getCallerNumber())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getDesc().equals(getDesc())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getDistrict().equals(getDistrict());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Assigns vehicle to incident."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vehicle"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void addVehicle(Vehicle vehicle) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.vehicle \u003d vehicle;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicle.setAvailability(new Availability(VEHICLE_BUSY_TAG));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns true if both Incidents have the same identity and data fields."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * This defines a stronger notion of equality between two Incidents."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (!(other instanceof Incident)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Incident otherIncident \u003d (Incident) other;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return otherIncident.getDateTime().equals(getDateTime())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getCallerNumber().equals(getCallerNumber())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getDistrict().equals(getDistrict())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                \u0026\u0026 otherIncident.getIncidentId().equals(getIncidentId());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return \"Incident #\" + id.getId();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 91,
      "hellopanda128": 35,
      "Yoshi275": 56,
      "tirameshu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/IncidentDateTime.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Represents an Incident\u0027s IncidentDateTime in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIncidentDateTimeFormat(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class IncidentDateTime {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \"IncidentDateTimes should only take in a valid ISO date string, return LocalDateTime, \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    + \"and it should not be blank e.g. 2018-09-24T17:48:00\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    // format style settings"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d DateTimeFormatter.ISO_LOCAL_DATE_TIME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final FormatStyle dateTimeStyle \u003d FormatStyle.MEDIUM;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final DateTimeFormatter displayFormatter \u003d DateTimeFormatter.ofLocalizedDateTime(dateTimeStyle);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public final LocalDateTime incidentDateTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructs a {@code IncidentDateTime}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @param dateTimeString A valid ISO DateTime format string."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(dateTimeString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        checkArgument(isValidIncidentDateTimeFormat(dateTimeString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.incidentDateTime \u003d LocalDateTime.parse(dateTimeString, formatter);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructs a {@code IncidentDateTime} for right now."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentDateTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.incidentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if a given string is in a valid DateTime format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static boolean isValidIncidentDateTimeFormat(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            LocalDateTime.parse(test, formatter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidentDateTime.getMonthValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidentDateTime.getYear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidentDateTime.format(formatter);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns string for easily readable GUI display."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return string representing date and time in readable format."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return incidentDateTime.format(displayFormatter);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof IncidentDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 incidentDateTime.equals(((IncidentDateTime) other).incidentDateTime)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return incidentDateTime.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 25,
      "Yoshi275": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/IncidentId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * Generates Incident ID for the incident in this format: MMYYYYXXXX"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Where MM \u003d Month of incident, YYYY \u003d Year of incident, and XXXX \u003d incident number of the month"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class IncidentId {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static int previousMonth \u003d 1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static int monthId \u003d 1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Generates the ID for the incident based on the following inputs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param mm month of incident"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param yyyy year of incident"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentId(int mm, int yyyy) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.id \u003d String.format(\"%02d\", mm) + yyyy + String.format(\"%04d\", monthId);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        if (previousMonth !\u003d mm) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            previousMonth \u003d mm;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            monthId \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            monthId++;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentId(String id) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!(other instanceof IncidentId)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return ((IncidentId) other).id.equals(this.id);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 27,
      "madanalogy": 18,
      "Yoshi275": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/NameKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class NameKeywordsPredicate implements Predicate\u003cIncident\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public NameKeywordsPredicate(Name nameKeywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.keywords.add(nameKeywords.fullName);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean test(Incident incident) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(incident.getOperator().getName().fullName,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                        keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof NameKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/UniqueIncidentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.exceptions.DuplicateIncidentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.exceptions.IncidentNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * A list of Incidents that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * A Incident is considered unique by comparing using {@code Incident#isSameIncident(Incident)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * As such, adding and updating of Incidents uses Incident#isSameIncident(Incident) for equality,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * so as to ensure that the Incident being added or updated is unique"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * in terms of identity in the UniqueIncidentList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * However, the removal of a Incident uses Incident#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * so as to ensure that the Incident with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * @see Incident#isSameIncident(Incident)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class UniqueIncidentList implements Iterable\u003cIncident\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final int NEW_INCIDENT_INSERTION_INDEX \u003d 0; // to add incidents to front of list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final ObservableList\u003cIncident\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final ObservableList\u003cIncident\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns true if the list contains an equivalent Incident as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean contains(Incident toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Adds an Incident to the front of the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * The Incident must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void add(Incident toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DuplicateIncidentException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        internalList.add(NEW_INCIDENT_INSERTION_INDEX, toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Appends an Incident to the back of the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * The Incident must not already exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void append(Incident toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new DuplicateIncidentException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Replaces the Incident {@code target} in the list with {@code editedIncident}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * The Incident identity of {@code editedIncident} must not be the same as another existing Incident in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void setIncident(Incident target, Incident editedIncident) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireAllNonNull(target, editedIncident);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new IncidentNotFoundException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!target.equals(editedIncident) \u0026\u0026 contains(editedIncident)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DuplicateIncidentException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        internalList.set(index, editedIncident);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Removes the equivalent Incident from the list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * The Incident must exist in the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void remove(Incident toRemove) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new IncidentNotFoundException();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void setIncidents(UniqueIncidentList replacement) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Replaces the contents of this list with {@code Incidents}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * {@code Incidents} must not contain duplicate Incidents."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void setIncidents(List\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        requireAllNonNull(incidents);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (!incidentsAreUnique(incidents)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new DuplicateIncidentException();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        internalList.setAll(incidents);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public ObservableList\u003cIncident\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Iterator\u003cIncident\u003e iterator() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                || (other instanceof UniqueIncidentList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIncidentList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Returns true if {@code Incidents} contains only unique Incidents."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private boolean incidentsAreUnique(List\u003cIncident\u003e incidents) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (int i \u003d 0; i \u003c incidents.size() - 1; i++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            for (int j \u003d i + 1; j \u003c incidents.size(); j++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                if (incidents.get(i).equals(incidents.get(j))) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 18,
      "Yoshi275": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/exceptions/DuplicateIncidentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Signals that the operation will result in duplicate Incidents"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * (Incidents are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class DuplicateIncidentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public DuplicateIncidentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(\"Operation would result in duplicate incidents\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/incident/exceptions/IncidentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.model.incident.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Signals that the operation is unable to find the specified incident."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class IncidentNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(\"Incident is not found.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/LoginCredentialsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Username} and {@code Password} matches the entered value."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class LoginCredentialsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public LoginCredentialsPredicate(Username username, Password password) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return person.getUsername().equals(username) \u0026\u0026 person.getPassword().equals(password);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof LoginCredentialsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 username.equals(((LoginCredentialsPredicate) other).username)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 password.equals(((LoginCredentialsPredicate) other).password)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} or {@code Username} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                        || person.getUsername().value.toUpperCase().contains(keyword.toUpperCase()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Password.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Represents a Person\u0027s password in the incident management system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Passwords must adhere to the following requirements:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"1. The password can only contain alphanumeric characters and/or these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \").\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"2. The password must be at least 6 characters in length.\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"3. The password cannot be blank or contain a whitespace.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * The first character of the username must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"0-9]{6,}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param password A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Password(String password) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        checkArgument(isValidPassword(password), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.value \u003d password;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 value.equals(((Password) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Represents an account in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags, Username username, Password password) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireAllNonNull(name, phone, email, tags, username, password);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if both persons have the same name or username."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 (otherPerson.getUsername().equals(getUsername()) || otherPerson.getName().equals(getName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return otherPerson.getUsername().equals(getUsername())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return Objects.hash(name, phone, email, username, password, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(\" Username: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(getUsername())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Password getPassword() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Checks whether a person is a regular user or an admin."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param person represents the person to be checked"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @return false if the person is an admin"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static boolean isNotAdmin(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (person \u003d\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return person.getTags().stream().noneMatch(tag -\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                StringUtil.containsWordIgnoreCase(tag.tagName, \"admin\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 128,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be 8 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Username.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Represents a Person\u0027s username in the incident management system."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidUsername(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class Username {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Usernames must adhere to the following requirements: \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"1. Usernames must be at least 3 characters in length\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"2. Usernames can only consist of alphanumeric characters and the following special characters,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"excluding the parentheses, (.-).\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"3. Usernames cannot begin or end with a non alphanumeric character\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            + \"4. Usernames cannot be blank or contain a whitespace\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * The first character of the username must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9][a-zA-Z0-9.-]+[a-zA-Z0-9]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param username A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Username(String username) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        checkArgument(isValidUsername(username), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.value \u003d username;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static boolean isValidUsername(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 value.equals(((Username) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            \"Tags should only consist of alphanumeric characters, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    + \"with a period or a hyphen for the characters in between if any, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    + \"and it should not be blank or contain a whitespace\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[a-zA-Z0-9.-]+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 6,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//@@author madanalogy"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Tests that a {@code Tag} in a {@code Person}\u0027s set of tags matches all of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class TagContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public TagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return keywords.stream().allMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                person.getTags().stream().anyMatch(tag -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                || (other instanceof TagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                \u0026\u0026 keywords.equals(((TagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Contains utility methods for populating {@code IncidentManager} with sample data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Admin\", \"Team-1\"), new Username(\"Agent01\"), new Password(\"password\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Team-1\"), new Username(\"Agent02\"), new Password(\"password\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Team-2\"), new Username(\"Operator01\"), new Password(\"password\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Team-2\"), new Username(\"Operator02\"), new Password(\"password\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Team-3\"), new Username(\"Agent03\"), new Password(\"password\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                getTagSet(\"Team-3\", \"Admin\"), new Username(\"Operator03\"), new Password(\"password\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static Incident[] getSampleIncidents() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Person[] samplePersons \u003d getSamplePersons();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        IncidentDateTime[] sampleIncidentDateTimes \u003d getSampleIncidentDateTimes();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Vehicle[] sampleVehicles \u003d getSampleVehicles();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident[] sampleIncidents \u003d new Incident[] {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Incident(samplePersons[0], new District(1), sampleIncidentDateTimes[0],"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new IncidentId(sampleIncidentDateTimes[0].getMonth(), sampleIncidentDateTimes[0].getYear()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"93894576\"), new Description(\"Shoplifting reported in District 1 Mall\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.SUBMITTED_REPORT, sampleVehicles[0]),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Incident(samplePersons[1], new District(2), sampleIncidentDateTimes[1],"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new IncidentId(sampleIncidentDateTimes[1].getMonth(), sampleIncidentDateTimes[1].getYear()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"98098765\"), new Description(\".\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.INCOMPLETE_DRAFT, sampleVehicles[1]),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Incident(samplePersons[2], new District(3), sampleIncidentDateTimes[2],"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new IncidentId(sampleIncidentDateTimes[2].getMonth(), sampleIncidentDateTimes[2].getYear()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"87595849\"), new Description(\".\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.INCOMPLETE_DRAFT, sampleVehicles[2]),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Incident(samplePersons[3], new District(4), sampleIncidentDateTimes[3],"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new IncidentId(sampleIncidentDateTimes[3].getMonth(), sampleIncidentDateTimes[3].getYear()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"89090908\"), new Description(\"Minor traffic accident in District 4 highway\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.SUBMITTED_REPORT, sampleVehicles[3]),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Incident(samplePersons[4], new District(5), sampleIncidentDateTimes[4],"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new IncidentId(sampleIncidentDateTimes[4].getMonth(), sampleIncidentDateTimes[4].getYear()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"87656743\"), new Description(\"Arson reported at District 5 warehouse\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.COMPLETE_DRAFT, sampleVehicles[4])"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return sampleIncidents;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static IncidentDateTime[] getSampleIncidentDateTimes() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new IncidentDateTime[] {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new IncidentDateTime(\"2012-12-21T12:00:00\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new IncidentDateTime(\"2013-01-11T00:00:00\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new IncidentDateTime(\"2014-05-01T01:00:00\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new IncidentDateTime(\"2015-06-16T14:00:00\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new IncidentDateTime(\"2016-09-01T21:00:00\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The assigned vehicles are of \"busy\" status here because"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * it\u0027s just loading of data; they were alr dispatched."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static Vehicle[] getSampleVehicles() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new Vehicle[] {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"SFD3204V\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(1), new Availability(\"BUSY\")),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"SDF2044R\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(2), new Availability(\"BUSY\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"FEP3249J\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(3), new Availability(\"BUSY\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"GRB3294K\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(4), new Availability(\"BUSY\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"GJR8923L\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(5), new Availability(\"BUSY\")),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"SGS2121G\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(1), new Availability(\"AVAILABLE\")),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"BBA2222F\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(6), new Availability(\"AVAILABLE\")),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"FKH1221P\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(20), new Availability(\"AVAILABLE\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"OLI4445C\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(8), new Availability(\"AVAILABLE\"))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        };"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static ReadOnlyIncidentManager getSampleIncidentManager() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager sampleAb \u003d new IncidentManager();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (Incident sampleIncident : getSampleIncidents()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            sampleAb.addIncident(sampleIncident);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        for (Vehicle sampleVehicle : getSampleVehicles()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            sampleAb.addVehicle(sampleVehicle);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 48,
      "madanalogy": 13,
      "Yoshi275": 9,
      "-": 45,
      "tirameshu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/Availability.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Represents a vehicle\u0027s availability in the IMS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAvailability(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class Availability {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \"Availability is either \u0027AVAILABLE\u0027 or \u0027BUSY\u0027\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    // Vehicle availability status tags"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String VEHICLE_AVAILABLE_TAG \u003d \"AVAILABLE\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String VEHICLE_BUSY_TAG \u003d \"BUSY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String availability;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Constructs an {@code Availability}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param d A valid Availability tag."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Availability(String d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireNonNull(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        checkArgument(isValidAvailability(d), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.availability \u003d d.toUpperCase();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns true if a given string is a valid Availability."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static boolean isValidAvailability(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return test.equalsIgnoreCase(VEHICLE_AVAILABLE_TAG) || test.equalsIgnoreCase(VEHICLE_BUSY_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Sets availability to given availability."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @param updatedAvailability updated availability"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void setAvailability(Availability updatedAvailability) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.availability \u003d updatedAvailability.availability;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String getAvailabilityTag() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this.availability;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return availability;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                || (other instanceof Availability // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u0026\u0026 availability.equals(((Availability) other).availability)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return availability.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/AvailableInDistrictPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.model.vehicle.Availability.VEHICLE_AVAILABLE_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Only used for manual vehicle assignment, where model shows only the available"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * vehicles in the district."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class AvailableInDistrictPredicate implements Predicate\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final District district;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Add search keywords as list (of strings) to match"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Accounts for possibly multiple search parameters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param district"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public AvailableInDistrictPredicate(District district) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.district \u003d district;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Looks for matching vehicles by comparing District directly"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vehicle"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean test(Vehicle vehicle) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicle.getDistrict().getDistrictNum() \u003d\u003d this.district.getDistrictNum()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 vehicle.getAvailability().getAvailabilityTag().equals(VEHICLE_AVAILABLE_TAG);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof AvailableInDistrictPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 district \u003d\u003d ((AvailableInDistrictPredicate) other).district); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return \"Available in district \" + district;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/District.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Represents a Person\u0027s  in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDistrict(int)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class District {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"Districts should be a single integer from 1 to 28\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final int FIRST_DISTRICT \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final int LAST_DISTRICT \u003d 28;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final int districtNum;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Constructs a {@code District}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param d A valid District."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public District(int d) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(d);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        checkArgument(isValidDistrict(d), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        districtNum \u003d d;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public int getDistrictNum() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return this.districtNum;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if a given string is a valid District."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static boolean isValidDistrict(int test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return FIRST_DISTRICT \u003c\u003d test \u0026\u0026 test \u003c\u003d LAST_DISTRICT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return String.valueOf(districtNum);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof District // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 districtNum \u003d\u003d ((District) other).districtNum); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tirameshu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/DistrictKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class DistrictKeywordsPredicate implements Predicate\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private List\u003cDistrict\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Add search keywords as list (of strings) to match"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Accounts for possibly multiple search parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param districtKeywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public DistrictKeywordsPredicate(List\u003cDistrict\u003e districtKeywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.keywords.addAll(districtKeywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Looks for matching vehicles by comparing District directly"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vehicle"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean test(Vehicle vehicle) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .anyMatch(keyword -\u003e vehicle.getDistrict().equals(keyword));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof DistrictKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 keywords.equals(((DistrictKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/UniqueVehicleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.exceptions.DuplicateVehicleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.exceptions.VehicleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * A list of Vehicles that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * A Vehicle is considered unique by comparing using {@code Vehicle#isSameVehicle(Vehicle)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * As such, adding and updating of Vehicles uses Vehicle#isSameVehicle(Vehicle) for equality,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * so as to ensure that the Vehicle being added or updated is unique"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * in terms of identity in the UniqueVehicleList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * However, the removal of a Vehicle uses Vehicle#equals(Object)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * so as to ensure that the Vehicle with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * @see Vehicle#isSameVehicle(Vehicle)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class UniqueVehicleList implements Iterable\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final ObservableList\u003cVehicle\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final ObservableList\u003cVehicle\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if the list contains an equivalent Vehicle as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean contains(Vehicle toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameVehicle);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Checks if a vehicle of the same vehicle number exists in the unique vehicle list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * @param vNum is the vehicle number to be compared."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public boolean containsVNum(String vNum) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        requireNonNull(vNum);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        for (Vehicle v: internalList) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            if (v.getVehicleNumber().toString().equalsIgnoreCase((vNum))) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                result \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Adds a Vehicle to the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The Vehicle must not already exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void add(Vehicle toAdd) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new DuplicateVehicleException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Replaces the Vehicle {@code target} in the list with {@code editedVehicle}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The Vehicle identity of {@code editedVehicle} must not be the same as another existing Vehicle in the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void setVehicle(Vehicle target, Vehicle editedVehicle) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireAllNonNull(target, editedVehicle);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new VehicleNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (!target.isSameVehicle(editedVehicle) \u0026\u0026 contains(editedVehicle)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new DuplicateVehicleException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        internalList.set(index, editedVehicle);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Removes the equivalent Vehicle from the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The Vehicle must exist in the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void remove(Vehicle toRemove) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new VehicleNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void setVehicles(UniqueVehicleList replacement) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Replaces the contents of this list with {@code Vehicles}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * {@code Vehicles} must not contain duplicate Vehicles."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void setVehicles(List\u003cVehicle\u003e vehicles) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        requireAllNonNull(vehicles);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!vehiclesAreUnique(vehicles)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new DuplicateVehicleException();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        internalList.setAll(vehicles);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public ObservableList\u003cVehicle\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public Iterator\u003cVehicle\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof UniqueVehicleList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueVehicleList) other).internalList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if {@code Vehicles} contains only unique Vehicles."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private boolean vehiclesAreUnique(List\u003cVehicle\u003e vehicles) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        for (int i \u003d 0; i \u003c vehicles.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            for (int j \u003d i + 1; j \u003c vehicles.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                if (vehicles.get(i).isSameVehicle(vehicles.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 8,
      "hellopanda128": 16,
      "tirameshu": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/VNumKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VNumKeywordsPredicate implements Predicate\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Only used for Vehicle Search."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Takes in string to support substring search in vtype."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param vNumKeywords"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VNumKeywordsPredicate(String vNumKeywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.keywords.add(vNumKeywords);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VNumKeywordsPredicate(VehicleNumber vNumKeywords) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.keywords.add(vNumKeywords.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean test(Vehicle vehicle) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String keyword \u003d keywords.get(0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicle.getVehicleNumber().toString().contains(keyword);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof VNumKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 keywords.equals(((VNumKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/VTypeKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VTypeKeywordsPredicate implements Predicate\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VTypeKeywordsPredicate(VehicleType vTypeKeywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.keywords.add(vTypeKeywords.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean test(Vehicle vehicle) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(vehicle.getVehicleType().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof VTypeKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 keywords.equals(((VTypeKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String getPredicate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return keywords.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/Vehicle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.model.vehicle.Availability.VEHICLE_AVAILABLE_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Represents a Vehicle in the IMS."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class Vehicle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final VehicleType vehicleType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final VehicleNumber vehicleNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final District district; // where the vehicle is parked at"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Availability availability;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Vehicle(VehicleType vehicleType, VehicleNumber vehicleNumber, District district, Availability availability) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireAllNonNull(vehicleType, vehicleNumber, district);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.vehicleType \u003d vehicleType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.vehicleNumber \u003d vehicleNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.district \u003d district;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.availability \u003d availability; // vehicles start off available"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleType getVehicleType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleNumber getVehicleNumber() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public District getDistrict() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return district;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Availability getAvailability() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return availability;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void setAvailability(Availability availability) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.availability \u003d availability;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean isAvailable() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return this.getAvailability().getAvailabilityTag().equals(VEHICLE_AVAILABLE_TAG);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if both Vehicles of the same VehicleType have at least one other identity field that is the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * This defines a weaker notion of equality between two Vehicles."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean isSameVehicle(Vehicle otherVehicle) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (otherVehicle \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return otherVehicle !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 otherVehicle.getVehicleType().equals(getVehicleType())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 otherVehicle.getVehicleNumber().equals(getVehicleNumber());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if both Vehicles have the same identity and data fields."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * This defines a stronger notion of equality between two Vehicles."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (!(other instanceof Vehicle)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Vehicle otherVehicle \u003d (Vehicle) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return otherVehicle.getVehicleType().equals(getVehicleType())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 otherVehicle.getVehicleNumber().equals(getVehicleNumber());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return Objects.hash(vehicleType, vehicleNumber, district, availability);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Description of vehicle specifically used for UI."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return description of vehicle to display on UI."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String toDisplayString() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        sb.append(getVehicleType())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .append(getVehicleNumber());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        builder.append(getVehicleType())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .append(\" Vehicle Number: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .append(getVehicleNumber())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .append(\" District: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                .append(getDistrict())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                .append(\" Availability: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                .append(getAvailability());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 8,
      "tirameshu": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/VehicleNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "// import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_VEHICLE_NUMBER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_VEHICLE_NUMBER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Represents a Person\u0027s VehicleNumber in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVehicleNumber(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VehicleNumber {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"All vehicle numbers must follow the format: ABC1234D, and must be unique.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"[\\\\p{Upper}][\\\\p{Upper}][\\\\p{Upper}][\\\\p{Digit}][\\\\p{Digit}][\\\\p{Digit}][\\\\p{Digit}][\\\\p{Upper}]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private static List\u003cString\u003e vehicleNumbers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final String vehicleNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Constructs a {@code VehicleNumber}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param number A valid VehicleNumber."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleNumber(String number) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        checkArgument(isValidVehicleNumber(number), MESSAGE_INVALID_VEHICLE_NUMBER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // checkArgument(isDuplicateVNum(number), MESSAGE_DUPLICATE_VEHICLE_NUMBER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleNumber \u003d number;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if a given string is a valid VehicleNumber."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static boolean isValidVehicleNumber(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof VehicleNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 vehicleNumber.equals(((VehicleNumber) other).vehicleNumber)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleNumber.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tirameshu": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/VehicleType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVehicleType(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VehicleType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            \"VehicleTypes should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final String[] VEHICLE_TYPES \u003d new String[] {\"Ambulance\", \"Patrol Car\"};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final String vehicleType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param type A valid vehicleType."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleType(String type) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        checkArgument(isValidVehicleType(type), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleType \u003d type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static boolean isValidVehicleType(String vehicleType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleType.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                || (other instanceof VehicleType // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u0026\u0026 vehicleType.equals(((VehicleType) other).vehicleType)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return vehicleType.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tirameshu": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/exceptions/DuplicateVehicleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Signals that the operation will result in duplicate Vehicles"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * (Vehicles are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class DuplicateVehicleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public DuplicateVehicleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        super(\"Operation would result in duplicate vehicles\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/vehicle/exceptions/VehicleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.model.vehicle.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_VEHICLES_FOUND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class VehicleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public VehicleNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        super(MESSAGE_NO_VEHICLES_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IncidentManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Represents a storage for {@link IncidentManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public interface IncidentManagerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Path getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns IncidentManager data as a {@link ReadOnlyIncidentManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @see #getIncidentManagerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Saves the given {@link ReadOnlyIncidentManager} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param incidentManager cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void saveIncidentManager(ReadOnlyIncidentManager incidentManager) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @see #saveIncidentManager(ReadOnlyIncidentManager)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void saveIncidentManager(ReadOnlyIncidentManager incidentManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIncident.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Jackson-friendly version of {@link Incident}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "class JsonAdaptedIncident {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Incident\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final JsonAdaptedPerson operator;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final int districtNum;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String incidentId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String callerNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final JsonAdaptedVehicle vehicle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Constructs a {@code JsonAdaptedIncident} with the given incident details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public JsonAdaptedIncident(@JsonProperty(\"operator\") JsonAdaptedPerson operator,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                              @JsonProperty(\"districtNum\") int districtNum,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                              @JsonProperty(\"dateTime\") String dateTime,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                              @JsonProperty(\"incidentId\") String incidentId,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                              @JsonProperty(\"callerNumber\") String callerNumber,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                              @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                              @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                              @JsonProperty(\"vehicle\") JsonAdaptedVehicle vehicle) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.operator \u003d operator;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.districtNum \u003d districtNum;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.incidentId \u003d incidentId;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.callerNumber \u003d callerNumber;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.vehicle \u003d vehicle;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Converts a given {@code Incident} into this class for Jackson use."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public JsonAdaptedIncident(Incident source) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        operator \u003d new JsonAdaptedPerson(source.getOperator());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        districtNum \u003d source.getDistrict().getDistrictNum();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        dateTime \u003d source.getDateTime().toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidentId \u003d source.getIncidentId().getId();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        status \u003d source.getStatus().name(); // do not use toString() because it has been overridden"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // uninitialised for new incidents"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        CallerNumber sourceC \u003d source.getCallerNumber();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Description sourceD \u003d source.getDesc();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (sourceC \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            callerNumber \u003d \"12345678\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            callerNumber \u003d sourceC.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (sourceD \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            description \u003d \"default description\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            description \u003d sourceD.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicle \u003d new JsonAdaptedVehicle("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                source.getVehicle().getVehicleType().toString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                source.getVehicle().getVehicleNumber().toString(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                source.getVehicle().getDistrict().getDistrictNum(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                source.getVehicle().getAvailability().toString()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Converts this Jackson-friendly adapted incident object into the model\u0027s {@code Incident} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted incident."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public Incident toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final Person modelOperator \u003d operator.toModelType();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (districtNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    District.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!District.isValidDistrict(districtNum)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final District modelDistrict \u003d new District(districtNum);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                    IncidentDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!IncidentDateTime.isValidIncidentDateTimeFormat(dateTime)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new IllegalValueException(IncidentDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        final IncidentDateTime modelDateTime \u003d new IncidentDateTime(dateTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // no need to run checks for incidentId as it is generated from IncidentDateTime"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        final IncidentId modelIncidentId \u003d new IncidentId(modelDateTime.getMonth(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                modelDateTime.getYear());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (callerNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    CallerNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!CallerNumber.isValidPhone(callerNumber)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(CallerNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final CallerNumber modelCallerNumber \u003d new CallerNumber(callerNumber);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Incident.Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Incident.Status.valueOf(status);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(Incident.Status.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final Incident.Status modelStatus \u003d Incident.Status.valueOf(status);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // no need check for vehicle validity because vehicle must alr be created to be added."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assert(this.vehicle !\u003d null);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        final Vehicle modelVehicle \u003d this.vehicle.toModelType();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new Incident(modelOperator, modelDistrict, modelDateTime, modelIncidentId, modelCallerNumber,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                modelDescription, modelStatus, modelVehicle);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 58,
      "Yoshi275": 63,
      "tirameshu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final String username;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final String password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"username\") String username,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                             @JsonProperty(\"password\") String password,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        username \u003d source.getUsername().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        password \u003d source.getPassword().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (username \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    Username.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!Username.isValidUsername(username)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final Username modelUsername \u003d new Username(username);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (password \u003d\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    Password.class.getSimpleName()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!Password.isValidPassword(password)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new IllegalValueException(Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final Password modelPassword \u003d new Password(password);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags, modelUsername, modelPassword);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 26,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedVehicle.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Jackson-friendly version of {@link Vehicle}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class JsonAdaptedVehicle {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Vehicle\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String vehicleType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String vehicleNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private final int districtNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final String availability;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Constructs a {@code JsonAdaptedVehicle} with the given vehicle details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public JsonAdaptedVehicle(@JsonProperty(\"vehicleType\") String vehicleType,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                              @JsonProperty(\"vehicleNumber\") String vehicleNumber,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                              @JsonProperty(\"district\") int districtNum,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                              @JsonProperty(\"availability\") String availability) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.vehicleType \u003d vehicleType;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.vehicleNumber \u003d vehicleNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        this.districtNum \u003d districtNum;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.availability \u003d availability;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts a given {@code Vehicle} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public JsonAdaptedVehicle(Vehicle source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleType \u003d source.getVehicleType().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleNumber \u003d source.getVehicleNumber().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        districtNum \u003d source.getDistrict().getDistrictNum();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        availability \u003d source.getAvailability().getAvailabilityTag();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Converts this Jackson-friendly adapted vehicle object into the model\u0027s {@code Vehicle} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted vehicle."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public Vehicle toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (vehicleNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    VehicleNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!VehicleNumber.isValidVehicleNumber(vehicleNumber)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(VehicleNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final VehicleNumber modelVehicleNumber \u003d new VehicleNumber(vehicleNumber);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (vehicleType \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    VehicleType.class.getSimpleName()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!VehicleType.isValidVehicleType(vehicleType)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(VehicleType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final VehicleType modelVehicleType \u003d new VehicleType(vehicleType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (districtNum \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    District.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (!District.isValidDistrict(districtNum)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(District.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        final District modelDistrict \u003d new District(districtNum);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (availability \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    Availability.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!Availability.isValidAvailability(availability)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new IllegalValueException(Availability.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        final Availability modelAvailability \u003d new Availability(availability);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return new Vehicle(modelVehicleType, modelVehicleNumber, modelDistrict, modelAvailability);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 85,
      "tirameshu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonIncidentManagerStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * A class to access IncidentManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class JsonIncidentManagerStorage implements IncidentManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIncidentManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public JsonIncidentManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return readIncidentManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Similar to {@link #readIncidentManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Optional\u003cJsonSerializableIncidentManager\u003e jsonIncidentManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                filePath, JsonSerializableIncidentManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (!jsonIncidentManager.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return Optional.of(jsonIncidentManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager(ReadOnlyIncidentManager incidentManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        saveIncidentManager(incidentManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Similar to {@link #saveIncidentManager(ReadOnlyIncidentManager)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager(ReadOnlyIncidentManager incidentManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        requireNonNull(incidentManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIncidentManager(incidentManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 20,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableIncidentManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * An Immutable IncidentManager that is serializable to JSON format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "@JsonRootName(value \u003d \"incidentManager\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "class JsonSerializableIncidentManager {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INCIDENT \u003d \"Incidents list contains duplicate incident(s)\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_VEHICLE \u003d \"Vehicles list contains duplicate vehicle(s)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final int NEW_INCIDENT_INSERTION_INDEX \u003d 0; // incidents are listed reverse chronologically"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final List\u003cJsonAdaptedIncident\u003e incidents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final List\u003cJsonAdaptedVehicle\u003e vehicles \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Constructs a {@code JsonSerializableIncidentManager} with the given persons and vehicles."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public JsonSerializableIncidentManager(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                                       @JsonProperty(\"incidents\") List\u003cJsonAdaptedIncident\u003e incidents,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                                       @JsonProperty(\"vehicles\") List\u003cJsonAdaptedVehicle\u003e vehicles) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.incidents.addAll(NEW_INCIDENT_INSERTION_INDEX, incidents);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.vehicles.addAll(vehicles);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Converts a given {@code ReadOnlyIncidentManager} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIncidentManager}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public JsonSerializableIncidentManager(ReadOnlyIncidentManager source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidents.addAll(NEW_INCIDENT_INSERTION_INDEX,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                source.getIncidentList().stream().map(JsonAdaptedIncident::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicles.addAll(source.getVehicleList().stream().map(JsonAdaptedVehicle::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Converts this address book into the model\u0027s {@code IncidentManager} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager incidentManager \u003d new IncidentManager();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // for persons"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (incidentManager.hasPerson(person)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            incidentManager.addPerson(person);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // for incidents"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        for (JsonAdaptedIncident jsonAdaptedIncident : incidents) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            Incident incident \u003d jsonAdaptedIncident.toModelType();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (incidentManager.hasIncident(incident)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INCIDENT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            incidentManager.appendIncident(incident);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // for vehicles"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        for (JsonAdaptedVehicle jsonAdaptedVehicle : vehicles) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            Vehicle vehicle \u003d jsonAdaptedVehicle.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (incidentManager.hasVehicle(vehicle)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_VEHICLE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            incidentManager.addVehicle(vehicle);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 19,
      "madanalogy": 19,
      "Yoshi275": 13,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public interface Storage extends IncidentManagerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Path getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void saveIncidentManager(ReadOnlyIncidentManager incidentManager) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Manages storage of IncidentManager data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private IncidentManagerStorage incidentManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public StorageManager(IncidentManagerStorage incidentManagerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.incidentManagerStorage \u003d incidentManagerStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IncidentManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManagerStorage.getIncidentManagerFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return readIncidentManager(incidentManagerStorage.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager(Path filePath)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManagerStorage.readIncidentManager(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager(ReadOnlyIncidentManager incidentManager) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assert(incidentManager !\u003d null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assert(incidentManagerStorage !\u003d null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assert(incidentManagerStorage.getIncidentManagerFilePath() !\u003d null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        saveIncidentManager(incidentManager, incidentManagerStorage.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager(ReadOnlyIncidentManager incidentManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManagerStorage.saveIncidentManager(incidentManager, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 17,
      "-": 61,
      "tirameshu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103-t11-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IncidentCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * An UI component that displays information of an {@code Incident}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class IncidentCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String FXML \u003d \"IncidentListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Note: Certain keywords such as \"district\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public final Incident incident;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label operator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Label incidentDistrict;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label dateTime;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label incidentId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label callerNumber;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Label vehicle;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentCard(Incident incident, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        this.incident \u003d incident;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        incidentId.setText(\"Incident #\" + incident.getIncidentId().getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        dateTime.setText(\"created on \" + incident.getDateTime().toDisplayString()); // get the display format, not ISO"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        operator.setText(\"Filed by: \" + incident.getOperator().getName().toString() + \" (\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + incident.getOperator().getUsername() + \")\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        incidentDistrict.setText(\"District: \" + incident.getDistrict().toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicle.setText(\"Vehicle: \" + incident.getVehicle().toDisplayString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // fields not filled for draft"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        CallerNumber incidentCallerNumber \u003d incident.getCallerNumber();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (incidentCallerNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            callerNumber.setText(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            callerNumber.setText(\"Caller: \" + incidentCallerNumber.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Description incidentDesc \u003d incident.getDesc();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        if (incidentDesc \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            description.setText(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            description.setText(incidentDesc.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // status label setup"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        String statusString \u003d incident.getStatus().toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        status.setText(statusString);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        status.setStyle(getBackgroundColourBasedOnValue(statusString) + \"; -fx-font-weight: bold; -fx-border-width: 2.5\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                + \"; -fx-border-color: black\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns fxml background colour string based on the status of the incident."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Incomplete drafts - CRIMSON"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Complete drafts - SANDYBROWN"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Submitted reports - DARKGREEN"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private String getBackgroundColourBasedOnValue(String targetString) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        switch(targetString) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"Incomplete Draft\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return \"-fx-background-color:CRIMSON\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"Complete Draft\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return \"-fx-background-color:SANDYBROWN\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        case \"Submitted\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return \"-fx-background-color:DARKGREEN\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return \"-fx-background-color:BLACK\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        IncidentCard card \u003d (IncidentCard) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                \u0026\u0026 incident.equals(card.incident);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 40,
      "Yoshi275": 55,
      "tirameshu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IncidentListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Panel containing the list of incidents."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class IncidentListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private static final String FXML \u003d \"IncidentListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(IncidentListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private ListView\u003cIncident\u003e incidentListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label boxLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public IncidentListPanel(ObservableList\u003cIncident\u003e incidentList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        boxLabel.setText(\"Incidents\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidentListView.setItems(incidentList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidentListView.setCellFactory(listView -\u003e new IncidentListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Incident} using a {@code IncidentCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    class IncidentListViewCell extends ListCell\u003cIncident\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        protected void updateItem(Incident incident, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            super.updateItem(incident, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            if (empty || incident \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                setGraphic(new IncidentCard(incident, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private IncidentListPanel incidentListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private VehicleListPanel vehicleListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private StatusBarFooter statusBarFooter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private StackPane incidentListPanelPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private StackPane vehicleListPanelPlaceholder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidentListPanel \u003d new IncidentListPanel(logic.getFilteredIncidentList());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        incidentListPanelPlaceholder.getChildren().add(incidentListPanel.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicleListPanel \u003d new VehicleListPanel(logic.getFilteredVehicleList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicleListPanelPlaceholder.getChildren().add(vehicleListPanel.getRoot());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooter(logic.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //@@author madanalogy"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Hides Vehicle \u0026 Incident Panels."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void initPreLogin() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logic.isPersonView(true);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        personListPanelPlaceholder.getParent().setVisible(true);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        personListPanelPlaceholder.getParent().setManaged(true);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentListPanelPlaceholder.getParent().setVisible(false);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentListPanelPlaceholder.getParent().setManaged(false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        vehicleListPanelPlaceholder.getParent().setVisible(false);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        vehicleListPanelPlaceholder.getParent().setManaged(false);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Shows Vehicle \u0026 Incident Panels."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void initPostLogin() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        logic.isPersonView(false);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        personListPanelPlaceholder.getParent().setVisible(false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        personListPanelPlaceholder.getParent().setManaged(false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentListPanelPlaceholder.getParent().setVisible(true);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentListPanelPlaceholder.getParent().setManaged(true);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        vehicleListPanelPlaceholder.getParent().setVisible(true);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        vehicleListPanelPlaceholder.getParent().setManaged(true);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Swaps the Persons view for Incidents and Vehicles."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void handleLogin() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        initPostLogin();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void setStatus() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        statusBarFooter.setLoginDetails(logic.getLoggedInPerson(), logic.getLoginTime());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Swaps the Incidents and Vehicles view for Persons view."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void handleLogout() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        initPreLogin();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        setStatus();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Swaps the Incidents and Vehicles view for Persons view."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void handleSwap() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (logic.isPersonView()) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            initPostLogin();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            initPreLogin();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentListPanel getIncidentListPanel() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentListPanel;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public VehicleListPanel getVehicleListPanel() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return vehicleListPanel;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (commandResult.isLogin()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                handleLogin();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (commandResult.isLogout()) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                handleLogout();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            if (commandResult.isSwap()) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                handleSwap();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 7,
      "madanalogy": 116,
      "Yoshi275": 7,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Label username;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        username.setText(person.getUsername().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label boxLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        boxLabel.setText(\"Operators\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 4,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Label sessionDetails;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        sessionDetails.setText(\"Not Logged In\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //@@author madanalogy"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setLoginDetails(Person person, String time) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        if (person !\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            sessionDetails.setText(\"Logged in as \" + person.getUsername()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    + \" on \" + time);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            sessionDetails.setText(\"Not Logged In\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 17,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            mainWindow.initPreLogin(); // Hides vehicles and incidents"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VehicleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * An UI component that displays information of a {@code Vehicle}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class VehicleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String FXML \u003d \"VehicleListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public final Vehicle vehicle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label vehicleNumber;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label vehicleType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label district;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private Label availability;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public VehicleCard(Vehicle vehicle, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.vehicle \u003d vehicle;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleNumber.setText(vehicle.getVehicleNumber().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicleType.setText(vehicle.getVehicleType().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        district.setText(\"District: \" + String.valueOf(vehicle.getDistrict().getDistrictNum()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        availability.setText(\"Availability: \" + vehicle.getAvailability().getAvailabilityTag());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        if (!(other instanceof VehicleCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        VehicleCard card \u003d (VehicleCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u0026\u0026 vehicle.equals(card.vehicle);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 60,
      "Yoshi275": 1,
      "tirameshu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/VehicleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " * Panel containing the list of vehicles."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class VehicleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String FXML \u003d \"VehicleListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(VehicleListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private ListView\u003cVehicle\u003e vehicleListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Label boxLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public VehicleListPanel(ObservableList\u003cVehicle\u003e vehicleList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        boxLabel.setText(\"Vehicles\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicleListView.setItems(vehicleList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        vehicleListView.setCellFactory(listView -\u003e new VehicleListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Vehicle} using a {@code VehicleCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    class VehicleListViewCell extends ListCell\u003cVehicle\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        protected void updateItem(Vehicle vehicle, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            super.updateItem(vehicle, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            if (empty || vehicle \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                setGraphic(new VehicleCard(vehicle, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 46,
      "Yoshi275": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ".table-title {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 7,
      "-": 352
    }
  },
  {
    "path": "src/main/resources/view/IncidentListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" fillHeight\u003d\"false\" prefHeight\u003d\"150.0\" prefWidth\u003d\"150.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "   \u003cGridPane prefHeight\u003d\"150.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "       \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "       \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "         \u003cHBox GridPane.halignment\u003d\"LEFT\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                   \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$id\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets left\u003d\"2.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                   \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                   \u003cLabel fx:id\u003d\"incidentId\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$incidentId\" underline\u003d\"true\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cLabel fx:id\u003d\"status\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "         \u003cGridPane prefHeight\u003d\"100.0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "             \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "             \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "             \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "             \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cLabel fx:id\u003d\"operator\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"20.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$operator\" textAlignment\u003d\"RIGHT\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                  \u003cLabel fx:id\u003d\"incidentDistrict\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"20.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$incidentLocation\" textAlignment\u003d\"RIGHT\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    \u003cLabel fx:id\u003d\"vehicle\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"20.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$callerNumber\" textAlignment\u003d\"RIGHT\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                  \u003cLabel fx:id\u003d\"callerNumber\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"20.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$callerNumber\" textAlignment\u003d\"RIGHT\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"3\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                  \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "         \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cLabel fx:id\u003d\"dateTime\" alignment\u003d\"TOP_RIGHT\" contentDisplay\u003d\"RIGHT\" nodeOrientation\u003d\"LEFT_TO_RIGHT\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$dateTime\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"RIGHT\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003cInsets right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" GridPane.halignment\u003d\"LEFT\" GridPane.rowIndex\u003d\"1\" GridPane.valignment\u003d\"TOP\"\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "   \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 65,
      "Yoshi275": 15,
      "tirameshu": 7
    }
  },
  {
    "path": "src/main/resources/view/IncidentListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"2160\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    \u003cLabel fx:id\u003d\"boxLabel\" styleClass\u003d\"table-title\" text\u003d\"\\$Box Label\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    \u003cListView fx:id\u003d\"incidentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "Yoshi275": 9
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"600\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003cSplitPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"600\" prefWidth\u003d\"600\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        \u003cSplitPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "          \u003cVBox fx:id\u003d\"incidentList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" prefWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            \u003cStackPane fx:id\u003d\"incidentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "          \u003cVBox fx:id\u003d\"vehicleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"300\" prefWidth\u003d\"300\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cStackPane fx:id\u003d\"vehicleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 7,
      "madanalogy": 6,
      "Yoshi275": 6,
      "-": 59
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "      \u003cLabel fx:id\u003d\"username\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$username\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"2160\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "  \u003cLabel fx:id\u003d\"boxLabel\" styleClass\u003d\"table-title\" text\u003d\"\\$Box Label\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "Yoshi275": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" halignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    \u003cLabel fx:id\u003d\"sessionDetails\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    \u003cLabel fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/VehicleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003cLabel fx:id\u003d\"vehicleType\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                \u003cLabel fx:id\u003d\"vehicleNumber\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cLabel fx:id\u003d\"district\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$district\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            \u003cLabel fx:id\u003d\"availability\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$availability\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 38
    }
  },
  {
    "path": "src/main/resources/view/VehicleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" prefHeight\u003d\"2160\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    \u003cLabel fx:id\u003d\"boxLabel\" styleClass\u003d\"table-title\" text\u003d\"\\$Box Label\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    \u003cListView fx:id\u003d\"vehicleListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 7,
      "madanalogy": 1,
      "Yoshi275": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.ListPersonsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.storage.JsonIncidentManagerStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonIncidentManagerStorage incidentManagerStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new JsonIncidentManagerStorage(temporaryFolder.resolve(\"incidentManager.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(incidentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(AMY); // Added to simulate a logged in person"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String deleteCommand \u003d \"delete-a 9\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String listCommand \u003d ListPersonsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertCommandSuccess(listCommand, ListPersonsCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Setup LogicManager with JsonIncidentManagerIoExceptionThrowingStub"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonIncidentManagerStorage incidentManagerStorage \u003d new JsonIncidentManagerIoExceptionThrowingStub("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionIncidentManager.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        StorageManager storage \u003d new StorageManager(incidentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_AMY + PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static class JsonIncidentManagerIoExceptionThrowingStub extends JsonIncidentManagerStorage {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        private JsonIncidentManagerIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void saveIncidentManager(ReadOnlyIncidentManager incidentManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 18,
      "Yoshi275": 3,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(AMY); // Added to simulate a logged in person"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person personInList \u003d model.getIncidentManager().getPersonList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").withUsername(\"alice\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").withUsername(\"bob\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setSession(Person person) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Person getLoggedInPerson() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public String getLoginTime() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public boolean isLoggedIn() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public Path getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setIncidentManagerFilePath(Path incidentManagerFilePath) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public void setIncidentManager(ReadOnlyIncidentManager newData) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public ReadOnlyIncidentManager getIncidentManager() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public boolean hasIncident(Incident incident) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public void addIncident(Incident incident) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public void removeIncident(Incident incident) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void updateFilteredIncidentList(Predicate\u003cIncident\u003e predicate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public boolean hasVehicle(Vehicle vehicle) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public boolean hasVNum(String vNum) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setVehicle(Vehicle target, Vehicle editedVehicle) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void addVehicle(Vehicle toAdd) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void deleteVehicle(Vehicle toDelete) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        public void updateFilteredVehicleList(Predicate\u003cVehicle\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        public ObservableList\u003cIncident\u003e getFilteredIncidentList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        public void setIncident(Incident target, Incident editedIncident) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public ObservableList\u003cVehicle\u003e getFilteredVehicleList() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public boolean ifAnyIncidentsSatisfyPredicate(Predicate\u003cIncident\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        public ReadOnlyIncidentManager getIncidentManager() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            return new IncidentManager();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 22,
      "hellopanda128": 33,
      "madanalogy": 30,
      "Yoshi275": 11,
      "-": 184,
      "tirameshu": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_emptyIncidentManager_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_nonEmptyIncidentManager_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel.setIncidentManager(new IncidentManager());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 11,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.DescriptionKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.UpdatePersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALID_USERNAME_AMY \u003d \"SpecOps\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALID_USERNAME_BOB \u003d \"BlackOps\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALID_PASSWORD_AMY \u003d \"passw0rd\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALID_PASSWORD_BOB \u003d \"pa5sword\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String VALID_TAG_ADMIN \u003d \"admin\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String USERNAME_DESC_AMY \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String USERNAME_DESC_BOB \u003d \" \" + PREFIX_USERNAME + VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String PASSWORD_DESC_AMY \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String PASSWORD_DESC_BOB \u003d \" \" + PREFIX_PASSWORD + VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String INVALID_USERNAME_DESC \u003d \" \" + PREFIX_USERNAME + \" \"; // empty string not allowed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String INVALID_PASSWORD_DESC \u003d \" \" + PREFIX_PASSWORD + \" \"; // empty string not allowed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final UpdateCommand.UpdatePersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final UpdateCommand.UpdatePersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        DESC_AMY \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        DESC_BOB \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_BOB).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager expectedIncidentManager \u003d new IncidentManager(actualModel.getIncidentManager());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(expectedIncidentManager, actualModel.getIncidentManager());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the incident at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static void showIncidentAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredIncidentList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Incident incident \u003d model.getFilteredIncidentList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String[] descriptionArr \u003d incident.getDesc().toString().split(\" \", 2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        final Description description \u003d new Description(descriptionArr[0]);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        model.updateFilteredIncidentList(new DescriptionKeywordsPredicate(description));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertEquals(2, model.getFilteredIncidentList().size());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 1,
      "madanalogy": 28,
      "Yoshi275": 16,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(AMY); // Added to simulate a logged in person"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getIncidentManager().getPersonList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_ENTITY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 11,
      "Yoshi275": 12,
      "-": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditIncidentCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/*import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;*/"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showIncidentAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.testutil.IncidentBuilder.DEFAULT_CALLER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.testutil.IncidentBuilder.DEFAULT_DISTRICT;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.testutil.IncidentBuilder.DEFAULT_ID;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.testutil.TypicalEntities.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand.EditIncident;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.testutil.EditIncidentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.testutil.IncidentBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import javax.swing.*;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import javax.swing.table.DefaultTableCellRenderer;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import java.awt.*;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "//import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "//import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "//import seedu.address.testutil.EditIncidentBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "//import seedu.address.testutil.IncidentBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditIncidentCommandTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident editedIncident \u003d new IncidentBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editor \u003d new EditIncidentBuilder(editedIncident).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(INDEX_FIRST_ENTITY, editor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncidentCommand.MESSAGE_EDIT_INCIDENT_SUCCESS, editedIncident);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        expectedModel.setIncident(model.getFilteredIncidentList().get(0), editedIncident);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandSuccess(editIncidentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Index indexLastIncident \u003d Index.fromOneBased(model.getFilteredIncidentList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident lastIncident \u003d model.getFilteredIncidentList().get(indexLastIncident.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        IncidentBuilder incidentBuilder \u003d new IncidentBuilder(lastIncident);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident editedIncident \u003d incidentBuilder.withCaller(DEFAULT_CALLER).withDistrict(DEFAULT_DISTRICT)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                .withId(DEFAULT_ID).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editor \u003d new EditIncidentBuilder().withCaller(DEFAULT_CALLER)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                .withDistrict(DEFAULT_DISTRICT).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(indexLastIncident, editor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncidentCommand.MESSAGE_EDIT_INCIDENT_SUCCESS, editedIncident);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        expectedModel.setIncident(lastIncident, editedIncident);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandSuccess(editIncidentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident incidentToEdit \u003d model.getFilteredIncidentList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editIncident \u003d new EditIncident();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Description updateDesc \u003d new Description(incidentToEdit.getDesc().toString() + \"test\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editIncident.setDesc(updateDesc);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(INDEX_FIRST_ENTITY, editIncident);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident editedIncident \u003d new Incident(incidentToEdit.getOperator(), incidentToEdit.getDistrict(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                incidentToEdit.getDateTime(), incidentToEdit.getIncidentId(), incidentToEdit.getCallerNumber(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                updateDesc, incidentToEdit.getStatus(), incidentToEdit.getVehicle());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncidentCommand.MESSAGE_EDIT_INCIDENT_SUCCESS, editedIncident);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandSuccess(editIncidentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /* @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        showIncidentAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident incidentInFilteredList \u003d model.getFilteredIncidentList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident editedIncident \u003d new IncidentBuilder(incidentInFilteredList).withCaller(DEFAULT_CALLER).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(INDEX_FIRST_ENTITY,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                new EditIncidentBuilder().withCaller(DEFAULT_CALLER).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        String expectedMessage \u003d String.format(EditIncidentCommand.MESSAGE_EDIT_INCIDENT_SUCCESS, editedIncident);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        expectedModel.setIncident(model.getFilteredIncidentList().get(0), editedIncident);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandSuccess(editIncidentCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     }*/"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void execute_duplicateIncidentUnfilteredList_failure() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident firstIncident \u003d model.getFilteredIncidentList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editor \u003d new EditIncidentBuilder(firstIncident).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(INDEX_SECOND_ENTITY, editor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandFailure(editIncidentCommand, model, EditIncidentCommand.MESSAGE_DUPLICATE_INCIDENT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void execute_duplicateIncidentFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        showIncidentAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        // edit incident in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        Incident incidentInList \u003d model.getIncidentManager().getIncidentList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(INDEX_SECOND_ENTITY,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                new EditIncidentBuilder(incidentInList).build());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandFailure(editIncidentCommand, model, EditIncidentCommand.MESSAGE_DUPLICATE_INCIDENT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void execute_invalidIncidentIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        //EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        //EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editor \u003d new EditIncidentBuilder().withCaller(DEFAULT_CALLER).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncidentCommand editIncidentCommand \u003d new EditIncidentCommand(outOfBoundIndex, editor);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandFailure(editIncidentCommand, model, Messages.MESSAGE_INVALID_INCIDENT_INDEX);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public void execute_invalidIncidentIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        showIncidentAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getIncidentList().size());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "                new EditIncidentBuilder().withCaller(DEFAULT_CALLER).build());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_INCIDENT_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ENTITY, DESC_AMY);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_ENTITY, )"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        EditIncident editor \u003d new EditIncident();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_ENTITY, copyDescriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_ENTITY, DESC_AMY)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_ENTITY, DESC_BOB)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 3,
      "hellopanda128": 112,
      "madanalogy": 6,
      "Yoshi275": 5,
      "-": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FillCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class FillCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindPersonsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_PERSON_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindPersonsCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class FindPersonsCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand findFirstCommand \u003d new FindPersonsCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand findSecondCommand \u003d new FindPersonsCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand findFirstCommandCopy \u003d new FindPersonsCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_PERSON_FOUND;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand command \u003d new FindPersonsCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand command \u003d new FindPersonsCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 10,
      "Yoshi275": 2,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindVehiclesCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_NO_VEHICLES_FOUND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_VEHICLES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.testutil.TypicalVehicles.V1;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.testutil.TypicalVehicles.V2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.testutil.TypicalVehicles.V3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.testutil.TypicalVehicles.V4;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static seedu.address.testutil.TypicalVehicles.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.DistrictKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VNumKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VTypeKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindVehiclesCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class FindVehiclesCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        DistrictKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new DistrictKeywordsPredicate(List.of(new District(1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        DistrictKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new DistrictKeywordsPredicate(List.of(new District(2)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        FindVehiclesCommand findFirstCommand \u003d new FindVehiclesCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        FindVehiclesCommand findSecondCommand \u003d new FindVehiclesCommand(secondPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        FindVehiclesCommand findFirstCommandCopy \u003d new FindVehiclesCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different district -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void execute_zeroKeywords_noVehiclesFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        String expectedMessage \u003d MESSAGE_NO_VEHICLES_FOUND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        DistrictKeywordsPredicate predicate \u003d prepareDistrictPredicate(\" \");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        FindVehiclesCommand command \u003d new FindVehiclesCommand(predicate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        expectedModel.updateFilteredVehicleList(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredVehicleList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void execute_singleKeyword_multipleVehiclesFound() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_VEHICLES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        VTypeKeywordsPredicate vTypePredicate \u003d prepareVTypePredicate(\"Ambulance\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        Command command \u003d new FindVehiclesCommand(vTypePredicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        expectedModel.updateFilteredVehicleList(vTypePredicate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertEquals(Arrays.asList(V1, V2), model.getFilteredVehicleList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_VEHICLES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        VNumKeywordsPredicate vNumPredicate \u003d prepareVNumPredicate(\"2\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        command \u003d new FindVehiclesCommand(vNumPredicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        expectedModel.updateFilteredVehicleList(vNumPredicate);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertEquals(Arrays.asList(V1, V2, V3), model.getFilteredVehicleList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void execute_multipleKeywords_multipleVehiclesFound() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_VEHICLES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        DistrictKeywordsPredicate dPredicate \u003d prepareDistrictPredicate(\"1 2\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        FindVehiclesCommand command \u003d new FindVehiclesCommand(dPredicate);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        expectedModel.updateFilteredVehicleList(dPredicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertEquals(Arrays.asList(V1, V4), model.getFilteredVehicleList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses {@code userInput} into a {@code DistrictKeywordsPredicate}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private DistrictKeywordsPredicate prepareDistrictPredicate(String userInput) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        List\u003cString\u003e splittedD \u003d Arrays.asList(userInput.split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        List\u003cDistrict\u003e districts \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        for (String s: splittedD) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            districts.add(new District(Integer.valueOf(s)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new DistrictKeywordsPredicate(districts);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses {@code userInput} into a {@code VTypeKeywordsPredicate}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private VTypeKeywordsPredicate prepareVTypePredicate(String userInput) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        VehicleType vType \u003d new VehicleType(userInput.trim());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new VTypeKeywordsPredicate(vType);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Parses {@code userInput} into a {@code VTypeKeywordsPredicate}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private VNumKeywordsPredicate prepareVNumPredicate(String userInput) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new VNumKeywordsPredicate(userInput.trim());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 2,
      "tirameshu": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListIncidentsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showIncidentAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INCIDENTS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalEntities.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListIncidentCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class ListIncidentsCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertCommandSuccess(new ListIncidentsCommand(PREDICATE_SHOW_ALL_INCIDENTS), model,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                Messages.MESSAGE_ALL_INCIDENTS_LISTED, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        showIncidentAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertCommandSuccess(new ListIncidentsCommand(PREDICATE_SHOW_ALL_INCIDENTS), model,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                Messages.MESSAGE_ALL_INCIDENTS_LISTED, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 3,
      "madanalogy": 3,
      "Yoshi275": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListPersonsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListPersonsCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class ListPersonsCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertCommandSuccess(new ListPersonsCommand(), model, ListPersonsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertCommandSuccess(new ListPersonsCommand(), model, ListPersonsCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "Yoshi275": 6,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NewCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class NewCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // control"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        NewCommand nc1 \u003d new NewCommand(new District(1), true, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // differ by district"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        NewCommand nc2 \u003d new NewCommand(new District(2), true, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // differ by auto, no index specified"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        NewCommand nc3 \u003d new NewCommand(new District(20), false, -1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // differ by auto, index \u003d 1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        NewCommand nc4 \u003d new NewCommand(new District(20), false, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertTrue(nc1.equals(nc1));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different district -\u003e return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(nc1.equals(nc2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different auto, index not specified"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(nc2.equals(nc3));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different by auto, index specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(nc2.equals(nc4));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different district and auto, no index specified -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(nc1.equals(nc3));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        // different district, isAuto and indexOfV -\u003e return false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        assertFalse(nc1.equals(nc4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SubmitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class SubmitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdatePersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.UpdatePersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * Contains integration tests and unit tests for UpdateCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdateCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalIncidentManager(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        model.setSession(AMY); // Added to simulate a logged in person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder(updatedPerson).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_ENTITY, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_PERSON_SUCCESS, updatedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), updatedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person updatedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_PERSON_SUCCESS, updatedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel.setPerson(lastPerson, updatedPerson);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_ENTITY, new UpdatePersonDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person updatedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_PERSON_SUCCESS, updatedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person updatedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_ENTITY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new UpdatePersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(UpdateCommand.MESSAGE_UPDATE_PERSON_SUCCESS, updatedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new IncidentManager(model.getIncidentManager()), new UserPrefs());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), updatedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandSuccess(updateCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_SECOND_ENTITY, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // update person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person personInList \u003d model.getIncidentManager().getPersonList().get(INDEX_SECOND_ENTITY.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(INDEX_FIRST_ENTITY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new UpdatePersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandFailure(updateCommand, model, UpdateCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandFailure(updateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Update filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_ENTITY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getIncidentManager().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand updateCommand \u003d new UpdateCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new UpdatePersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertCommandFailure(updateCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        final UpdateCommand standardCommand \u003d new UpdateCommand(INDEX_FIRST_ENTITY, DESC_AMY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor copyDescriptor \u003d new UpdatePersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand commandWithSameValues \u003d new UpdateCommand(INDEX_FIRST_ENTITY, copyDescriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_SECOND_ENTITY, DESC_AMY)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(standardCommand.equals(new UpdateCommand(INDEX_FIRST_ENTITY, DESC_BOB)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 179
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UpdatePersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdatePersonDescriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.UpdatePersonDescriptorBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdatePersonDescriptorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptorWithSameValues \u003d new UpdatePersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY).withUsername(VALID_USERNAME_BOB).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different password -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY).withPassword(VALID_PASSWORD_BOB).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        updatedAmy \u003d new UpdatePersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(DESC_AMY.equals(updatedAmy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 23,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // multiple usernames - last username accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_AMY + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // multiple passwords - last password accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_AMY + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_ADMIN, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_AMY + PASSWORD_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // missing username prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + VALID_USERNAME_BOB + PASSWORD_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // missing password prefix"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + VALID_PASSWORD_BOB, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + VALID_USERNAME_BOB + VALID_PASSWORD_BOB, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + INVALID_USERNAME_DESC + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid password"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + INVALID_PASSWORD_DESC"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_ADMIN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_BOB + PASSWORD_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 70,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_ENTITY));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "*/"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_USERNAME_DESC, Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PASSWORD_DESC, Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_AMY + PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // username"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withUsername(VALID_USERNAME_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // password"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPassword(VALID_PASSWORD_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_ADMIN, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 4,
      "madanalogy": 35,
      "Yoshi275": 9,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FillCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class FillCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindIncidentsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.SEARCH_PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.FindIncidentsCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.DescriptionKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "public class FindIncidentsCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    private FindIncidentsCommandParser parser \u003d new FindIncidentsCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                FindIncidentsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        List\u003cPredicate\u003e predicateArr \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        predicateArr.add(new DescriptionKeywordsPredicate(new Description(\"test\")));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        FindIncidentsCommand expectedSearchIncidentsCommand \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "                new FindIncidentsCommand(predicateArr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertParseSuccess(parser, \" \" + SEARCH_PREFIX_DESCRIPTION + \"test\", expectedSearchIncidentsCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindPersonsCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.FindPersonsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class FindPersonsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private FindPersonsCommandParser parser \u003d new FindPersonsCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                FindPersonsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand expectedFindPersonsCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new FindPersonsCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonsCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonsCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 8,
      "Yoshi275": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/IncidentManagerParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.IncidentManagerParser.ACCESS_CONTROL_MESSAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.IncidentManagerParser.GUI_SWAP_MESSAGE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "// import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.FindPersonsCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.ListIncidentsCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.logic.commands.ListPersonsCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.SwapCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.testutil.EditIncidentBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.testutil.IncidentUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.UpdatePersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class IncidentManagerParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final IncidentManagerParser parser \u003d new IncidentManagerParser(true, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //@@author madanalogy"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parser.setPersonView(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parser.setLoggedIn(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_notLoggedIn_access() throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parser.setLoggedIn(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Valid access"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parseCommand(HelpCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Invalid access"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class, ACCESS_CONTROL_MESSAGE, () -\u003e parser.parseCommand(SwapCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_notPersonView_access() throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parser.setPersonView(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Valid access"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertDoesNotThrow(() -\u003e parser.parseCommand(ListIncidentsCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Invalid access"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                GUI_SWAP_MESSAGE, () -\u003e parser.parseCommand(ListPersonsCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_update() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand.UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand command \u003d (UpdateCommand) parser.parseCommand(UpdateCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + INDEX_FIRST_ENTITY.getOneBased() + \" \" + PersonUtil.getUpdatePersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new UpdateCommand(INDEX_FIRST_ENTITY, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_ENTITY.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_ENTITY), command);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        parser.setPersonView(false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        EditIncidentCommand.EditIncident editor \u003d new EditIncidentBuilder().build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        EditIncidentCommand command \u003d (EditIncidentCommand) parser.parseCommand(EditIncidentCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + INDEX_FIRST_ENTITY.getOneBased() + \" \" + IncidentUtil.getEditIncidentDetails(editor));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new EditIncidentCommand(INDEX_FIRST_ENTITY, editor), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        FindPersonsCommand command \u003d (FindPersonsCommand) parser.parseCommand("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                FindPersonsCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new FindPersonsCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ListPersonsCommand.COMMAND_WORD) instanceof ListPersonsCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(parser.parseCommand(ListPersonsCommand.COMMAND_WORD + \" 3\") instanceof ListPersonsCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 3,
      "madanalogy": 119,
      "Yoshi275": 6,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"Big Daddy\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"p@ss word\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String VALID_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String VALID_USERNAME \u003d \"BigDaddy\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String VALID_PASSWORD \u003d \"pa55word!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTITY, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        assertEquals(INDEX_FIRST_ENTITY, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseUsername_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseUsername((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseUsername_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseUsername(INVALID_USERNAME));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseUsername_validValueWithoutWhitespace_returnsUsername() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Username expectedUsername \u003d new Username(VALID_USERNAME);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(expectedUsername, ParserUtil.parseUsername(VALID_USERNAME));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parseUsername_validValueWithWhitespace_returnsTrimmedUsername() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String usernameWithWhitespace \u003d WHITESPACE + VALID_USERNAME + WHITESPACE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Username expectedUsername \u003d new Username(VALID_USERNAME);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(expectedUsername, ParserUtil.parseUsername(usernameWithWhitespace));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parsePassword_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePassword((String) null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parsePassword_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePassword(INVALID_PASSWORD));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parsePassword_validValueWithoutWhitespace_returnsPassword() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Password expectedPassword \u003d new Password(VALID_PASSWORD);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(expectedPassword, ParserUtil.parsePassword(VALID_PASSWORD));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parsePassword_validValueWithWhitespace_returnsTrimmedPassword() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String passwordWithWhitespace \u003d WHITESPACE + VALID_PASSWORD + WHITESPACE;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Password expectedPassword \u003d new Password(VALID_PASSWORD);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(expectedPassword, ParserUtil.parsePassword(passwordWithWhitespace));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 41,
      "Yoshi275": 3,
      "-": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SubmitCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "public class SubmitCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/UpdateCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PASSWORD_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_USERNAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdatePersonDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.UpdatePersonDescriptorBuilder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdateCommandParserTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, UpdateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private UpdateCommandParser parser \u003d new UpdateCommandParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        //assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\", UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"\", UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_USERNAME_DESC, Username.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PASSWORD_DESC, Password.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being updated,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ENTITY;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + USERNAME_DESC_AMY + PASSWORD_DESC_BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // username"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + USERNAME_DESC_AMY;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withUsername(VALID_USERNAME_AMY).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // password"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PASSWORD_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withPassword(VALID_PASSWORD_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_ADMIN, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ENTITY;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ENTITY;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdatePersonDescriptor descriptor \u003d new UpdatePersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        UpdateCommand expectedCommand \u003d new UpdateCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 223
    }
  },
  {
    "path": "src/test/java/seedu/address/model/IncidentManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class IncidentManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private final IncidentManager incidentManager \u003d new IncidentManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(Collections.emptyList(), incidentManager.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e incidentManager.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void resetData_withValidReadOnlyIncidentManager_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager newData \u003d getTypicalIncidentManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(newData, incidentManager);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManagerStub newData \u003d new IncidentManagerStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e incidentManager.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e incidentManager.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void hasPerson_personNotInIncidentManager_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(incidentManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void hasPerson_personInIncidentManager_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(incidentManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInIncidentManager_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(incidentManager.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e incidentManager.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * A stub ReadOnlyIncidentManager whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static class IncidentManagerStub implements ReadOnlyIncidentManager {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        private final ObservableList\u003cIncident\u003e incidents \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        private final ObservableList\u003cVehicle\u003e vehicles \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManagerStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        public ObservableList\u003cIncident\u003e getIncidentList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "            return incidents;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        public ObservableList\u003cVehicle\u003e getVehicleList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            return vehicles;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 7,
      "madanalogy": 26,
      "Yoshi275": 7,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.IncidentManagerBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new IncidentManager(), new IncidentManager(modelManager.getIncidentManager()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userPrefs.setIncidentManagerFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userPrefs.setIncidentManagerFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManagerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setIncidentManagerFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManagerFilePath_validPath_setsIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        modelManager.setIncidentManagerFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(path, modelManager.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void hasPerson_personNotInIncidentManager_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void hasPerson_personInIncidentManager_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager incidentManager \u003d new IncidentManagerBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager differentIncidentManager \u003d new IncidentManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        modelManager \u003d new ModelManager(incidentManager, userPrefs);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(incidentManager, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different incidentManager -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentIncidentManager, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(incidentManager, userPrefs)));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        differentUserPrefs.setIncidentManagerFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(incidentManager, differentUserPrefs)));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    //@@author madanalogy"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void getLoggedInPerson_session_equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Same person in session equals"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        modelManager.setSession(new PersonBuilder().build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(new PersonBuilder().build(), modelManager.getLoggedInPerson());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Different person in session not equals"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertNotEquals(new PersonBuilder().withUsername(\"something\").build(), modelManager.getLoggedInPerson());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Person in session not equals null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertNotEquals(null, modelManager.getLoggedInPerson());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Null in session equals null"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        modelManager.setSession(null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertNull(modelManager.getLoggedInPerson());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 42,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void setIncidentManagerFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setIncidentManagerFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/incident/IncidentDateTimeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "package seedu.address.model.incident;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "class IncidentDateTimeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final String VALID_DATETIME \u003d \"2016-12-20T14:30:40\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void constructorValidDateTimeSuccess() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        IncidentDateTime validDateTime \u003d new IncidentDateTime(\"2016-12-20T14:30:40\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertEquals(VALID_DATETIME, validDateTime.toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void isValidIncidentDateTime() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // null incident dateTime"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e IncidentDateTime.isValidIncidentDateTimeFormat(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // invalid dateTime"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"   \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"hello\")); // alphabets only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"h1e2l3l4o5\")); // alphanumeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"12345678\")); // all numbers but wrong format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // wrong number of digits for day"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-64T14:30:40\")); // more than 31"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-00T14:30:40\")); // 0"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-6T14:30:40\")); // 1 digit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-642T14:30:40\")); // more than 2 digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // wrong number of digits for hour"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T35:30:40\")); // more than 24"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T1:30:40\")); // 1 digit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T143:30:40\")); // more than 2 digits"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // wrong number of digits for minute"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:300:40\")); // more than 2 digits"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:65:40\")); // more than 60"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:3:40\")); // 1 digit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // wrong number of digits for second"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:30:400\")); // more than 2 digits"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:30:75\")); // more than 60"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:30:4\")); // 1 digit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"20161220T14:30:40\")); // no hyphens"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T143040\")); // no colons"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-2014:30:40\")); // no T"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertFalse(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20S14:30:40\")); // wrong letter"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        // valid dateTime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-12-20T14:30:40\")); // valid date time"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(IncidentDateTime.isValidIncidentDateTimeFormat(\"2016-01-04T11:00:00\")); // valid date time"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        assertTrue(IncidentDateTime.isValidIncidentDateTimeFormat(\"2029-12-04T11:00:00\")); // future date time"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/LoginCredentialsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "class LoginCredentialsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        LoginCredentialsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new LoginCredentialsPredicate(new Username(VALID_USERNAME_AMY), new Password(VALID_PASSWORD_AMY));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        LoginCredentialsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new LoginCredentialsPredicate(new Username(VALID_USERNAME_BOB), new Password(VALID_PASSWORD_BOB));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        LoginCredentialsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new LoginCredentialsPredicate(new Username(VALID_USERNAME_AMY), new Password(VALID_PASSWORD_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void test_credentialsMatch_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        LoginCredentialsPredicate predicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new LoginCredentialsPredicate(new Username(VALID_USERNAME_AMY), new Password(VALID_PASSWORD_AMY));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_AMY).build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void test_credentialsDifferent_returnsFalse() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        LoginCredentialsPredicate predicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new LoginCredentialsPredicate(new Username(VALID_USERNAME_AMY), new Password(VALID_PASSWORD_AMY));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username and password"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_BOB).withPassword(VALID_PASSWORD_BOB).build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_BOB).withPassword(VALID_PASSWORD_AMY).build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different password"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_BOB).build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Keywords match phone, email, and password, but does not match name or username"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"pass\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345678\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .withEmail(\"alice@email.com\").withUsername(\"User1\").withPassword(\"password\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 4,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PasswordTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "class PasswordTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Password(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void constructor_invalidPassword_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String invalidPassword \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Password(invalidPassword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void isValidPassword() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Password.isValidPassword(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        //invalid password"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Password.isValidPassword(\"test word\")); // contains space"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Password.isValidPassword(\"wh\\\\atthe\")); // contains non approved special character"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Password.isValidPassword(\"passw\")); // five characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        //valid password"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Password.isValidPassword(\"password\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Password.isValidPassword(\"1234556\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Password.isValidPassword(\"pa$$w0rd\")); // contains approved special characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Password.isValidPassword(\"pas$w0\")); // six characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username, same name -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withUsername(VALID_USERNAME_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same username , different name-\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username , different name-\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withUsername(VALID_USERNAME_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different username -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withUsername(VALID_USERNAME_BOB).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 13,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"1234567\")); // less than 8 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"123456789\")); // more than 8 numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"12345678\")); // exactly 8 numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UsernameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "class UsernameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void constructor_invalidUsername_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String invalidUsername \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Username(invalidUsername));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    void isValidUsername() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Username.isValidUsername(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // invalid username"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"\")); // empty string\\"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"agent amazing\")); // contains space"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"ag\")); // less than 3 characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"ab-\")); // ends with non alphanumeric"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"-ab\")); // starts with non alphanumeric"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(Username.isValidUsername(\"a#2\")); // contains non approved characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // valid username"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"A-2\")); // three characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"agentSmith\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"Agent10\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"Capital-Tan\")); // with capital letters and dash"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(Username.isValidUsername(\"David.Roger-Jackson.Ray-Jr.2nd\")); // long usernames"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/model/tag/TagContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "class TagContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicate \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        TagContainsKeywordsPredicate secondPredicate \u003d new TagContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        TagContainsKeywordsPredicate firstPredicateCopy \u003d new TagContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Admin\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Admin\", \"Team-1\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Admin\", \"Team-1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Admin\", \"Team-1\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"aDmIn\", \"tEam-1\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Admin\", \"Team-1\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        TagContainsKeywordsPredicate predicate \u003d new TagContainsKeywordsPredicate(Arrays.asList(\"Admin\", \"Team-1\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"Team-1\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        predicate \u003d new TagContainsKeywordsPredicate(Collections.singletonList(\"Team-2\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"Team-1\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String INVALID_USERNAME \u003d \"xXsl@y3rXx\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String INVALID_PASSWORD \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String VALID_USERNAME \u003d BENSON.getUsername().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final String VALID_PASSWORD \u003d BENSON.getPassword().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_invalidUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                INVALID_USERNAME, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d Username.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_nullUsername_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                null, VALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Username.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_invalidPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, INVALID_PASSWORD, VALID_TAGS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d Password.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_nullPassword_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, null, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Password.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                VALID_USERNAME, VALID_PASSWORD, invalidTags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 44,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonIncidentManagerStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class JsonIncidentManagerStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonIncidentManagerStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void readIncidentManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readIncidentManager(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private java.util.Optional\u003cReadOnlyIncidentManager\u003e readIncidentManager(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new JsonIncidentManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                .readIncidentManager(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertFalse(readIncidentManager(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIncidentManager(\"notJsonFormatIncidentManager.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void readIncidentManager_invalidPersonIncidentManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readIncidentManager(\"invalidPersonIncidentManager.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void readIncidentManager_invalidAndValidPersonIncidentManager_throwDataConversionException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                DataConversionException.class, () -\u003e readIncidentManager(\"invalidAndValidPersonIncidentManager.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void readAndSaveIncidentManager_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempIncidentManager.json\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager original \u003d getTypicalIncidentManager();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonIncidentManagerStorage jsonIncidentManagerStorage \u003d new JsonIncidentManagerStorage(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        jsonIncidentManagerStorage.saveIncidentManager(original, filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ReadOnlyIncidentManager readBack \u003d jsonIncidentManagerStorage.readIncidentManager(filePath).get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(original, new IncidentManager(readBack));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        jsonIncidentManagerStorage.saveIncidentManager(original, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        readBack \u003d jsonIncidentManagerStorage.readIncidentManager(filePath).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(original, new IncidentManager(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        jsonIncidentManagerStorage.saveIncidentManager(original); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        readBack \u003d jsonIncidentManagerStorage.readIncidentManager().get(); // file path not specified"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(original, new IncidentManager(readBack));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager_nullIncidentManager_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIncidentManager(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Saves {@code incidentManager} at the specified {@code filePath}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private void saveIncidentManager(ReadOnlyIncidentManager incidentManager, String filePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            new JsonIncidentManagerStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                    .saveIncidentManager(incidentManager, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void saveIncidentManager_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveIncidentManager(new IncidentManager(), null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 39,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableIncidentManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/*import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.testutil.TypicalEntities;*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class JsonSerializableIncidentManagerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableIncidentManagerTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path TYPICAL_ENTITIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalEntitiesIncidentManager.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path INVALID_ENTITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidEntityIncidentManager.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonIncidentManager.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path DUPLICATE_ENTITY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateEntityIncidentManager.json\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonIncidentManager.json\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public void toModelType_typicalEntitiesFile_success() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonSerializableIncidentManager dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ENTITIES_FILE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                JsonSerializableIncidentManager.class).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager incidentManagerFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager typicalPersonsIncidentManager \u003d TypicalEntities.getTypicalIncidentManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(incidentManagerFromFile, typicalPersonsIncidentManager);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonSerializableIncidentManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                JsonSerializableIncidentManager.class).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonSerializableIncidentManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                JsonSerializableIncidentManager.class).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableIncidentManager.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void toModelType_invalidEntityFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonSerializableIncidentManager dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ENTITY_FILE,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                JsonSerializableIncidentManager.class).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public void toModelType_duplicateEntities_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonSerializableIncidentManager dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ENTITY_FILE,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                JsonSerializableIncidentManager.class).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableIncidentManager.MESSAGE_DUPLICATE_VEHICLE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 2,
      "hellopanda128": 7,
      "madanalogy": 33,
      "Yoshi275": 1,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        userPrefs.setIncidentManagerFilePath(Paths.get(\"incidentManager.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalIncidentManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.ReadOnlyIncidentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        JsonIncidentManagerStorage incidentManagerStorage \u003d new JsonIncidentManagerStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        storageManager \u003d new StorageManager(incidentManagerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void incidentManagerReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * {@link JsonIncidentManagerStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonIncidentManagerStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager original \u003d getTypicalIncidentManager();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        storageManager.saveIncidentManager(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        ReadOnlyIncidentManager retrieved \u003d storageManager.readIncidentManager().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertEquals(original, new IncidentManager(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public void getIncidentManagerFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        assertNotNull(storageManager.getIncidentManagerFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 14,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditIncidentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand.EditIncident;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * A utility class to help with the building of EditIncident objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class EditIncidentBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private EditIncidentCommand.EditIncident editor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor \u003d new EditIncidentCommand.EditIncident();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder(EditIncidentCommand.EditIncident editor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.editor \u003d new EditIncidentCommand.EditIncident(editor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns an {@code EditIncident} with fields containing {@code incident}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder (Incident incident) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor \u003d new EditIncidentCommand.EditIncident();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setDistrict(incident.getDistrict());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setCaller(incident.getCallerNumber());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setDesc(incident.getDesc());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code District} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder withDistrict(String district) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setDistrict(new District(Integer.parseInt(district)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code Description} of the {@code EditIncidentBuilder} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder withDesc(String description) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setDesc(new Description(description));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code CallerNumber} of the {@code EditIncidentBuilder} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncidentBuilder withCaller(String callerNumber) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.setCaller(new CallerNumber(callerNumber));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public EditIncident build() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return editor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hellopanda128": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IncidentBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.model.incident.Incident.getTagSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.Incident.Status;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * A utility class to help with the building of Incident objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class IncidentBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String DEFAULT_DISTRICT \u003d \"1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String DEFAULT_CALLER \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String DEFAULT_DATETIME \u003d \"2016-12-02T14:30:40\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final String DEFAULT_DESC \u003d \"This is an incident description.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public static final String DEFAULT_ID \u003d \"1220160001\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static final Person DEFAULT_PERSON \u003d new Person(new Name(\"Alex Yeoh\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            new Phone(\"87438807\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            new Email(\"alexyeoh@example.com\"), getTagSet(\"friends\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            new Username(\"user1\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "            new Password(\"pass123\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle DEFAULT_VEHICLE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"ABC1234D\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                    new District(9), new Availability(\"AVAILABLE\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private Person operator;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private District district;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private IncidentDateTime dateTime;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private Description desc;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private CallerNumber caller;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    private IncidentId id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private Vehicle vehicle;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        district \u003d new District(Integer.parseInt(DEFAULT_DISTRICT));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        dateTime \u003d new IncidentDateTime(DEFAULT_DATETIME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        desc \u003d new Description(DEFAULT_DESC);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        caller \u003d new CallerNumber(DEFAULT_CALLER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        id \u003d new IncidentId(DEFAULT_ID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        operator \u003d DEFAULT_PERSON;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        status \u003d Status.COMPLETE_DRAFT;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        vehicle \u003d DEFAULT_VEHICLE;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Initializes the IncidentBuilder with the data of {@code IncidentToCopy}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder(Incident incidentToCopy) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        district \u003d incidentToCopy.getDistrict();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        dateTime \u003d incidentToCopy.getDateTime();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        desc \u003d incidentToCopy.getDesc();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        caller \u003d incidentToCopy.getCallerNumber();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code District} of the {@code Incident} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder withDistrict(String district) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.district \u003d new District(Integer.parseInt(district));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code Description} of the {@code Incident} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder withDescription(String desc) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.desc \u003d new Description(desc);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Sets the {@code IncidentId} of the {@code Incident} that we are building."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    public IncidentBuilder withId(String id) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        this.id \u003d new IncidentId(id);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code IncidentDateTime} of the {@code Incident} that we are building."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder withDateTime(String dateTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.dateTime \u003d new IncidentDateTime(dateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Sets the {@code CallerNumber} of the {@code Incident} that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public IncidentBuilder withCaller(String caller) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        this.caller \u003d new CallerNumber(caller);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public Incident build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new Incident(operator, district, dateTime, id, caller, desc, status, vehicle);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 10,
      "hellopanda128": 95,
      "tirameshu": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IncidentManagerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * A utility class to help with building IncidentManager objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " *     {@code IncidentManager ab \u003d new IncidentManagerBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class IncidentManagerBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private IncidentManager incidentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManagerBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager \u003d new IncidentManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManagerBuilder(IncidentManager incidentManager) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.incidentManager \u003d incidentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Adds a new {@code Person} to the {@code IncidentManager} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManagerBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        incidentManager.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public IncidentManager build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return incidentManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 14,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IncidentUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CALLER_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DISTRICT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "import seedu.address.logic.commands.EditIncidentCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " * A utility class for Incident."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "public class IncidentUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    public static String getEditIncidentDetails(EditIncidentCommand.EditIncident editor) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        editor.getDistrict().ifPresent(district -\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                sb.append(PREFIX_DISTRICT).append(district.getDistrictNum()).append(\" \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        editor.getDesc().ifPresent(desc -\u003e sb.append(PREFIX_DESCRIPTION).append(desc.toString()).append(\" \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        editor.getCaller().ifPresent(caller -\u003e sb.append(PREFIX_CALLER_NUMBER).append(caller.value).append(\" \"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 2,
      "hellopanda128": 21,
      "tirameshu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Ahmed Bahajjaj\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"ahmed@gmail.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String DEFAULT_USERNAME \u003d \"Tester\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String DEFAULT_PASSWORD \u003d \"password\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private Password password;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        username \u003d new Username(DEFAULT_USERNAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        password \u003d new Password(DEFAULT_PASSWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        username \u003d personToCopy.getUsername();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        password \u003d personToCopy.getPassword();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Username} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public PersonBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.username \u003d new Username(username);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Password} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public PersonBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.password \u003d new Password(password);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new Person(name, phone, email, tags, username, password);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 27,
      "-": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        sb.append(PREFIX_USERNAME + person.getUsername().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        sb.append(PREFIX_PASSWORD + person.getPassword().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns the part of command string for the given {@code UpdatePersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static String getUpdatePersonDescriptorDetails(UpdateCommand.UpdatePersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.getUsername().ifPresent(username -\u003e sb.append(PREFIX_USERNAME).append(username.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.getPassword().ifPresent(password -\u003e sb.append(PREFIX_PASSWORD).append(password.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 9,
      "-": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalEntities.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.CallerNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "import seedu.address.model.incident.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.Incident;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "import seedu.address.model.incident.IncidentId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class TypicalEntities {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"alice@example.com\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withUsername(\"Opr1\").withPassword(\"password\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withUsername(\"Opr2\").withPassword(\"password\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"heinz@example.com\").withUsername(\"Opr3\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withUsername(\"Opr4\").withPassword(\"password\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"werner@example.com\").withUsername(\"Opr5\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824271\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"lydia@example.com\").withUsername(\"Opr6\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824421\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"anna@example.com\").withUsername(\"Opr7\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824243\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"stefan@example.com\").withUsername(\"Opr8\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821315\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"hans@example.com\").withUsername(\"Opr9\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_ADMIN)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final IncidentDateTime validDateTime \u003d new IncidentDateTime(\"2016-12-02T14:30:40\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "    private static final IncidentId commonIncidentId \u003d new IncidentId(\"1220160001\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private TypicalEntities() {} // prevents instantiation"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "     * Returns an {@code IncidentManager} with all the typical incidents."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static IncidentManager getTypicalIncidentManager() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        IncidentManager im \u003d new IncidentManager();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "            im.addPerson(person);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident firstIncident \u003d new Incident(ALICE, new District(2), validDateTime,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                commonIncidentId,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"84738293\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new Description(\"Pickpocket reported along the walkway in District 2\"),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.INCOMPLETE_DRAFT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"ABC1234D\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                        new District(9), new Availability(\"BUSY\")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        im.addIncident(firstIncident);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        im.addVehicle(new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"SBH3100F\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "                new District(16), new Availability(\"BUSY\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        Incident secondIncident \u003d new Incident(BOB, new District(3), validDateTime,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                commonIncidentId,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new CallerNumber(\"90878965\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "                new Description(\"Pickpocket spotted at the pasar malam in District 3\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                Incident.Status.INCOMPLETE_DRAFT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"GBC1434D\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                        new District(4), new Availability(\"BUSY\")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        im.addIncident(secondIncident);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hellopanda128"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "atharvjoshi"
        },
        "content": "        return im;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "atharvjoshi": 21,
      "hellopanda128": 2,
      "madanalogy": 83,
      "Yoshi275": 3,
      "tirameshu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Index INDEX_FIRST_ENTITY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Index INDEX_SECOND_ENTITY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Yoshi275"
        },
        "content": "    public static final Index INDEX_THIRD_ENTITY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Yoshi275": 3,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PASSWORD_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ADMIN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_USERNAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"alice@example.com\").withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withUsername(\"Opr1\").withPassword(\"password\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withUsername(\"Opr2\").withPassword(\"password\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"heinz@example.com\").withUsername(\"Opr3\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withUsername(\"Opr4\").withPassword(\"password\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"94822224\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"werner@example.com\").withUsername(\"Opr5\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"94824271\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"lydia@example.com\").withUsername(\"Opr6\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"94824421\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"anna@example.com\").withUsername(\"Opr7\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"84824243\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"stefan@example.com\").withUsername(\"Opr8\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"84821315\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(\"hans@example.com\").withUsername(\"Opr9\").withPassword(\"password\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withUsername(VALID_USERNAME_AMY).withPassword(VALID_PASSWORD_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(VALID_TAG_ADMIN).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withUsername(VALID_USERNAME_BOB).withPassword(VALID_PASSWORD_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_ADMIN)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns an {@code IncidentManager} with all the typical persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public static IncidentManager getTypicalIncidentManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        IncidentManager ab \u003d new IncidentManager();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 29,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalVehicles.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.IncidentManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Availability;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.District;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.Vehicle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleNumber;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "import seedu.address.model.vehicle.VehicleType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tirameshu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "public class TypicalVehicles {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle V1 \u003d new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"SGS2121G\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(1), new Availability(\"AVAILABLE\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle V2 \u003d new Vehicle(new VehicleType(\"Ambulance\"), new VehicleNumber(\"BBA2222F\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(6), new Availability(\"BUSY\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle V3 \u003d new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"FKH1221P\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(20), new Availability(\"AVAILABLE\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle V4 \u003d new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"OLI4445C\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "                new District(2), new Availability(\"BUSY\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static final Vehicle V5 \u003d new Vehicle(new VehicleType(\"Patrol Car\"), new VehicleNumber(\"GER4389F\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            new District(1), new Availability(\"AVAILABLE\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    private TypicalVehicles() {} // prevents instantiation"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     * Returns an {@code IncidentManager} with all the typical vehicles."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static IncidentManager getTypicalIncidentManager() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        IncidentManager ab \u003d new IncidentManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        for (Vehicle vehicle : getTypicalVehicles()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "            ab.addVehicle(vehicle);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tirameshu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    public static List\u003cVehicle\u003e getTypicalVehicles() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(V1, V2, V3, V4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tirameshu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tirameshu": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/UpdatePersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.UpdatePersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.person.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " * A utility class to help with building UpdatePersonDescriptor objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "madanalogy"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "public class UpdatePersonDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    private UpdatePersonDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder(UpdatePersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        this.descriptor \u003d new UpdatePersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Returns an {@code UpdatePersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor \u003d new UpdatePersonDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setUsername(person.getUsername());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setPassword(person.getPassword());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Name} of the {@code UpdatePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Phone} of the {@code UpdatePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Email} of the {@code UpdatePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Username} of the {@code UpdatePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withUsername(String username) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setUsername(new Username(username));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Sets the {@code Password} of the {@code UpdatePersonDescriptor} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withPassword(String password) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setPassword(new Password(password));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code UpdatePersonDescriptor}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "madanalogy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    public UpdatePersonDescriptor build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "madanalogy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "madanalogy": 97
    }
  }
]
