[
  {
    "path": ".gitignore",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Gradle build files"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "/.gradle/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/build/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "src/main/resources/docs/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "# IDEA files"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/.idea/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/out/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "*.iml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "# Storage/log files"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/data/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/config.json"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/preferences.json"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/*.log.*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "# Test sandbox files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "src/test/data/sandbox/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "# MacOS custom attributes files created by Finder"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ".DS_Store"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "-": 20
    }
  },
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d SELLER MANAGER Lite"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T09-4[image:https://travis-ci.org/AY1920S1-CS2103T-T09-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://ci.appveyor.com/project/EugeneTeu/main/branch/master[image:https://ci.appveyor.com/api/projects/status/h3v2fp6lbwji077b/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "https://www.codacy.com/manual/AY1920S1-CS2103T-T09-4/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dAY1920S1-CS2103T-T09-4/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/ecdd0bab29a34f7ba5209d25f2b5eee9[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d The ultimate management system for your business needs! Tailored to fufil the needs of the solo Handphone retailer!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "* This is a desktop Sales Management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "* It is a Java sample application intended for handphone sellers selling their goods on online platforms such as Carousell."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org[se-edu]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "zhixianggg": 1,
      "EugeneTeu": 7,
      "-": 26
    }
  },
  {
    "path": "_reposense/config.json",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "  \"authors\": ["
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"githubId\": \"EugeneTeu\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"displayName\": \"EUGEN ... U WEI\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         \"EugeneTeu\", \"eugene teu\", \"Eugene\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"githubId\": \"zhixianggg\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"displayName\": \"OON Z ... XIANG\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        \"zhixianggg\", \"Oon Zhi Xiang\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"githubId\": \"qiujiaaa\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"displayName\": \"OOI Q ... U JIA\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        \"qiujiaaa\", \"Qiu Jia\", \"Ooi Qiu Jia\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"githubId\": \"uberSaiyan\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"displayName\": \"YAN W ... LIANG\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        \"uberSaiyan\", \"Wei Liang\", \"Yan Wei Liang\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    },"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"githubId\": \"yeodonghan\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"displayName\": \"YEO D ... G HAN\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      \"authorNames\": ["
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        \"yeodonghan\", \"Dong Han\", \"Yeo Dong Han\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "      ]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 39
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    implementation \u0027org.apache.commons:commons-math3:3.6.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    implementation group: \u0027org.jfxtras\u0027, name: \u0027jfxtras-agenda\u0027, version: \u00279.0-r1-SNAPSHOT\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 2,
      "-": 155,
      "EugeneTeu": 7
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Seller Manager Lite was developed by the https://github.com/orgs/AY1920S1-CS2103T-T09-4/teams/developers[CS2103T T09-4] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Yan Wei Liang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::ubersaiyan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty} [https://github.com/uberSaiyan[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Project Architect, Testing, Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Eugene Teu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::eugeneteu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/EugeneTeu[github]] [https://eugeneteu.github.io/myWebsite/[Portfolio]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role:  DevOps, deliverables and deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Statistics generation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Yeo Dong Han"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::yeodonghan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/yeodonghan[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Developer , Scheduling and tracking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Schedule + CRUD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Oon Zhi Xiang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::zhixianggg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/zhixianggg[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Code Quality, Logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Parsing + CRUD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Ooi Qiu Jia"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::qiujiaaa.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/qiujiaaa[github]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Documentation, Code Coverage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: CRUD + storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "EugeneTeu": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T09-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Yan Wei Liang e0310639@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Eugene Teu e0309299@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Yeo Dong Han e0321479@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Oon Zhi Xiang e0310291@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Ooi Qiu Jia e0335622@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 8,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d Seller Manager Lite - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "By: `Team T09-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ".  `Logic` uses the `SellerManagerParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a customer/phone/order/schedule)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Statistics Calculation and Chart generation feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "This statistic calculation and chart generation feature extends `Seller Manager Lite` which allows seller to quickly"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "generate total statistics from their `DataBooks`, through the use of a `statistic`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "module that handles this calculation."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "There is three type of statistic to be calculated and only on `completed orders`:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* `Profit`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* `Cost`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* `Revenue`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "It implements the following mode of operations:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* default mode with no date input: generates on all completed order total `profit` , `cost` or `revenue`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** The command enter by the user will be e.g for profit type `generate-s s/PROFIT`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* mode with date input from user: The statistic command takes in 2 `dates`, `starting date` and `ending date`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "and generates the `profit`, `cost` or `revenue`  each `month` between this 2 dates."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** command entered by user will be e.g for profit type`generate-s s/PROFIT s1/YYYY.MM.DD s2/YYYY.MM.DD`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Here is the sequence of steps taken by SMLJ when it receives a `StatCommand`:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::StatisticsCalculationActvityDiagram.png[]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Statistic Module"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "The statistic module exposes the calculation operations in the `Statistics` interface."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "analogous to the output mode, there are 2 types of methods in this module, one that returns a"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`String` and the other and `XYChart.Series\u003cString,Number\u003e`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* Methods that return a `String`:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalProfitOnCompleted()`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalRevenueOnCompleted()`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalCostOnCompleted()`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* Methods that return a `XYChart.Series\u003cString,Number\u003e`:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalProfitOnCompletedGraph()`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalRevenueOnCompletedGraph()`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "** `calculateTotalCostOnCompletedGraph()`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "All methods were written using java8 Stream() feature. This is such that there are no loops in the code to make it"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "more readable and maintainable."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`org.apache.commons.math3.stat.StatUtils` library is used to calculate the raw data inside a `double[]` ."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "While the current `v1.4` only use `sum` to calculate the exact `profit` , `revenue` and `cost` , `v2.0` implementation"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "will make use of the `linear regression` / `average` methods inside the library to generate more advanced statistics."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations / Alternative designs considered"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Given that the number of orders in a seller database might be scaled to be very large in the future"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "the main focus of this feature was to *calculate statistics only when needed*."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "One way that was initially considered was actually to maintain a running statistic"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "counter upon loading of the main app, update this counter when calculation is needed ,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "and then display it. This implementation would be much easier to implement within the existing AB3 code"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "since it meant extending the `Model` class with a statistic model, than having the `UI` class to read from"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "this value *However, we dropped this due to the consideration"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mentioned in the previous paragraph*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Decision 1:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Given that consideration, we decided that it will be the `UI` to trigger this call to `Logic` for calculation"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "and then display the result of that call. Thus when Statistics need to be shown, the `UI` module will query the"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`Logic` for the respective data"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "One of the motivation for this approach was to maintain the architecture that is already in place in AB3."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Furthermore, given that this feature requires date input from the user, we will need to find a way to get `UI` to send"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "the data to make that query to logic. For the old AB3 implementation, `CommandResult` only contains a feedback to user"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "with the actual changes on data done with a call to model during `execute(model)`."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Decision 2:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "We decided to extend this command pattern by creating a `statsPayload` object. This object will hold the user"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "queries for the statistic calculation (if there is any) and be bundled along with the `CommandResult` class to the"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`UI` to use in its query to logic. When the Ui executes the command to logic, the `CommandResult` is returned with"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "this object, which the `UI` will then use to communicate to `Logic`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "The resulting change is that the `commandResult` type will have a slightly different behaviour. *All `commands` that"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "are not `statsCommand` will call the default constructor of the `commandResult` class, where there is  an"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`Optional.empty()` in place of the `StatsPayload` * ."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "All `statsCommand` type will have call the constructor of `commandResult` class and pass the `StatsPayload` object in."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "The key motivation behind this idea of a payload was to be able to encapsulate details about the calculation inside a"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "single object, passed it to the appropriate place to be \"unwrapped\" when needed. This unwrapping is done by the"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`mainWindow` class in SMLJ and subsequently the data is passed to the  `statistic` module."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "A high level view of the packages working together:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::statsOverallClassDiagram.png[]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Step-by-step breakdown"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Below is a more in-depth explanation at each step:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "step 1: User inputs a stats command e.g `generate-s s/REVENUE d1/2018.12.13 d2/2019.11.13`."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "The commandBox executes it and the `MainWindow` runs its `executeCommand(commandText)` method."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Referring to the sequence diagram below,this results in `logic.execute(commandText)` being called and"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "the `statsCommandParser` parses the input from the user, returning a"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`Command` object"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "step 2: the logic then calls `command.execute(command)` (refer to the second set of arrow coming out of `LogicManager`)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "When this happens, the `StatsCommand` execute triggering a call to create the new `StatsPayload`. Then this is used to"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "create a new `CommandResult` object and returns that to `Logic` , completing the execution of the user input command."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Shown below is a quick summary of step 1-2:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::StatsCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "step 3: After the logic component completes it execution and return a `CommandResult`, the `UI` will call"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "`performUiChanges` that handles the specific `UI` change."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "This then results in the `statsPayload` class being passed to `Logic` class and subsequently the `statistics` module,"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "where the appropriate calculation will take place."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "step 4: `Statistic Manager` calculates the date"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Depending on the input, the `Statistic Manager` will calculate the value and return that, either in the form of"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "a `String` or a `XYChart.Series\u003cString, Number\u003e`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "step 5: with this output from logic, `Statistic Window` will then handle the diplaying of the statistic, be it in chart"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "form or string form. With this the feature has finished executing! Attached below is the summary for step 3-5:"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::StatisticsCalculationUI.png[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Find Customer/Phone feature"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "The find feature allows the user to find the order according to its data field or without any data field."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* e.g. `find-c n/Alice` -- allows the user to find the customer with customer name \"Alice\"."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* e.g. `find-c Alice` -- would allow the user to find the customer with any data field that matches \"Alice\"."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "In order to implement the find function, we decided to create a predicate for each field."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* has a need to manage a significant number of phones, orders and customers."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* is a one-man/two-man handphone re-seller who has multiple phones to sell."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* likes single view application."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Value proposition*: Keep track of your phone, orders and customers faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |schedule my orders| deconflict and view the schedule of my sales meetings."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *` |handphone seller |generate an invoice |give my customers the invoice."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |sort my sales statistics|find out which products are selling well."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |generate sales report |track my revenues, profits and costs."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |find my handphone model easily| not waste time searching for the handphone."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller |record and track the quantity of my phones |decide when to get more phones."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller |copy the email address/handphone number of my customer easily |email them/text them easily."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`| handphone seller |use a price optimization algorithm| easily price my products."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller | find out the market price of the phones| decide what price to set for my phones."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller | generate a visualisation of my meeting schedule | have a better idea of my schedule"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller |use an auto-generated mailing list |keep track of the mails that I have to send out."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|organise my replies in terms of hot, medium, cold |find out how to best reply to a certain type of customer."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|use the trust meter system|remember which buyers cheated me before."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|check notification dialog|see upcoming deadlines"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|add images to my handphone| better visualise my products."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|integrate the app with an e-commerce platform|automatically update my order in my app and on the platform."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|view customer profile|see the number of transactions and the types of goods they bought."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|undo and redo|correct my mistakes."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|import my sales data from csv file|save the trouble of manual importing."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|add, edit and delete the phones that I have|update when there is a need to."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|create a new order|schedule the order."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|cancel order|reflect the changes made by customer."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|sort statistics by brand|find out which brand is the most popular."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|generate statistics for total sales or total profit per month| find out how much I earn."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|find the details of the order that I want easily| save time searching for an order."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|delete a phone that I am no longer selling| get rid of it on the database."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|track my customer age|know the suitability of my product."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|use an in-built messenger to communicate with my customer| talk to them without switching to another application."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "(For all use cases below, the *System* is the `SML` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Delete customer (UC01)"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1.  User requests to list customer"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2.  SML shows a list of customers"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3.  User requests to delete a specific customer in the list"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4.  SML deletes the customer"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 3a1. SML shows an error message."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Add new phone (UC02)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor input phone name and quantity."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System adds phone to the list of phones."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System shows the new list of phones."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. Actor inputs wrong date format."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. SML requests for correct data."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Check quantity of phone (UC03)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to check stock of a phone."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System displays the stock status for a phone."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. System is unable to find the phone as it does not exist."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. System shows error message that phone does not exist."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Confirm order (UC04)"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to check stock of a phone (UC03)."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. Actor add order to the system. System displays the new order list."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. Actor schedule order. (UC05)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4. Actor mark order as completed. System displays completed order message."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 2a. System is unable to add as command is missing fields."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 2a1. System shows error message that command is missing fields."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Actor schedule order (UC05)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor adds order to schedule by some identifier."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System check for conflict in timings."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System displays the scheduled order."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 2a. System finds out that there is a conflict in timing for 2 or more orders."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 2a1. System displays the 2 or more orders that have the same schedule timing."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Actor input data via .csv file (UC06)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to import .csv file."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System loads file into memory."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System reads the file and saves it."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4. System displays the updated data."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. System finds that no file is found."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1b. System finds that there is an error with the formatting."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. System displays error message and does not add new data from the file."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1b1. System displays error message and does not add the new data from the file."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  Single User for each session"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  No internet required"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  Quality and helpful information/feedback upon user action"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  System should ideally respond within 5 seconds"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  System allows for wrong input from user and recovers from erroneous input"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  App can be downloaded and run via a jar file"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "_ {More to be added}_"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[[order]] Order::"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "A order consisting of customer and phone"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[[Phone]] Phone::"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Any mobile device being sold by seller"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 187,
      "EugeneTeu": 152,
      "-": 409
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d Seller Manager Lite - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "By: `Team T09-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Seller Manager Lite (SML) is for those who *prefer to use a desktop app for managing their sales*. More importantly, SML is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SML can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ".  Download the latest `sellermanagerlite.jar` https://github.com/AY1920S1-CS2103T-T09-4/main/releasesreleases[here]."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Seller Manager Lite."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *`list -c`* : lists all customer contacts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* **`add -c`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a customer named `John Doe` to SML."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* **`delete -c`**`3` : deletes the 3rd customer shown in the current list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add -c n/NAME`, `NAME` is a parameter which can be used as `add -c n/John Doe`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Lists out the commands you need to navigate SML. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Phone Commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on phones that you have in your inventory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add a phone : `add-p`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds a phone or updates the inventory. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add-p n/NAME q/QUANTITY [p/PRICE] [t/TAG]…​`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a phone : `delete-p`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Deletes a phone from the inventory. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `delete-p INDEX`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find a phone : `find-p`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Returns all the information pertaining to phone with matching name. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find-p p/PHONE`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the phones : `list-p`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List all the phones in lexicographical order. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list-p`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a phone : `edit-p`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Edits the appropriate fields of a phone. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `edit-p n/NAME [p/PRICE] [q/QUANTITY] [t/TAG]...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy phone field : `copy-p`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies a phone field to clipboard. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy-p \u003cfield\u003e`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Order Commands"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on orders that you have."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add an order : `add-o`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds an order to the list of orders. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add-o p/PHONE_NUMBER i/ITEM...`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find an order : `find-o`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Returns all the information pertaining to the order. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find-o INDEX`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Complete an order : `complete-o`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Completes the order, order status changed to `COMPLETED`. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `complete-o INDEX`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Cancel an order : `cancel-o`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Cancels the order at the specified index. +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `cancel-o INDEX`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the orders : `list-o`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List all the orders in the list. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list-o`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy order field : `copy-o`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies an order field to clipboard. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy-o \u003cfield\u003e`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Duplicate an order : `duplicate-o`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Duplicate an order of the specified index. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `duplicate-o INDEX`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Customer Commands"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on customers in your list."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add a customer : `add-c`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds a customer to the address book. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add-c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "A person can have any number of tags, including 0."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a customer : `delete-c`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Deletes a customer in the address book. +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `delete-c INDEX`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find a customer : `find-c`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Finds customers whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find-c KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the customers : `list-c`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List every single customer in SML. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list-c`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a customer : `edit-c`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Edits an existing customer. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `edit-c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy customer field : `copy-c`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies a customer field to clipboard. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy-c \u003cfield\u003e`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Schedule Commands"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Go to specific date in calendar : `schedule`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Shows the week of the date specified by the user. +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `schedule cd/DATE`"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add a schedule : `add-s`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds a schedule to the address book. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add-s ORDER_INDEX cd/DATE ct/TIME v/VENUE [t/TAG]…`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a schedule : `delete-s`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Deletes a schedule in the address book. +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `delete-s ORDER_INDEX`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Edit a schedule : `edit-s`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Edits an existing schedule. +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `edit-s ORDER_INDEX [cd/DATE] [ct/TIME] [v/VENUE] [t/TAG]…`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Utility Commands"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Undo : `undo`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Undo the previous command.  +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Redo : `redo`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "redo the previous command.  +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d\u003d Generate stats : `generate-s`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Accepts two types of input: Without date input and with date input +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Generates the statistics with no date input. +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Used for calculating `total profit` , `total Revenue` and `total Cost`. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Format: `generate-s s/STAT` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Type for `STAT` includes: `PROFIT`, `REVENUE`, `COST` +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Generates the statistics with date input in chart format (in pop-up modal dialog). +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Format: `generate-s s/STAT d1/YYYY.MM.DD d2/YYYY.MM.DD` +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Example: `generate-s s/REVENUE d1/2019.10.16 d2/2019.11.21` +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Format for date is in YYYY.MM.DD e.g `2019.05.12`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Check : `check`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Check for stock etc. For stock, see the phones that have \u003c threshold quantity.   +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `check \u003cflag\u003e` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible flag: `-p` for phone stock, `check -p \u003cthreshold\u003e`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Clears all entries of items, orders and customers. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Import/export data : `import / export`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Import csv file into the application. +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export application data into csv file. +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export application stats. +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `import \u003cflag\u003e \u003cfile name\u003e` / `export \u003cflag\u003e \u003cfile name\u003e` +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible flag: `-p` for phone, `-c` for customer, `-o` for order."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "SML data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Explain how the user can enable/disable data encryption"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Autocomplete  `[coming in v2.0]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Press kbd:[Tab] to autocomplete the line. (like in command line)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Notification for reminders/alerts  `[coming in v2.0]`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Notification page to show any notifications of reminders or alerts."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Export data to PDF  `[coming in v2.0]`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export any of the data in SML to PDF format."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SML folder."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Add* +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `add -c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `add -p n/NAME q/QUANTITY [p/PRICE] [t/TAG]…`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `add -o p/PHONE_NUMBER i/ITEM...`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Cancel* +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `cancel -o INDEX`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Check* +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** stock : `check -p \u003cthreshold\u003e`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Complete* +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `complete -o INDEX`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Copy* +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `copy -c \u003cfield\u003e`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `copy -p \u003cfield\u003e`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `copy -o \u003cfield\u003e`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Delete* +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `delete -c INDEX`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `delete -p INDEX`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Duplicate* +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `duplicate -o INDEX`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Export* +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `export -c`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `export -p`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `export -o`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Find* +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `find -c KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `find -p p/PHONE`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `find -o INDEX`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Generate* : `generate -s s/STAT -d d/ -t t/TYPE`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Import* +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `import -c`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `import -p`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `import -o`"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *List* +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `list -c`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `list -p`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `list -o`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Schedule* +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `schedule -o INDEX DD/MM/YY HHMM`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Update* +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `update -c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `update -p n/NAME [p/PRICE] [q/QUANTITY] [t/TAG]...`"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 187,
      "-": 90,
      "EugeneTeu": 14
    }
  },
  {
    "path": "docs/diagrams/FindCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":SellerManagerParser\" as SellerManagerParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":FindCustomerCommandParser\" as FindCustomerCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":CustomerNameContainsKeywordsPredicate\" as CustomerNameContainsKeywordsPredicate LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \"d:FindCustomerCommand\" as FindCustomerCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "end box"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[-\u003e LogicManager : execute(\"find-c 1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "LogicManager -\u003e SellerManagerParser : parseCommand(\"find-c n/Alice\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate SellerManagerParser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "create FindCustomerCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "SellerManagerParser -\u003e FindCustomerCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate FindCustomerCommandParser"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommandParser --\u003e SellerManagerParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate FindCustomerCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "SellerManagerParser -\u003e FindCustomerCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate FindCustomerCommandParser"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "create FindCustomerCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommandParser -\u003e FindCustomerCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate FindCustomerCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommand --\u003e FindCustomerCommandParser : d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate FindCustomerCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommandParser --\u003e SellerManagerParser : d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate FindCustomerCommandParser"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommandParser -[hidden]-\u003e SellerManagerParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "destroy FindCustomerCommandParser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "SellerManagerParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate SellerManagerParser"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "LogicManager -\u003e FindCustomerCommand : execute()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate FindCustomerCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommand -\u003e Model : deletePerson(1)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Model --\u003e FindCustomerCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "CommandResult --\u003e FindCustomerCommand"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "FindCustomerCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate FindCustomerCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 70
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class SellerManagerParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "LogicManager --\u003e\"1\" SellerManagerParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "SellerManagerParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "note left of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package statistics {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class StatsPayload"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Interface Statistics \u003c\u003cStatistics\u003e\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class StatisticsManager"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "StatisticsManager .up.|\u003e Statistics"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CommandResult .right.\u003e StatsPayload : contains \u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "XYZCommand .up.\u003eStatsPayload : creates \u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "LogicManager .up.\u003e Statistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "LogicManager .right.\u003e CommandResult"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "EugeneTeu": 18
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Interface ReadOnlyDataBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Interface Identifiable \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Class CalendarDate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"DataBook\u003cPhone\u003e\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"UniqueList\u003cPhone\u003e\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"DataBook\u003cOrder\u003e\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"UniqueList\u003cOrder\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"DataBook\u003cCustomer\u003e\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"UniqueList\u003cCustomer\u003e\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"DataBook\u003cSchedule\u003e\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class \"UniqueList\u003cSchedule\u003e\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Package Phone {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Brand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Capacity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Colour"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class IdentityNumber"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class PhoneName"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class SerialNumber"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Package Order {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Order"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Price"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Status"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Package Customer {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Customer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class ContactNumber"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class CustomerName"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Package Schedule {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Schedule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Class Venue"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cPhone\u003e\" .up.|\u003e ReadOnlyDataBook"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cOrder\u003e\" .up.|\u003e ReadOnlyDataBook"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cCustomer\u003e\" .up.|\u003e ReadOnlyDataBook"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cSchedule\u003e\" .up.|\u003e ReadOnlyDataBook"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager o--\u003e \"1\" \"DataBook\u003cPhone\u003e\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager o--\u003e \"1\" \"DataBook\u003cOrder\u003e\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager o--\u003e \"1\" \"DataBook\u003cCustomer\u003e\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager o--\u003e \"1\" \"DataBook\u003cSchedule\u003e\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "ModelManager *-left-\u003e \"1\" CalendarDate"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone .up.|\u003e Identifiable"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order .up.|\u003e Identifiable"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Customer .up.|\u003e Identifiable"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Schedule .up.|\u003e Identifiable"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cPhone\u003e\" *--\u003e \"1\" \"UniqueList\u003cPhone\u003e\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"UniqueList\u003cPhone\u003e\" o--\u003e \"*\" Phone"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e PhoneName"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e IdentityNumber"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e SerialNumber"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e Capacity"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e Colour"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e Brand"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Phone *--\u003e Tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cOrder\u003e\" *--\u003e \"1\" \"UniqueList\u003cOrder\u003e\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"UniqueList\u003cOrder\u003e\" o--\u003e \"*\" Order"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e \"1\" Phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e \"1\" Customer"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e \"1\" Schedule"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e Price"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e Status"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Order *--\u003e Tag"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cCustomer\u003e\" *--\u003e \"1\" \"UniqueList\u003cCustomer\u003e\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"UniqueList\u003cCustomer\u003e\" o--\u003e \"*\" Customer"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Customer *--\u003e ContactNumber"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Customer *--\u003e CustomerName"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Customer *--\u003e Email"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Customer *--\u003e Tag"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"DataBook\u003cSchedule\u003e\" *--\u003e \"1\" \"UniqueList\u003cSchedule\u003e\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\"UniqueList\u003cSchedule\u003e\" o--\u003e \"*\" Schedule"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Schedule *--\u003e Venue"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "Schedule *--\u003e Tag"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager --\u003e \"1\" Phone : filtered list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager --\u003e \"1\" Customer : filtered list"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager --\u003e \"1\" Order : filtered list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "ModelManager --\u003e \"1\" Schedule : filtered list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 80,
      "qiujiaaa": 2,
      "-": 35
    }
  },
  {
    "path": "docs/diagrams/StatisticsCalculationActivityDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "start"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":User executes StatsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u0027Since the beta syntax does not support placing the condition outside the"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u0027diamond we place it as the true branch instead."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "if () then ([Has date input])"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     :parse date input from user;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     :create StatsPayload Object with this input;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "else ([else])"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    :create StatsPayload Object with default date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":commandResult sent back to Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":MainWindow triggers call to Logic Manager with StatsPayload object;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":logic manager uses statistic manager to calculate statistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":display Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "stop"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 19
    }
  },
  {
    "path": "docs/diagrams/StatisticsCalculationUI.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":MainWindow\" as mw LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":StatisticManager\" as sm LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":StatsWindow\" as sw LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[-\u003e mw : executeCommand"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "activate mw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mw -\u003e logic ++: (covered here in previous section)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "logic -\u003e mw --: CommandResult"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mw -\u003e mw ++: performUiChanges(commandResult)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mw -\u003e mw ++: handleStats(statsPayload)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mw -\u003e logic ++: statsPayload"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "logic -\u003e sm ++: statsPayload"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "sm -\u003e sm : calculate"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "sm -\u003e logic --: result"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "logic -\u003e mw --:result"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "mw -\u003e sw ++: result"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "sw -\u003e sw ++: buildChart()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "sw -\u003e mw --: statsWindow"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c- mw : CommandResult"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 37
    }
  },
  {
    "path": "docs/diagrams/StatsCommandSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":SellerManagerParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \":StatsCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \"command:StatsCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \"statsPayload:StatsPayload\" as sp LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Participant \"commandResult:CommandResult\" as cr LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ecp -\u003e ec ++: startingDate, endingDate, statisticType, UiChange"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "logic -\u003e ec ++: execute, model"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "create sp"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ec -\u003e sp ++: startingDate, endingDate, statisticType"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "sp --\u003e ec --: statsPayload"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ec -\u003e cr ++: StatsPayload, UiChange"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "cr -\u003e ec --: commandResult"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "ec -\u003e logic --: commandResult"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c- logic :commandResult"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 37
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class CustomerCard"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class CustomerListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class OrderCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class OrderListPanel"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class PhoneCard"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class PhoneListPanel"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class CalendarPanel"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class TabPanel"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Class StatisticWindow"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "MainWindow --\u003e StatisticWindow"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "MainWindow *-down-\u003e TabPanel"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "TabPanel *-down-\u003e CustomerListPanel"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "TabPanel *-down-\u003e PhoneListPanel"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "TabPanel *-down-\u003e OrderListPanel"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "TabPanel *-down-\u003e CalendarPanel"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CustomerListPanel -down-\u003e CustomerCard"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "PhoneListPanel -down-\u003e PhoneCard"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "OrderListPanel -down-\u003e OrderCard"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "MainWindow -right-\u003e Logic"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CustomerListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "PhoneListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "OrderListPanel--|\u003e UiPart"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CalendarPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "StatisticWindow --|\u003e UiPart"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CustomerCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "PhoneCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "OrderCard -down-|\u003e UiPart"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CustomerCard .right.\u003e Model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "PhoneCard .right.\u003e Model"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "OrderCard .right.\u003e Model"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "CalendarPanel .right.\u003e Model"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "TabPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "StatisticWindow -[hidden]right- StatusBarFooter"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "EugeneTeu": 37
    }
  },
  {
    "path": "docs/diagrams/statsOverallClassDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Package UI {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Interface UIPart \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "class MainWindow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Package Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Package Statistics {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Interface Statistics  \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "class StatisticManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "MainWindow .left.|\u003e UIPart"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "MainWindow .right.-\u003e Logic"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Logic .down.-\u003e Statistics"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "StatisticManager .up.|\u003e Statistics"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.Statistic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatisticManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.CustomerBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonCustomerBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonOrderBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonPhoneBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonScheduleBookStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.OrderBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.PhoneBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.ScheduleBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected Statistic statistic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing T09-4 project  ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        CustomerBookStorage customerBookStorage \u003d new JsonCustomerBookStorage(userPrefs.getCustomerBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        PhoneBookStorage phoneBookStorage \u003d new JsonPhoneBookStorage(userPrefs.getPhoneBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        ScheduleBookStorage scheduleBookStorage \u003d new JsonScheduleBookStorage(userPrefs.getScheduleBookFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        OrderBookStorage orderBookStorage \u003d new JsonOrderBookStorage(userPrefs.getOrderBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        OrderBookStorage archivedOrderBookStorage \u003d new JsonOrderBookStorage(userPrefs.getArchivedOrderBookFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, customerBookStorage, phoneBookStorage, scheduleBookStorage,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                orderBookStorage, archivedOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //create statistic manager;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        statistic \u003d new StatisticManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logic \u003d new LogicManager(model, storage, statistic);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e customerBookOptional;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e phoneBookOptional;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e scheduleBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e orderBookOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e archivedOrderBookOptional;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ReadOnlyDataBook\u003cCustomer\u003e initialCustomerData;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ReadOnlyDataBook\u003cPhone\u003e initialPhoneData;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        ReadOnlyDataBook\u003cSchedule\u003e initialScheduleData;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ReadOnlyDataBook\u003cOrder\u003e initialOrderData;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ReadOnlyDataBook\u003cOrder\u003e initialArchivedOrderData;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            customerBookOptional \u003d storage.readCustomerBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!customerBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Customer DataBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialCustomerData \u003d customerBookOptional.orElseGet(SampleDataUtil::getSampleCustomerBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Customer DataBook\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialCustomerData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Customer DataBook\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialCustomerData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            phoneBookOptional \u003d storage.readPhoneBook();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!phoneBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Phone DataBook\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialPhoneData \u003d phoneBookOptional.orElseGet(SampleDataUtil::getSamplePhoneBook);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Phone DataBook\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialPhoneData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Phone DataBook\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialPhoneData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            scheduleBookOptional \u003d storage.readScheduleBook();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            if (!scheduleBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Schedule DataBook\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            initialScheduleData \u003d scheduleBookOptional.orElseGet(SampleDataUtil::getSampleScheduleBook);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Schedule DataBook\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialScheduleData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Schedule DataBook\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialScheduleData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            orderBookOptional \u003d storage.readOrderBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!orderBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Order DataBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialOrderData \u003d orderBookOptional.orElseGet(SampleDataUtil::getSampleOrderBook);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Order DataBook\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialOrderData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Order DataBook\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            initialOrderData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            archivedOrderBookOptional \u003d storage.readArchivedOrderBook();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!archivedOrderBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Archived Order DataBook\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialArchivedOrderData \u003d archivedOrderBookOptional.orElse(new DataBook\u003cOrder\u003e());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Order DataBook\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialArchivedOrderData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Order DataBook\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            initialArchivedOrderData \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new ModelManager(initialCustomerData, initialPhoneData, initialOrderData, initialScheduleData,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                initialArchivedOrderData, userPrefs);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Seller Manager ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 21,
      "zhixianggg": 65,
      "-": 167,
      "EugeneTeu": 8,
      "yeodonghan": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_CUSTOMERS_LISTED_OVERVIEW \u003d \"%1$d customers listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_INVALID_PHONE_DISPLAYED_INDEX \u003d \"The phone index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_PHONE_LISTED_OVERVIEW \u003d \"%1$d phones listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_ORDER_SCHEDULED \u003d \"This order is already scheduled in SML.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_ORDER_CANCELLED \u003d \"This order is already cancelled in SML.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_ORDER_COMPLETED \u003d \"This order is already completed in SML.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_ORDER_UNSCHEDULED \u003d \"This order is unscheduled in SML.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String DATE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Date should only contain numbers in the format of YYYY.MM.DD , and it should not be blank \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    + \"for PROFIT, COST, REVENUE type\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String OPTIONAL_DATE_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Date should have starting and ending in the format YYYY.MM.DD\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    + \"Example: d1/2018.10.05 d2/2019.04.12\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String STATS_MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Stat type should only be either PROFIT, REVENUE or COST, and should not be blank.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_INPUT_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Starting date should be lesser than that of ending date\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 4,
      "zhixianggg": 7,
      "-": 14,
      "EugeneTeu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/MoneyUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Utility methods related to Price and Cost."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class MoneyUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Convert {@Code price} to a corresponding {@Code Double}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param price A price. Cannot be null."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @return The price as a Double."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static Double convertToDouble(Price price) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String priceString \u003d price.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String value \u003d priceString.substring(1); // remove $"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Convert {@Code cost} to a corresponding {@Code Double}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param cost A Cost. Cannot be null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @return The cost as a Double."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static Double convertToDouble(Cost cost) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String costString \u003d cost.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String value \u003d costString.substring(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Double.parseDouble(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static boolean containsExactWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   Ignores case, only a partial word match is required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(w -\u003e w.contains(preppedWord));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Utility Method to convert date in calendar to string for display"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static String convertCalendarDateToString(Calendar inputDate) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        display.append(inputDate.get(Calendar.YEAR) + \".\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //offset month"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        display.append((inputDate.get(Calendar.MONTH) + 1) + \".\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        display.append(inputDate.get(Calendar.DATE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Utility Method to convert date in calendar to string for display without Day"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static String convertCalendarDateToGraphDisplay(Calendar inputDate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        StringBuilder display \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //offset month"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        display.append((inputDate.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault())) + \" \");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        display.append(inputDate.get(Calendar.YEAR) + \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return display.toString();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 27,
      "-": 67,
      "EugeneTeu": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.CalendarDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns the Order DataBook."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see seedu.address.model.Model#getOrderBook()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ReadOnlyDataBook\u003cOrder\u003e getOrderBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns the ArchivedOrder DataBook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see seedu.address.model.Model#getOrderBook()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cOrder\u003e getArchivedOrderBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns the Phone DataBook."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see seedu.address.model.Model#getPhoneBook()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ReadOnlyDataBook\u003cPhone\u003e getPhoneBook();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of customers */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of phone */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ObservableList\u003cPhone\u003e getFilteredPhoneList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of order */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of order */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredArchivedOrderList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of schedule */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate total profit based on user input"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalProfit(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate Total Revenue based on user input"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalRevenue(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate total profit based on user input"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalCost(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns the CalendarDate object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    CalendarDate getCalendarDate();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate total profit based on user input"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * return a XYChart.series"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     XYChart.Series\u003cString, Number\u003e calculateTotalRevenueGraph(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate total cost based on user input"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * return a XYChart.series"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    XYChart.Series\u003cString, Number\u003e calculateTotalCostGraph(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Gets logic to calculate total cost based on user input"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * return a XYChart.series"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    XYChart.Series\u003cString, Number\u003e calculateTotalProfitGraph(StatsPayload statsPayload);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "qiujiaaa": 7,
      "zhixianggg": 8,
      "-": 50,
      "EugeneTeu": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.CalendarDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.Statistic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Statistic statistic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public LogicManager(Model model, Storage storage, Statistic statistic) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statistic \u003d statistic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            storage.saveCustomerBook(model.getCustomerBook());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            storage.savePhoneBook(model.getPhoneBook());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            storage.saveScheduleBook(model.getScheduleBook());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            storage.saveOrderBook(model.getOrderBook());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            storage.saveArchivedOrderBook(model.getArchivedOrderBook());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getOrderBook() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getOrderBook();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getArchivedOrderBook() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return model.getArchivedOrderBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ReadOnlyDataBook\u003cPhone\u003e getPhoneBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getPhoneBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getFilteredCustomerList(); }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cPhone\u003e getFilteredPhoneList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getFilteredPhoneList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredArchivedOrderList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return model.getFilteredArchivedOrderList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return model.getFilteredScheduleList(); }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalProfit(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalProfitOnCompleted(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalRevenue(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalRevenueOnCompleted(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalCost(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalCostOnCompleted(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CalendarDate getCalendarDate() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return model.getCalendarDate();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalProfitGraph(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalProfitOnCompletedGraph(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalRevenueGraph(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalRevenueOnCompletedGraph(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalCostGraph(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this.statistic.calculateTotalCostOnCompletedGraph(this.getArchivedOrderBook(), statsPayload);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 7,
      "zhixianggg": 16,
      "-": 76,
      "EugeneTeu": 66,
      "yeodonghan": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CancelOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Cancels an order identified using it\u0027s displayed index from the seller manager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CancelOrderCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \": Cancels the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_CANCEL_ORDER_SUCCESS \u003d \"Cancelled Order: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CancelOrderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order orderToCancel \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        UUID id \u003d orderToCancel.getId();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d orderToCancel.getCustomer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d orderToCancel.getPhone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Price price \u003d orderToCancel.getPrice();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cSchedule\u003e schedule \u003d orderToCancel.getSchedule();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d orderToCancel.getTags();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order cancelledOrder \u003d new Order(id, customer, phone, price, Status.CANCELLED, schedule, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setOrder(orderToCancel, cancelledOrder);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Optional\u003cSchedule\u003e scheduleToCancel \u003d orderToCancel.getSchedule();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (scheduleToCancel.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            model.deleteSchedule(scheduleToCancel.get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CANCEL_ORDER_SUCCESS, orderToCancel), UiChange.ORDER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CancelOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CancelOrderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 5,
      "zhixianggg": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cUiChange\u003e uiChange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Optional\u003cStatsPayload\u003e statsPayload;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and specified {@Code type},"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and set other fields to their default value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult(String feedbackToUser, UiChange ...type) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.uiChange \u003d Arrays.asList(type);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statsPayload \u003d Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and {@code statsPayload}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and specified {@Code type},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsPayload user input argument for statistics command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult(String feedbackToUser, StatsPayload statsPayload, UiChange ...type) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.uiChange \u003d Arrays.asList(type);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statsPayload \u003d Optional.of(statsPayload);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public List\u003cUiChange\u003e getUiChange() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return uiChange;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean hasPayloadObject() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.statsPayload.isPresent();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayload getPayloadObject() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.statsPayload.get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return Objects.hash(feedbackToUser);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 48,
      "EugeneTeu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompleteOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Completes an order identified using it\u0027s displayed index from the seller manager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CompleteOrderCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"complete\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \": Completes the order identified by the index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_COMPLETE_ORDER_SUCCESS \u003d \"Completed Order: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CompleteOrderCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order orderToComplete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        UUID id \u003d orderToComplete.getId();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d orderToComplete.getCustomer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d orderToComplete.getPhone();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Price price \u003d orderToComplete.getPrice();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cSchedule\u003e schedule \u003d orderToComplete.getSchedule();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d orderToComplete.getTags();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order completedOrder \u003d new Order(id, customer, phone, price, Status.COMPLETED, schedule, tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.addArchivedOrder(completedOrder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.deletePhone(phone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_COMPLETE_ORDER_SUCCESS, orderToComplete),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                UiChange.ARCHIVED_ORDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CompleteOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CompleteOrderCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Seller Manager as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, UiChange.EXIT);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "EugeneTeu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, UiChange.HELP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Changes the view of the agenda to show the date specified by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class ScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"schedule\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \": Switch the schedule view according to the date input by the user.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Parameters: PREFIX_CALENDAR + YYYY.MM.DD\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_DATE + \"2019.10.18\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Schedule view switched.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Calendar calendarToShow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleCommand(Calendar calendarToShow) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendarToShow \u003d calendarToShow;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.setCalendarDate(calendarToShow);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UiChange.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * represent the type of commandResult that is executed"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * so to enable the manager to switch to the correct tab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public enum UiChange {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ARCHIVED_ORDER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    DEFAULT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    CUSTOMER,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    PHONE,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    ORDER,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    SCHEDULE,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    STATS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    EXIT;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Adds a customer to SML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddCustomerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-c\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to SML. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CONTACT + \"CONTACT NUMBER \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CONTACT + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in SML.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Customer toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Customer}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddCustomerCommand(Customer customer) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        toAdd \u003d customer;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (model.hasCustomer(toAdd)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.addCustomer(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof AddCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCustomerCommand) other).toAdd));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 66,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Adds an order to SML."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddOrderCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-o\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to SML. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CUSTOMER + \"CUSTOMER \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CUSTOMER + \"1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONE + \"2 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PRICE + \"$1000 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_TAG + \"Urgent \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in SML.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index toAddCustomerIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index toAddPhoneIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Price toAddPrice;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Set\u003cTag\u003e toAddTags;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Order}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddOrderCommand(Index customerIndex, Index phoneIndex, Price price, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customerIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phoneIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.toAddCustomerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.toAddPhoneIndex \u003d phoneIndex;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.toAddPrice \u003d price;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.toAddTags \u003d tags;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cCustomer\u003e lastShownCustomerList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (toAddCustomerIndex.getZeroBased() \u003e\u003d lastShownCustomerList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d lastShownCustomerList.get(toAddCustomerIndex.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cPhone\u003e lastShownPhoneList \u003d model.getFilteredPhoneList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (toAddPhoneIndex.getZeroBased() \u003e\u003d lastShownPhoneList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d lastShownPhoneList.get(toAddPhoneIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order toAdd \u003d new Order(UUID.randomUUID(), customer, phone, toAddPrice,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Status.UNSCHEDULED, Optional.empty(), toAddTags);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.addOrder(toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), UiChange.ORDER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof AddOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAddCustomerIndex.equals(((AddOrderCommand) other).toAddCustomerIndex)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAddPhoneIndex.equals(((AddOrderCommand) other).toAddPhoneIndex)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAddPrice.equals(((AddOrderCommand) other).toAddPrice)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAddTags.equals(((AddOrderCommand) other).toAddTags));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddPhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BRAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTITYNUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONENAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIALNUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Adds a phone to SML."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddPhoneCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-p\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a phone to SML. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_IDENTITYNUM + \"IDENTITY NUMBER (IMEI) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_SERIALNUM + \"SERIAL NUMBER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONENAME + \"NAME \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_BRAND + \"BRAND \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CAPACITY + \"CAPACITY (in GB) \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_COLOUR + \"COLOUR \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_COST + \"COST \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_IDENTITYNUM + \"543407158585522 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_SERIALNUM + \"A123bcfe29 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONENAME + \"iPhone 11 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_BRAND + \"Apple \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CAPACITY + \"128 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_COLOUR + \"Purple \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_COST + \"$900 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_TAG + \"NEW \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_TAG + \"Cool\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New phone added: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHONE \u003d \"This phone already exists in SML.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Phone toAdd;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an AddPhoneCommand to add the specified {@code Phone}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddPhoneCommand(Phone phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        toAdd \u003d phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (model.hasPhone(toAdd)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PHONE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.addPhone(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), UiChange.PHONE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof AddPhoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddPhoneCommand) other).toAdd));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Adds a schedule to SML."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class AddScheduleCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a schedule to an existing order in the SML \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"by the index number of the order to be scheduled in the displayed order list. \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_DATE + \"YYYY.MM.DD \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_TIME + \"HH.MM \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_VENUE + \"VENUE \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_DATE + \"2019.12.12 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_TIME + \"17.30 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_VENUE + \"Changi Airport T3 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_TAG + \"freebie\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New schedule added: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This schedule already exists in SML.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Schedule toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Index orderIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Creates an AddScheduleCommand to add the specified {@code Schedule}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public AddScheduleCommand(Schedule schedule, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        toAdd \u003d schedule;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        orderIndex \u003d index;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (model.hasSchedule(toAdd)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } else if (orderIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order orderToSchedule \u003d lastShownList.get(orderIndex.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        switch (orderToSchedule.getStatus()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case SCHEDULED:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_SCHEDULED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case COMPLETED:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_COMPLETED);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case CANCELLED:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_CANCELLED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order scheduledOrder \u003d new Order(orderToSchedule.getId(), orderToSchedule.getCustomer(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                orderToSchedule.getPhone(), orderToSchedule.getPrice(), Status.SCHEDULED, Optional.of(toAdd),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                orderToSchedule.getTags());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.setOrder(orderToSchedule, scheduledOrder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.addSchedule(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                || (other instanceof AddScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddScheduleCommand) other).toAdd));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/clearcommand/ClearCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.clearcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Clears the customer book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ClearCustomerCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-c\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Customer book has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setCustomerBook(new DataBook\u003cCustomer\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/clearcommand/ClearPhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.clearcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Clears the phone book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ClearPhoneCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-p\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Phone book has been cleared!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setPhoneBook(new DataBook\u003cPhone\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.PHONE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Deletes a customer identified using it\u0027s displayed index from the seller manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeleteCustomerCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-c\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DELETE_CUSTOMER_SUCCESS \u003d \"Deleted Customer: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DeleteCustomerCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete), UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof DeleteCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCustomerCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 55,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeletePhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Deletes a phone identified using it\u0027s displayed index from the seller manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeletePhoneCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-p\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \": Deletes the phone identified by the index number used in the displayed phone list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DELETE_PHONE_SUCCESS \u003d \"Deleted Phone: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DeletePhoneCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cPhone\u003e lastShownList \u003d model.getFilteredPhoneList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.deletePhone(phoneToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PHONE_SUCCESS, phoneToDelete), UiChange.PHONE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof DeletePhoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeletePhoneCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Deletes a schedule identified using it\u0027s order\u0027s displayed index in the SML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class DeleteScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \": Deletes the schedule identified by the order\u0027s index number used in the displayed order list.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_DELETE_SCHEDULE_SUCCESS \u003d \"Deleted Schedule: %1$s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public DeleteScheduleCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order orderToUnschedule \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        switch (orderToUnschedule.getStatus()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case UNSCHEDULED:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_UNSCHEDULED);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case COMPLETED:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_COMPLETED);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case CANCELLED:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_CANCELLED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule toDelete \u003d orderToUnschedule.getSchedule().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.deleteSchedule(toDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_SCHEDULE_SUCCESS, toDelete), UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                || (other instanceof DeleteScheduleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteScheduleCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "-": 223
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Edits the details of an existing customer in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditCustomerCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-c\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"by the index number used in the displayed customer list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_CONTACT + \"CONTACT NUMBER] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CONTACT + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the seller manager.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final EditCustomerDescriptor editCustomerDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param index of the customer in the filtered customer list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param editCustomerDescriptor details to edit the customer with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editCustomerDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!customerToEdit.isSameAs(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setCustomer(customerToEdit, editedCustomer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer), UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * edited with {@code editCustomerDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static Customer createEditedCustomer(Customer customerToEdit,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                                                 EditCustomerDescriptor editCustomerDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert customerToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerName updatedName \u003d editCustomerDescriptor.getCustomerName().orElse(customerToEdit.getCustomerName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ContactNumber updatedContactNumber \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                editCustomerDescriptor.getContactNumber().orElse(customerToEdit.getContactNumber());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Email updatedEmail \u003d editCustomerDescriptor.getEmail().orElse(customerToEdit.getEmail());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Customer(updatedName, updatedContactNumber, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof EditCustomerCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand e \u003d (EditCustomerCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Stores the details to edit the customer with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * corresponding field value of the customer."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static class EditCustomerDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private CustomerName customerName;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private ContactNumber contactNumber;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditCustomerDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setCustomerName(toCopy.customerName);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setContactNumber(toCopy.contactNumber);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customerName, contactNumber, email, tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setCustomerName(CustomerName customerName) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cCustomerName\u003e getCustomerName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(customerName);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setContactNumber(ContactNumber contactNumber) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cContactNumber\u003e getContactNumber() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(contactNumber);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!(other instanceof EditCustomerDescriptor)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return getCustomerName().equals(e.getCustomerName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getContactNumber().equals(e.getContactNumber())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "zhixianggg": 215,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Edits the details of an existing order in SML."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditOrderCommand extends Command {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-o\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"by the index number used in the displayed order list. \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_CUSTOMER + \"CUSTOMER] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_CUSTOMER + \"2 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONE + \"4 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PRICE + \"$1500 \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_EDIT_ORDER_SUCCESS \u003d \"Edited Order: %1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the seller manager.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_CANCELLED_CANNOT_EDIT \u003d \"This order is cancelled. It cannot be edited.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_COMPLETED_CANNOT_EDIT \u003d \"This order is completed. It cannot be edited.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index orderIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Optional\u003cIndex\u003e customerIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Optional\u003cIndex\u003e phoneIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final EditOrderDescriptor editOrderDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param orderIndex of the order in the filtered order list to edit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param editOrderDescriptor details to edit the order with"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditOrderCommand(Index orderIndex, Optional\u003cIndex\u003e customerIndex,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            Optional\u003cIndex\u003e phoneIndex, EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(orderIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editOrderDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderIndex \u003d orderIndex;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneIndex \u003d phoneIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.editOrderDescriptor \u003d new EditOrderDescriptor(editOrderDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cOrder\u003e lastShownOrderList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (orderIndex.getZeroBased() \u003e\u003d lastShownOrderList.size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order orderToEdit \u003d lastShownOrderList.get(orderIndex.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (orderToEdit.getStatus().equals(Status.CANCELLED)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_CANCELLED_CANNOT_EDIT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (orderToEdit.getStatus().equals(Status.COMPLETED)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_COMPLETED_CANNOT_EDIT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cCustomer\u003e lastShownCustomerList \u003d model.getFilteredCustomerList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (customerIndex.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (customerIndex.get().getZeroBased() \u003e\u003d lastShownCustomerList.size()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Customer editedCustomer \u003d lastShownCustomerList.get(customerIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editOrderDescriptor.setCustomer(editedCustomer);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (phoneIndex.isPresent()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            List\u003cPhone\u003e lastShownPhoneList \u003d model.getFilteredPhoneList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (phoneIndex.get().getZeroBased() \u003e\u003d lastShownPhoneList.size()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Phone editedPhone \u003d lastShownPhoneList.get(phoneIndex.get().getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editOrderDescriptor.setPhone(editedPhone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order editedOrder \u003d createEditedOrder(orderToEdit, editOrderDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!orderToEdit.isSameAs(editedOrder) \u0026\u0026 model.hasOrder(editedOrder)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setOrder(orderToEdit, editedOrder);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ORDER_SUCCESS, editedOrder), UiChange.ORDER);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates and returns a {@code Order} with the details of {@code orderToEdit}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * edited with {@code editOrderDescriptor}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static Order createEditedOrder(Order orderToEdit,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                                           EditOrderDescriptor editOrderDescriptor) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert orderToEdit !\u003d null;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        UUID id \u003d orderToEdit.getId();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d editOrderDescriptor.getCustomer().orElse(orderToEdit.getCustomer());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d editOrderDescriptor.getPhone().orElse(orderToEdit.getPhone());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Price price \u003d editOrderDescriptor.getPrice().orElse(orderToEdit.getPrice());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Status status \u003d orderToEdit.getStatus();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cSchedule\u003e schedule \u003d orderToEdit.getSchedule();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editOrderDescriptor.getTags().orElse(orderToEdit.getTags());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Order(id, customer, phone, price, status, schedule, updatedTags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof EditOrderCommand)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditOrderCommand e \u003d (EditOrderCommand) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orderIndex.equals(e.orderIndex)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 customerIndex.equals(e.customerIndex)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 phoneIndex.equals(e.phoneIndex)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 editOrderDescriptor.equals(e.editOrderDescriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Stores the details to edit the order with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * corresponding field value of the order."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static class EditOrderDescriptor {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Customer customer;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditOrderDescriptor() {}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditOrderDescriptor(EditOrderDescriptor toCopy) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setCustomer(toCopy.customer);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(customer, phone, price, tags);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setCustomer(Customer customer) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cCustomer\u003e getCustomer() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(customer);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!(other instanceof EditOrderDescriptor)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            EditOrderDescriptor e \u003d (EditOrderDescriptor) other;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return getCustomer().equals(e.getCustomer())"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "zhixianggg": 266
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditPhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BRAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTITYNUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONENAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIALNUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PHONES;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import com.sun.scenario.effect.Identity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Edits the details of an existing phone in SML."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditPhoneCommand extends Command {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-p\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the phone identified \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"by the index number used in the displayed phone list. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_IDENTITYNUM + \"IMEI] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_SERIALNUM + \"SERIAL NUMBER] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_PHONENAME + \"NAME] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_BRAND + \"BRAND] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_CAPACITY + \"CAPACITY] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_COLOUR + \"COLOUR] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_COST + \"COST] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_PHONENAME + \"iPhone 7 \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            + PREFIX_COST + \"$200\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_EDIT_PHONE_SUCCESS \u003d \"Edited Phone: %1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHONE \u003d \"This phone already exists in the seller manager.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final EditPhoneDescriptor editPhoneDescriptor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param index of the phone in the filtered phone list to edit"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param editPhoneDescriptor details to edit the phone with"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneCommand(Index index, EditPhoneDescriptor editPhoneDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editPhoneDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.editPhoneDescriptor \u003d new EditPhoneDescriptor(editPhoneDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        List\u003cPhone\u003e lastShownList \u003d model.getFilteredPhoneList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone editedPhone \u003d createEditedPhone(phoneToEdit, editPhoneDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!phoneToEdit.isSameAs(editedPhone) \u0026\u0026 model.hasPhone(editedPhone)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PHONE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.setPhone(phoneToEdit, editedPhone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredPhoneList(PREDICATE_SHOW_ALL_PHONES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PHONE_SUCCESS, editedPhone), UiChange.PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates and returns a {@code Phone} with the details of {@code PhoneToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * edited with {@code editPhoneDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static Phone createEditedPhone(Phone phoneToEdit,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                                                 EditPhoneDescriptor editPhoneDescriptor) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert phoneToEdit !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        IdentityNumber updatedIdentityNumber \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                editPhoneDescriptor.getIdentityNumber().orElse(phoneToEdit.getIdentityNumber());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        SerialNumber updatedSerialNumber \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                editPhoneDescriptor.getSerialNumber().orElse(phoneToEdit.getSerialNumber());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        PhoneName updatedName \u003d editPhoneDescriptor.getPhoneName().orElse(phoneToEdit.getPhoneName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Brand updatedBrand \u003d editPhoneDescriptor.getBrand().orElse(phoneToEdit.getBrand());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Capacity updatedCapacity \u003d editPhoneDescriptor.getCapacity().orElse(phoneToEdit.getCapacity());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Colour updatedColour \u003d editPhoneDescriptor.getColour().orElse(phoneToEdit.getColour());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Cost updatedCost \u003d editPhoneDescriptor.getCost().orElse(phoneToEdit.getCost());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPhoneDescriptor.getTags().orElse(phoneToEdit.getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Phone(updatedIdentityNumber, updatedSerialNumber,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                updatedName, updatedBrand, updatedCapacity, updatedColour, updatedCost, updatedTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof EditPhoneCommand)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand e \u003d (EditPhoneCommand) other;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 editPhoneDescriptor.equals(e.editPhoneDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Stores the details to edit the phone with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * corresponding field value of the phone."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static class EditPhoneDescriptor {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private IdentityNumber identityNumber;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private PhoneName phoneName;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Brand brand;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Capacity capacity;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Colour colour;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditPhoneDescriptor() {}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public EditPhoneDescriptor(EditPhoneDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setIdentityNumber(toCopy.identityNumber);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setSerialNumber(toCopy.serialNumber);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setPhoneName(toCopy.phoneName);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setBrand(toCopy.brand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setCapacity(toCopy.capacity);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setColour(toCopy.colour);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return CollectionUtil.isAnyNonNull(phoneName, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cIdentityNumber\u003e getIdentityNumber() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(identityNumber);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setIdentityNumber(IdentityNumber identityNumber) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.identityNumber \u003d identityNumber;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cSerialNumber\u003e getSerialNumber() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(serialNumber);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setSerialNumber(SerialNumber serialNumber) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cPhoneName\u003e getPhoneName() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(phoneName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setPhoneName(PhoneName phoneName) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.phoneName \u003d phoneName;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cBrand\u003e getBrand() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(brand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setBrand(Brand brand) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.brand \u003d brand;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cCapacity\u003e getCapacity() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(capacity);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setCapacity(Capacity capacity) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cColour\u003e getColour() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(colour);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setColour(Colour colour) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.colour \u003d colour;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (!(other instanceof EditPhoneDescriptor)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            EditPhoneDescriptor e \u003d (EditPhoneDescriptor) other;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return getIdentityNumber().equals(e.getIdentityNumber())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getSerialNumber().equals(e.getSerialNumber())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getPhoneName().equals(e.getPhoneName())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getBrand().equals(e.getBrand())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getCapacity().equals(e.getCapacity())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getColour().equals(e.getColour())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "zhixianggg": 279
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SCHEDULE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Edits the details of an existing schedule in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class EditScheduleCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the schedule identified \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"by the schedule\u0027s order index number in the displayed order list. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"[\" + PREFIX_TIME + \"TIME] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"[\" + PREFIX_VENUE + \"VENUE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_DATE + \"2019.12.12 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_TIME + \"12.12 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            + PREFIX_VENUE + \"NUS\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_EDIT_SCHEDULE_SUCCESS \u003d \"Edited Schedule: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"This schedule already exists in the SML.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final EditScheduleDescriptor editScheduleDescriptor;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @param index of the order to be rescheduled in the filtered order list to edit"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @param editScheduleDescriptor details to edit the schedule with"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public EditScheduleCommand(Index index, EditScheduleDescriptor editScheduleDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(editScheduleDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.editScheduleDescriptor \u003d new EditScheduleDescriptor(editScheduleDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ORDER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order orderToReschedule \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        switch (orderToReschedule.getStatus()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case COMPLETED:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_COMPLETED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case CANCELLED:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_CANCELLED);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case UNSCHEDULED:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ORDER_UNSCHEDULED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // do nothing"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule scheduleToEdit \u003d orderToReschedule.getSchedule().get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule editedSchedule \u003d createEditedSchedule(scheduleToEdit, editScheduleDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!scheduleToEdit.isSameAs(editedSchedule) \u0026\u0026 model.hasSchedule(editedSchedule)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.setSchedule(scheduleToEdit, editedSchedule);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SCHEDULE_SUCCESS, editedSchedule), UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Creates and returns a {@code Schedule} with the details of {@code scheduleToEdit}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * edited with {@code editScheduleDescriptor}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static Schedule createEditedSchedule(Schedule scheduleToEdit,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                                                 EditScheduleDescriptor editScheduleDescriptor) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assert scheduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        UUID id \u003d scheduleToEdit.getId();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar updatedDate \u003d editScheduleDescriptor.getDate().orElse(scheduleToEdit.getCalendar());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar updatedTime \u003d editScheduleDescriptor.getTime().orElse(scheduleToEdit.getCalendar());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar updatedCalendar \u003d getUpdatedCalendar(updatedDate, updatedTime);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Venue updatedVenue \u003d editScheduleDescriptor.getVenue().orElse(scheduleToEdit.getVenue());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editScheduleDescriptor.getTags().orElse(scheduleToEdit.getTags());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Schedule(id, updatedCalendar, updatedVenue, updatedTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static Calendar getUpdatedCalendar(Calendar updatedDate, Calendar updatedTime) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int year \u003d updatedDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int month \u003d updatedDate.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int date \u003d updatedDate.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int hour \u003d updatedTime.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int minute \u003d updatedTime.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Calendar.Builder().setDate(year, month, date)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .setTimeOfDay(hour, minute, 0).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!(other instanceof EditScheduleCommand)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        EditScheduleCommand e \u003d (EditScheduleCommand) other;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 editScheduleDescriptor.equals(e.editScheduleDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Stores the details to edit the schedule with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * corresponding field value of the schedule."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static class EditScheduleDescriptor {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        private Calendar date;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        private Calendar time;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        private Venue venue;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public EditScheduleDescriptor() {}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public EditScheduleDescriptor(EditScheduleDescriptor toCopy) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            setTime(toCopy.time);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            setVenue(toCopy.venue);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return CollectionUtil.isAnyNonNull(date, time, venue, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public void setDate(Calendar calendar) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            date \u003d calendar;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public void setTime(Calendar calendar) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            time \u003d calendar;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public Optional\u003cCalendar\u003e getDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public Optional\u003cCalendar\u003e getTime() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return Optional.ofNullable(time);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public void setVenue(Venue venue) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            this.venue \u003d venue;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public Optional\u003cVenue\u003e getVenue() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return Optional.ofNullable(venue);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            if (!(other instanceof EditScheduleDescriptor)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            EditScheduleDescriptor e \u003d (EditScheduleDescriptor) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    \u0026\u0026 getTime().equals(e.getTime())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    \u0026\u0026 getVenue().equals(e.getVenue())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Finds and lists all customers in customer book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class FindCustomerCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-c\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all customers whose data fields contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Predicate\u003cCustomer\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindCustomerCommand(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        model.getFilteredCustomerList().size()), UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof FindCustomerCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCustomerCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 10,
      "EugeneTeu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Finds and lists all orders in order book whose id contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class FindOrderCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-o\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all order whose data fields matches the input \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"12345678\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Predicate\u003cOrder\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindOrderCommand(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredOrderList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                String.format(Messages.MESSAGE_ORDERS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        model.getFilteredOrderList().size()), UiChange.ORDER);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof FindOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindOrderCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 10,
      "EugeneTeu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/findcommand/FindPhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Finds and lists all phones in phone book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class FindPhoneCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-p\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all phone whose data fields contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" iphone max\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Predicate\u003cPhone\u003e predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindPhoneCommand(Predicate\u003cPhone\u003e predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredPhoneList(predicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                String.format(Messages.MESSAGE_PHONE_LISTED_OVERVIEW, model.getFilteredPhoneList().size()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                UiChange.PHONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof FindPhoneCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindPhoneCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 12,
      "EugeneTeu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListCustomerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * List all customers in the customer book to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ListCustomerCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //to be discussed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-c\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all customers\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "EugeneTeu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListOrderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ORDER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * List all customers in the Order book to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ListOrderCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //to be discussed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-o\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all current orders\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDER);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.ORDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "EugeneTeu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListPhoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PHONES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Lists all phones in the phone book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ListPhoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //to be discussed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-p\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all current phones\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredPhoneList(PREDICATE_SHOW_ALL_PHONES);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.PHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "EugeneTeu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_SCHEDULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * List all customers in the customer book to the user"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ListScheduleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //to be discussed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed current schedule\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        model.updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "EugeneTeu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statisticcommand/StatisticType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.logic.commands.statisticcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * To differentiate which type of statistic to calculate"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public enum StatisticType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    PROFIT(\"PROFIT\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    REVENUE(\"REVENUE\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    COST(\"COST\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    StatisticType(String type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/statisticcommand/StatsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.logic.commands.statisticcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDING_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTING_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STAT_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Utility class to pass  on parameters to the method call in mainWindow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"generate-s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \": generates statistic for PROFIT/COST/REVENUE\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + PREFIX_STAT_TYPE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"{Type of stat}  \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + PREFIX_STARTING_DATE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"/{starting date (YYYY.MM.DD)}  \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + PREFIX_ENDING_DATE"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"/{ending date}\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example (Date input mode) : generate-s s/REVENUE d1/2018.12.13 d2/2019.11.13\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example (No Date input mode) : generate-s s/REVENUE\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String NON_DEFAULT_MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"A set of starting and \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"ending dates have to be present\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"Example: d1/2017.04.12 d2/2018.06.23\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Calendar startingDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Calendar endingDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final StatisticType statisticType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructor to return StatsCommand object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsCommand(Calendar startingDate, Calendar endingDate, StatisticType statisticType) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.startingDate \u003d startingDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.endingDate \u003d endingDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statisticType \u003d statisticType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        StatsPayload payload \u003d new StatsPayload(this.startingDate, this.endingDate, statisticType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_USAGE, payload, UiChange.STATS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switchcommand/SwitchArchivedOrderPanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.logic.commands.switchcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Command to change the focused panel to Archived Order"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class SwitchArchivedOrderPanelCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-a\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to archived Order panel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.ARCHIVED_ORDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switchcommand/SwitchCustomerPanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.switchcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Command to change the focused panel to Customer"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class SwitchCustomerPanelCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-c\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to Customer panel\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.CUSTOMER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 4,
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switchcommand/SwitchOrderPanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.switchcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Command to change the focused panel to Order"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class SwitchOrderPanelCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-o\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to Order panel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.ORDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 4,
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switchcommand/SwitchPhonePanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.switchcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Command to change the focused panel to Phone"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class SwitchPhonePanelCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-p\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to Phone panel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.PHONE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 4,
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/switchcommand/SwitchSchedulePanelCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.switchcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Command to change the focused panel to Schedule"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class SwitchSchedulePanelCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch-s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Switched to Schedule panel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        model.setCalendarDate(Calendar.getInstance());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, UiChange.SCHEDULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 3,
      "zhixianggg": 4,
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CancelOrderCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CompleteOrderCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddOrderCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddPhoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.clearcommand.ClearCustomerCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.clearcommand.ClearPhoneCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeletePhoneCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteScheduleCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditOrderCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditScheduleCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCustomerCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindOrderCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindPhoneCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCustomerCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListOrderCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListPhoneCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.switchcommand.SwitchArchivedOrderPanelCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.switchcommand.SwitchCustomerPanelCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.switchcommand.SwitchOrderPanelCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.switchcommand.SwitchPhonePanelCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.switchcommand.SwitchSchedulePanelCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddCustomerCommandParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddOrderCommandParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddPhoneCommandParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddScheduleCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeleteCommandParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeleteCustomerCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeletePhoneCommandParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeleteScheduleCommandParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.editcommandparser.EditCustomerCommandParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.editcommandparser.EditOrderCommandParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.editcommandparser.EditPhoneCommandParser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.editcommandparser.EditScheduleCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.findcommandparser.FindCustomerCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.findcommandparser.FindOrderCommandParser;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.findcommandparser.FindPhoneCommandParser;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case AddCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new AddCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case AddPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new AddPhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case AddScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return new AddScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case EditCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new EditCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case EditScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return new EditScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case EditPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new EditPhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case EditOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new EditOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case DeleteCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DeleteCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case DeletePhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DeletePhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case DeleteScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return new DeleteScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case CancelOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new CancelOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case CompleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new CompleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case FindCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindCustomerCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case FindPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindPhoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case FindOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case ListCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new ListCustomerCommand();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case ListPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new ListPhoneCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case ListOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new ListOrderCommand();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case ClearCustomerCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new ClearCustomerCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case ClearPhoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new ClearPhoneCommand();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case SwitchCustomerPanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new SwitchCustomerPanelCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case SwitchPhonePanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new SwitchPhonePanelCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case SwitchOrderPanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new SwitchOrderPanelCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case SwitchSchedulePanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new SwitchSchedulePanelCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case SwitchArchivedOrderPanelCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return new SwitchArchivedOrderPanelCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        case ScheduleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return new ScheduleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 18,
      "zhixianggg": 90,
      "-": 67,
      "EugeneTeu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CancelOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CancelOrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new CancelOrderCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CancelOrderCommandParser implements Parser\u003cCancelOrderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CancelOrderCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a CancelOrderCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CancelOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new CancelOrderCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CancelOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// Customer"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// Phone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_IDENTITYNUM \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_SERIALNUM \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_PHONENAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_BRAND \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"cp/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_COLOUR \u003d new Prefix(\"cl/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// Order"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_ORDERID \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMER \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    // price + tags"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// Schedule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"cd/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final Prefix PREFIX_TIME \u003d new Prefix(\"ct/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_VENUE \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //// Stats"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Prefix PREFIX_STAT_TYPE \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Prefix PREFIX_STARTING_DATE \u003d new Prefix(\"d1/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Prefix PREFIX_ENDING_DATE \u003d new Prefix(\"d2/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 2,
      "zhixianggg": 29,
      "-": 13,
      "EugeneTeu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CompleteOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CompleteOrderCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new CompleteOrderCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CompleteOrderCommandParser implements Parser\u003cCompleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CompleteOrderCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a CompleteOrderCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CompleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new CompleteOrderCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CompleteOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.time.DateTimeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatisticType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsParseUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Date is not in the correct format.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Time is not in the correct format.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_INVALID_CALENDAR \u003d \"Date and Time are not in the correct format.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Parses a {@code String phone} into a {@code phone}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String contactNumber} into a {@code contactNumber}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code contactNumber} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static ContactNumber parseContactNumber(String contactNumber) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(contactNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedContactNumber \u003d contactNumber.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!ContactNumber.isValidContactNumber(trimmedContactNumber)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(ContactNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new ContactNumber(trimmedContactNumber);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String customerName} into a {@code customerName}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code customerName} is invalid."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static CustomerName parseCustomerName(String customerName) throws ParseException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customerName);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedCustomerName \u003d customerName.trim();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!CustomerName.isValidCustomerName(trimmedCustomerName)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(CustomerName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CustomerName(trimmedCustomerName);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String brand} into a {@code brand}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code brand} is invalid."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Brand parseBrand(String brand) throws ParseException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(brand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedBrand \u003d brand.trim();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!Brand.isValidBrand(trimmedBrand)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Brand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Brand(trimmedBrand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String capacity} into a {@code capacity}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code capacity} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Capacity parseCapacity(String capacity) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(capacity);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedCapacity \u003d capacity.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!Capacity.isValidCapacity(trimmedCapacity)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        switch(trimmedCapacity) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"8\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_8GB;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"16\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_16GB;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"32\":"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_32GB;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"64\":"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_64GB;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"128\":"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_128GB;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"256\":"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_256GB;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"512\":"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_512GB;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        case \"1024\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Capacity.SIZE_1024GB;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String colour} into a {@code colour}."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code colour} is invalid."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Colour parseColour(String colour) throws ParseException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedColour \u003d colour.trim();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!Colour.isValidColour(trimmedColour)) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Colour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Colour(trimmedColour);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String cost} into a {@code cost}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code cost} is invalid."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Cost parseCost(String cost) throws ParseException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedCost \u003d cost.trim();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!Cost.isValidCost(trimmedCost)) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Cost(trimmedCost);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String phoneName} into a {@code phoneName}."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code phoneName} is invalid."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static PhoneName parsePhoneName(String phoneName) throws ParseException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phoneName);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedPhoneName \u003d phoneName.trim();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!PhoneName.isValidPhoneName(trimmedPhoneName)) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(PhoneName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new PhoneName(trimmedPhoneName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String identityNumber} into a {@code identityNumber}."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code phoneName} is invalid."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static IdentityNumber parseIdentityNumber(String identityNumber) throws ParseException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(identityNumber);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedIdentityNumber \u003d identityNumber.trim();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!IdentityNumber.isValidIdentityNumber(trimmedIdentityNumber)) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(IdentityNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new IdentityNumber(trimmedIdentityNumber);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String serialNumber} into a {@code serialNumber}."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code serialNumber} is invalid."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static SerialNumber parseSerialNumber(String serialNumber) throws ParseException {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedSerialNumber \u003d serialNumber.trim();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(trimmedSerialNumber)) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new SerialNumber(trimmedSerialNumber);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Parses a {@Code String statsInput} into {@Code statisticType}."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws ParseException if the given {@Code statsInput} is invalid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static StatisticType parseStatsType(String statsInput) throws ParseException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(statsInput);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String trimmedStatsType \u003d statsInput.trim();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!StatsParseUtil.isValidStatType(trimmedStatsType)) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new ParseException(Messages.STATS_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        switch (trimmedStatsType) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case \"PROFIT\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return StatisticType.PROFIT;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case \"COST\":"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return StatisticType.COST;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        case \"REVENUE\":"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return StatisticType.REVENUE;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new ParseException(\"Invalid type of Statistics. Only possible ones include:\\n\""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    + \"PROFIT, COST, REVENUE\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    //@@author QiuJiaaa -reused"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // reused from the parse Calendar method with minor modifications"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *Parse a {@Code String calendar} into a {@Code calendar}."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static Calendar parseDateCalendar(String calendar) throws ParseException {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String trimmedDate \u003d calendar.trim();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String[] stringCalendar \u003d trimmedDate.split(\"\\\\.\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (stringCalendar.length !\u003d 3) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(Messages.DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int[] input \u003d new int[3];"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        LocalDateTime localDateTime;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            for (int index \u003d 0; index \u003c 3; index++) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                input[index] \u003d Integer.parseInt(stringCalendar[index]);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                //offset for month"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            localDateTime \u003d LocalDateTime.of(input[0], input[1], input[2], 0, 0);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(Messages.DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //offset month as Calendar takes in 0-based month"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        int offsetMonth \u003d input[1] - 1;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new Calendar.Builder().setDate(input[0], offsetMonth, input[2]).build();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses a {@code String date, time} into a {@code Calendar}."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the given {@code calendar} is invalid."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static Calendar parseCalendar(String date, String time) throws ParseException {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar calendarDate \u003d parseDateCalendar(date);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar calendarTime \u003d parseTimeCalendar(time);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int newYear \u003d calendarDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int newMonth \u003d calendarDate.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int newDate \u003d calendarDate.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int newHour \u003d calendarTime.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int newMinute \u003d calendarTime.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Calendar.Builder().setDate(newYear, newMonth, newDate)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .setTimeOfDay(newHour, newMinute, 0).build();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *Parse a {@Code String time} into a {@Code calendar}."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static Calendar parseTimeCalendar(String time) throws ParseException {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String[] timeArr \u003d time.split(\"\\\\.\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (timeArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int[] input \u003d new int[3];"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        LocalTime localTime;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            for (int index \u003d 0; index \u003c 2; index++) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                input[index] \u003d Integer.parseInt(timeArr[index]);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            localTime \u003d LocalTime.of(input[0], input[1]);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } catch (NumberFormatException | DateTimeException e) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(Messages.DATE_MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Calendar.Builder().setTimeOfDay(input[0], input[1], 0).build();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses a {@code String venue} into a {@code Venue}."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the given {@code venue} is invalid."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static Venue parseVenue(String venue) throws ParseException {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String trimmedVenue \u003d venue.trim();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!Venue.isValidVenue(trimmedVenue)) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Venue(trimmedVenue);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 95,
      "zhixianggg": 191,
      "-": 123,
      "EugeneTeu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.ScheduleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Parses input arguments and creates a new ScheduleCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * and returns an ScheduleCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar calendar \u003d ParserUtil.parseDateCalendar(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new ScheduleCommand(calendar);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE_INPUT_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENDING_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STARTING_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STAT_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatisticType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsParseUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatsCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and returns an StatsCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        ArgumentMultimap argMultiMap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STAT_TYPE, PREFIX_STARTING_DATE, PREFIX_ENDING_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //date arguments are optional"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!arePrefixesPresent(argMultiMap, PREFIX_STAT_TYPE)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        StatisticType type \u003d ParserUtil.parseStatsType(argMultiMap.getValue(PREFIX_STAT_TYPE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Optional\u003cString\u003e startingDateValue \u003d argMultiMap.getValue(PREFIX_STARTING_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Optional\u003cString\u003e endingDateValue \u003d argMultiMap.getValue(PREFIX_ENDING_DATE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //if one date value is present and not the other"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if ((startingDateValue.isEmpty() \u0026\u0026 endingDateValue.isPresent())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                | (startingDateValue.isPresent() \u0026\u0026 endingDateValue.isEmpty())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Messages.OPTIONAL_DATE_MESSAGE_CONSTRAINTS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    StatsCommand.NON_DEFAULT_MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (startingDateValue.isPresent() \u0026\u0026 endingDateValue.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            Calendar startingDate \u003d ParserUtil.parseDateCalendar("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    argMultiMap.getValue(PREFIX_STARTING_DATE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            Calendar endingDate \u003d ParserUtil.parseDateCalendar("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    argMultiMap.getValue(PREFIX_ENDING_DATE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (startingDate.compareTo(endingDate) \u003e 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_DATE_INPUT_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case COST:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(startingDate, endingDate, StatisticType.COST);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case PROFIT:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(startingDate, endingDate, StatisticType.PROFIT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case REVENUE:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(startingDate, endingDate, StatisticType.REVENUE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new ParseException(\"Wrong Statistic type for normal calculation mode, \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        + \"types here only include:\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        + \"PROFIT, COST, REVENUE\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case COST:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(StatsParseUtil.MIN_DATE, StatsParseUtil.MAX_DATE, StatisticType.COST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case PROFIT:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(StatsParseUtil.MIN_DATE, StatsParseUtil.MAX_DATE, StatisticType.PROFIT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case REVENUE:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                return new StatsCommand(StatsParseUtil.MIN_DATE, StatsParseUtil.MAX_DATE, StatisticType.REVENUE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new ParseException(\"Wrong Statistic type for no date calculation mode, \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        + \"default types here only include:\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        + \"PROFIT, COST, REVENUE\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 24,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCustomerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new AddCustomerCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddCustomerCommandParser implements Parser\u003cAddCustomerCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCustomerCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an AddCustomerCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CONTACT, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_CONTACT, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerName customerName \u003d ParserUtil.parseCustomerName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ContactNumber contactNumber \u003d ParserUtil.parseContactNumber(argMultimap.getValue(PREFIX_CONTACT).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d new Customer(customerName, contactNumber, email, tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new AddCustomerCommand(customer);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddOrderCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new AddOrderCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddOrderCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an AddOrderCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMER, PREFIX_PHONE, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_CUSTOMER, PREFIX_PHONE, PREFIX_PRICE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index customerIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            customerIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index phoneIndex;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            phoneIndex \u003d ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new AddOrderCommand(customerIndex, phoneIndex, price, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddPhoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BRAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTITYNUM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONENAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIALNUM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddPhoneCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new AddPhoneCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddPhoneCommandParser implements Parser\u003cAddPhoneCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddPhoneCommand"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an AddPhoneCommand object for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public AddPhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IDENTITYNUM, PREFIX_SERIALNUM, PREFIX_PHONENAME,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        PREFIX_BRAND, PREFIX_CAPACITY, PREFIX_COLOUR, PREFIX_COST, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_IDENTITYNUM, PREFIX_SERIALNUM, PREFIX_PHONENAME,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                PREFIX_BRAND, PREFIX_CAPACITY, PREFIX_COLOUR, PREFIX_COST)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPhoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        IdentityNumber identityNumber \u003d ParserUtil.parseIdentityNumber(argMultimap.getValue(PREFIX_IDENTITYNUM).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        SerialNumber serialNumber \u003d ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIALNUM).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        PhoneName phoneName \u003d ParserUtil.parsePhoneName(argMultimap.getValue(PREFIX_PHONENAME).get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Brand brand \u003d ParserUtil.parseBrand(argMultimap.getValue(PREFIX_BRAND).get());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Capacity capacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Colour colour \u003d ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR).get());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Cost cost \u003d ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d new Phone(identityNumber, serialNumber, phoneName, brand, capacity, colour, cost, tagList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new AddPhoneCommand(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddScheduleCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Parses input arguments and creates a new AddScheduleCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class AddScheduleCommandParser implements Parser\u003cAddScheduleCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddScheduleCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * and returns an AddScheduleCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public AddScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_VENUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_TIME, PREFIX_VENUE)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScheduleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar calendar \u003d ParserUtil.parseCalendar(argMultimap.getValue(PREFIX_DATE).get(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                argMultimap.getValue(PREFIX_TIME).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Venue venue \u003d ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule schedule \u003d new Schedule(UUID.randomUUID(), calendar, venue, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new AddScheduleCommand(schedule, index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCustomerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new DeleteCustomerCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeleteCustomerCommandParser implements Parser\u003cDeleteCustomerCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCustomerCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a DeleteCustomerCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DeleteCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DeleteCustomerCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeletePhoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeletePhoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new DeletePhoneCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeletePhoneCommandParser implements Parser\u003cDeletePhoneCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeletePhoneCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a DeletePhoneCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DeletePhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DeletePhoneCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePhoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteScheduleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Parses input arguments and creates a new DeleteScheduleCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class DeleteScheduleCommandParser implements Parser\u003cDeleteScheduleCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteScheduleCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * and returns a DeleteScheduleCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public DeleteScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return new DeleteScheduleCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/*package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor editPersonDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 8,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new EditCustomerCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditCustomerCommandParser implements Parser\u003cEditCustomerCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCustomerCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an EditCustomerCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CONTACT, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCustomerCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editCustomerDescriptor.setCustomerName("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parseCustomerName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editCustomerDescriptor.setContactNumber("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parseContactNumber(argMultimap.getValue(PREFIX_CONTACT).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editCustomerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!editCustomerDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(EditCustomerCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new EditCustomerCommand(index, editCustomerDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditOrderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditOrderCommand.EditOrderDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new EditOrderCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditOrderCommandParser implements Parser\u003cEditOrderCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditOrderCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an EditOrderCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PHONE, PREFIX_CUSTOMER, PREFIX_PRICE, PREFIX_TAG);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index orderIndex;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            orderIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cIndex\u003e customerIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                customerIndex \u003d Optional.of(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_CUSTOMER).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Optional\u003cIndex\u003e phoneIndex \u003d Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                phoneIndex \u003d Optional.of(ParserUtil.parseIndex(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditOrderCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditOrderDescriptor editOrderDescriptor \u003d new EditOrderDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editOrderDescriptor.setPrice("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editOrderDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!editOrderDescriptor.isAnyFieldEdited()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 customerIndex.isEmpty()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 phoneIndex.isEmpty()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(EditOrderCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new EditOrderCommand(orderIndex, customerIndex, phoneIndex, editOrderDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditPhoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BRAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTITYNUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONENAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIALNUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand.EditPhoneDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new EditPhoneCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditPhoneCommandParser implements Parser\u003cEditPhoneCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPhoneCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns an EditPhoneCommand object for execution."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IDENTITYNUM, PREFIX_SERIALNUM, PREFIX_PHONENAME,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        PREFIX_BRAND, PREFIX_CAPACITY, PREFIX_COLOUR, PREFIX_COST, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPhoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor editPhoneDescriptor \u003d new EditPhoneDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IDENTITYNUM).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setIdentityNumber("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parseIdentityNumber(argMultimap.getValue(PREFIX_IDENTITYNUM).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERIALNUM).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setSerialNumber("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parseSerialNumber(argMultimap.getValue(PREFIX_SERIALNUM).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONENAME).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setPhoneName("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parsePhoneName(argMultimap.getValue(PREFIX_PHONENAME).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BRAND).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setBrand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    ParserUtil.parseBrand(argMultimap.getValue(PREFIX_BRAND).get()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setCapacity(ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOUR).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setColour(ParserUtil.parseColour(argMultimap.getValue(PREFIX_COLOUR).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            editPhoneDescriptor.setCost(ParserUtil.parseCost(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPhoneDescriptor::setTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!editPhoneDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ParseException(EditPhoneCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new EditPhoneCommand(index, editPhoneDescriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditScheduleCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VENUE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditScheduleCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditScheduleCommand.EditScheduleDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Parses input arguments and creates a new EditScheduleCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class EditScheduleCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditScheduleCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * and returns an EditScheduleCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public EditScheduleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_TIME, PREFIX_VENUE, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditScheduleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        EditScheduleDescriptor editScheduleDescriptor \u003d new EditScheduleDescriptor();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            editScheduleDescriptor.setDate("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    ParserUtil.parseDateCalendar(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TIME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            editScheduleDescriptor.setTime("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    ParserUtil.parseTimeCalendar(argMultimap.getValue(PREFIX_TIME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VENUE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            editScheduleDescriptor.setVenue(ParserUtil.parseVenue(argMultimap.getValue(PREFIX_VENUE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editScheduleDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!editScheduleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            throw new ParseException(EditScheduleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new EditScheduleCommand(index, editScheduleDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindCustomerCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCustomerCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.ContactNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.CustomerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.CustomerTagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new FindCustomerCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class FindCustomerCommandParser implements Parser\u003cFindCustomerCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCustomerCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a FindCustomerCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindCustomerCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CONTACT, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        //dummy predicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cCustomer\u003e predicate \u003d x -\u003e false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_NAME).isPresent()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_CONTACT).isPresent()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_EMAIL).isPresent()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d new CustomerNameContainsKeywordsPredicate(Arrays.asList(keywords))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new ContactNumberContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new CustomerTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_NAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new CustomerNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CONTACT).isPresent()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_CONTACT).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new ContactNumberContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_EMAIL).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new CustomerTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindOrderCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDERID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STATUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindOrderCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.CustomerContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.IdContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.OrderTagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.PriceContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.predicates.StatusContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new FindOrderCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class FindOrderCommandParser implements Parser\u003cFindOrderCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindOrderCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a FindOrderCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ORDERID, PREFIX_PHONE, PREFIX_CUSTOMER,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        PREFIX_PRICE, PREFIX_STATUS, PREFIX_TAG);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        //dummy predicate"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cOrder\u003e predicate \u003d x -\u003e false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_ORDERID).isPresent()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_PHONE).isPresent()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_CUSTOMER).isPresent()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_PRICE).isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_STATUS).isPresent()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d new IdContainsKeywordsPredicate(Arrays.asList(keywords))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new CustomerContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new PriceContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new StatusContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    .or(new OrderTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindOrderCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ORDERID).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_ORDERID).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new IdContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_PHONE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CUSTOMER).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_CUSTOMER).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new CustomerContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_PRICE).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new PriceContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_STATUS).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new StatusContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new OrderTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new FindOrderCommand(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/findcommandparser/FindPhoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.findcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BRAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CAPACITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COLOUR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_IDENTITYNUM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONENAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SERIALNUM;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindPhoneCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.BrandContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.CapacityContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.ColourContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.CostContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.IdentityNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.PhoneNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.PhoneTagContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.SerialNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Parses input arguments and creates a new FindPhoneCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class FindPhoneCommandParser implements Parser\u003cFindPhoneCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindPhoneCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * and returns a FindPhoneCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public FindPhoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_IDENTITYNUM, PREFIX_SERIALNUM, PREFIX_PHONENAME,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        PREFIX_BRAND, PREFIX_CAPACITY, PREFIX_COLOUR, PREFIX_COST, PREFIX_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        //dummy predicate"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cPhone\u003e predicate \u003d x -\u003e false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_IDENTITYNUM).isPresent()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_SERIALNUM).isPresent()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_PHONENAME).isPresent()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_BRAND).isPresent()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_CAPACITY).isPresent()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_COLOUR).isPresent()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_COST).isPresent()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPhoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d new PhoneNameContainsKeywordsPredicate(Arrays.asList(keywords))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new BrandContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new CapacityContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new ColourContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new CostContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new IdentityNumberContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new SerialNumberContainsKeywordsPredicate(Arrays.asList(keywords)))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            .or(new PhoneTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new FindPhoneCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_IDENTITYNUM).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_IDENTITYNUM).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new IdentityNumberContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SERIALNUM).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_SERIALNUM).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new SerialNumberContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONENAME).isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_PHONENAME).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new PhoneNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BRAND).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_BRAND).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new BrandContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_CAPACITY).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new CapacityContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COLOUR).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_COLOUR).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new ColourContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_COST).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new CostContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            String[] keywords \u003d argMultimap.getValue(PREFIX_TAG).get().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            predicate \u003d predicate.or(new PhoneTagContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new FindPhoneCommand(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarDate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Stores a property to set the date to display on the calendar panel."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class CalendarDate {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private SimpleObjectProperty\u003cCalendar\u003e property \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CalendarDate(Calendar calendar) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        property.set(calendar);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendar(Calendar calendar) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        property.set(calendar);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public SimpleObjectProperty\u003cCalendar\u003e getProperty() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this.property;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return property.get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                || (other instanceof CalendarDate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 getCalendar().equals(((CalendarDate) other).getCalendar()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DataBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Wraps all data at the data book level."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Duplicates are not allowed by .isSameAs comparison."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * @param \u003cT\u003e A class that implements {@code Identifiable}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class DataBook\u003cT extends Identifiable\u003cT\u003e\u003e implements ReadOnlyDataBook\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final UniqueList\u003cT\u003e dataList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        dataList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Creates a DataBook using the data in the {@code toBeCopied}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook(ReadOnlyDataBook\u003cT\u003e toBeCopied) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Replaces the contents with the given {@code data}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * {@code data} must not contain duplicate objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void setData(List\u003cT\u003e data) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.dataList.setList(data);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Resets the existing data of this {@code DataBook} with {@code newData}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void resetData(ReadOnlyDataBook\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        setData(newData.getList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if an object with the same identity as {@code object} exists in the data book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean has(T object) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return dataList.contains(object);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds an object to the data book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The object must not already exist in the data book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void add(T object) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(object);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        dataList.add(object);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Replaces the given object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * {@code target} must exist in the data book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void set(T target, T editedObject) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        dataList.set(target, editedObject);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Removes {@code key} from this {@code DataBook}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * {@code key} must exist in the data book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void remove(T key) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        dataList.remove(key);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return dataList.asUnmodifiableObservableList().size() + \" data\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public ObservableList\u003cT\u003e getList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return dataList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof DataBook // instanceof handles nulls"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 dataList.equals(((DataBook) other).dataList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return dataList.hashCode();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/model/DuplicateIdentityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Signals that the operation will result in duplicate {@code Identifiable} objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class DuplicateIdentityException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DuplicateIdentityException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        super(\"Operation would result in duplicates\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Identifiable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Classes that implement this interface declare that their instances are able to be uniquely identified."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * @param \u003cT\u003e Any class whose instances are capable of being identified uniquely."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public interface Identifiable\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    boolean isSameAs(T other);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IdentityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Signals that the {@code Identifiable} object cannot be found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class IdentityNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cPhone\u003e PREDICATE_SHOW_ALL_PHONES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDER \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cSchedule\u003e PREDICATE_SHOW_ALL_SCHEDULE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////customer operations"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces address book data with the data in {@code customerBook}."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /** Returns the customer DataBook */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteCustomer(Customer target);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the customer book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setCustomer(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered customer list */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// phone operations"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces phone book data with the data in {@code phoneBook}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setPhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /** Returns the Phone DataBook */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cPhone\u003e getPhoneBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a phone with the same identity as {@code phone} exists in the phone book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasPhone(Phone phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given phone."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone must exist in the phone book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deletePhone(Phone target);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given phone."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code phone} must not already exist in the address book."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addPhone(Phone phone);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given phone {@code target} with {@code editedPhone}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone identity of {@code editedPhone} must not be the same as another existing phone in the address book."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setPhone(Phone target, Phone editedPhone);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered phone list */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cPhone\u003e getFilteredPhoneList();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered phone list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredPhoneList(Predicate\u003cPhone\u003e predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////order operations"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces order book data with the data in {@code orderBook}."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cOrder\u003e getOrderBook();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code order} must not already exist in the address book."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////schedule operations"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces schedule book data with the data in {@code scheduleBook}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cSchedule\u003e getScheduleBook();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a schedule with the same identity as {@code schedule} exists in the address book."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given schedule."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule must exist in the address book."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteSchedule(Schedule target);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given schedule."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code schedule} must not already exist in the address book."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given schedule {@code target} with {@code editedSchedule}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setSchedule(Schedule target, Schedule editedSchedule);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered schedule list */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered schedule list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns the CalendarDate object."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    CalendarDate getCalendarDate();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the calendar object in the property"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    void setCalendarDate(Calendar calendar);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////order operations"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces archived order book data with the data in {@code orderBook}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cOrder\u003e getArchivedOrderBook();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a order with the same identity as {@code order} exists in the archived order book."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasArchivedOrder(Order order);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteArchivedOrder(Order target);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given archived order."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code order} must not already exist in the archived order book."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addArchivedOrder(Order order);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the archived order book."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * existing order in the archived order book."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setArchivedOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered archived order list */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredArchivedOrderList();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered archived order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredArchivedOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "qiujiaaa": 10,
      "zhixianggg": 230,
      "-": 87,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Represents the in-memory model of the SML data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final DataBook\u003cCustomer\u003e customerBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final DataBook\u003cPhone\u003e phoneBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final DataBook\u003cOrder\u003e orderBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final DataBook\u003cSchedule\u003e scheduleBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final DataBook\u003cOrder\u003e archivedOrderBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cPhone\u003e filteredPhones;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cSchedule\u003e filteredSchedules;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredArchivedOrders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final CalendarDate calendarDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.customerBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.phoneBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.orderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.scheduleBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerBook.getList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPhones \u003d new FilteredList\u003c\u003e(this.phoneBook.getList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredSchedules \u003d new FilteredList\u003c\u003e(this.scheduleBook.getList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredArchivedOrders \u003d new FilteredList\u003c\u003e(this.archivedOrderBook.getList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendarDate \u003d new CalendarDate(Calendar.getInstance());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ModelManager(ReadOnlyDataBook\u003cCustomer\u003e customerBook, ReadOnlyDataBook\u003cPhone\u003e phoneBook,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        ReadOnlyDataBook\u003cOrder\u003e orderBook, ReadOnlyDataBook\u003cSchedule\u003e scheduleBook,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(customerBook, phoneBook, orderBook, scheduleBook, userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        logger.fine(\"Initializing with customer book: \" + customerBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.customerBook \u003d new DataBook\u003c\u003e(customerBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.phoneBook \u003d new DataBook\u003c\u003e(phoneBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.orderBook \u003d new DataBook\u003c\u003e(orderBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.scheduleBook \u003d new DataBook\u003c\u003e(scheduleBook);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrderBook \u003d new DataBook\u003c\u003e(archivedOrderBook);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendarDate \u003d new CalendarDate(Calendar.getInstance());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerBook.getList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPhones \u003d new FilteredList\u003c\u003e(this.phoneBook.getList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getList());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredSchedules \u003d new FilteredList\u003c\u003e(this.scheduleBook.getList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredArchivedOrders \u003d new FilteredList\u003c\u003e(this.archivedOrderBook.getList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d customerBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerBook.resetData(customerBook);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return customerBook.has(customer);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerBook.remove(target);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (order.getCustomer().equals(target)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                deleteOrder(order);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerBook.add(customer);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerBook.set(target, editedCustomer);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (order.getCustomer().equals(target)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                Order editedOrder \u003d new Order(order.getId(), editedCustomer, order.getPhone(),"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                        order.getPrice(), order.getStatus(), order.getSchedule(), order.getTags());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                orderBook.set(order, editedOrder);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d phoneBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneBook.resetData(phoneBook);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cPhone\u003e getPhoneBook() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phoneBook;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return phoneBook.has(phone);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deletePhone(Phone target) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        phoneBook.remove(target);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (order.getPhone().equals(target)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                deleteOrder(order);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addPhone(Phone phone) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        phoneBook.add(phone);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredPhoneList(PREDICATE_SHOW_ALL_PHONES);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhone(Phone target, Phone editedPhone) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedPhone);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        phoneBook.set(target, editedPhone);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (order.getPhone().equals(target)) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                Order editedOrder \u003d new Order(order.getId(), order.getCustomer(), editedPhone,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                        order.getPrice(), order.getStatus(), order.getSchedule(), order.getTags());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                orderBook.set(order, editedOrder);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Phone List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Phone} backed by the internal list of"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPhone\u003e getFilteredPhoneList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredPhones;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredPhoneList(Predicate\u003cPhone\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredPhones.setPredicate(predicate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order DataBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderBook.resetData(orderBook);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getOrderBook() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return orderBook.has(order);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        orderBook.remove(target);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Optional\u003cSchedule\u003e targetSchedule \u003d target.getSchedule();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        targetSchedule.ifPresent(scheduleBook::remove);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        orderBook.add(order);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDER);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        orderBook.set(target, editedOrder);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule DataBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.scheduleBook.resetData(scheduleBook);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cSchedule\u003e getScheduleBook() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return scheduleBook;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return scheduleBook.has(schedule);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteSchedule(Schedule target) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        scheduleBook.remove(target);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        setCalendarDate(target.getCalendar());"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            order.getSchedule().ifPresent(schedule -\u003e {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                if (schedule.equals(target)) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    Order editedOrder \u003d new Order(order.getId(), order.getCustomer(), order.getPhone(),"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                            order.getPrice(), Status.UNSCHEDULED, Optional.empty(), order.getTags());"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    orderBook.set(order, editedOrder);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        scheduleBook.add(schedule);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        setCalendarDate(schedule.getCalendar());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULE);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedSchedule);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        scheduleBook.set(target, editedSchedule);"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        setCalendarDate(editedSchedule.getCalendar());"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // cascade"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cOrder\u003e orders \u003d orderBook.getList();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            order.getSchedule().ifPresent(schedule -\u003e {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                if (schedule.equals(target)) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    Order editedOrder \u003d new Order(order.getId(), order.getCustomer(), order.getPhone(),"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                            order.getPrice(), order.getStatus(), Optional.of(editedSchedule), order.getTags());"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    orderBook.set(order, editedOrder);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Schedule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Schedule} backed by the internal list of"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredSchedules;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredSchedules.setPredicate(predicate);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CalendarDate \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendarDate(Calendar calendar) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(calendar);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarDate.setCalendar(calendar);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CalendarDate getCalendarDate() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return calendarDate;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order DataBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrderBook.resetData(archivedOrderBook);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getArchivedOrderBook() {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return archivedOrderBook;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasArchivedOrder(Order archivedOrder) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(archivedOrder);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return archivedOrderBook.has(archivedOrder);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteArchivedOrder(Order target) {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        archivedOrderBook.remove(target);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addArchivedOrder(Order archivedOrder) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        archivedOrderBook.add(archivedOrder);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredArchivedOrderList(PREDICATE_SHOW_ALL_ORDER);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setArchivedOrder(Order target, Order editedArchived) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedArchived);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        archivedOrderBook.set(target, editedArchived);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ArchivedOrder} backed by the internal list of"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredArchivedOrderList() {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredArchivedOrders;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredArchivedOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredArchivedOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook.equals(other.customerBook)"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 phoneBook.equals(other.phoneBook)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 orderBook.equals(other.orderBook)"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 scheduleBook.equals(other.scheduleBook)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 archivedOrderBook.equals(other.archivedOrderBook)"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredPhones.equals(other.filteredPhones)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredOrders.equals(other.filteredOrders)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredSchedules.equals(other.filteredSchedules)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredArchivedOrders.equals(other.filteredArchivedOrders);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 98,
      "qiujiaaa": 25,
      "zhixianggg": 302,
      "-": 146,
      "EugeneTeu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyDataBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public interface ReadOnlyDataBook\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cT\u003e getList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getCustomerBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getPhoneBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getScheduleBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "yeodonghan": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UniqueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A list of {@code Identifiable} objects that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * An {@code Identifiable} objects is considered unique by comparing using {@code Identifiable#isSameAs(Identifiable)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * objects uses Identifiable#isSameAs(Identifiable) for equality so as to ensure that the"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * object being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * unique in terms of identity in the UniqueList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * However, the removal of an object uses Identifiable#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * as to ensure that the object with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * @param \u003cT\u003e A class that implements {@code Identifiable}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class UniqueList\u003cT extends Identifiable\u003cT\u003e\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if the list contains an equivalent {@code Identifiable} object as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds an {code Identifiable} object to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The object must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            throw new DuplicateIdentityException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Replaces the {@code Identifiable} object {@code target} in the list with {@code editedObject}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The identity of {@code editedObject} must not be the same as another existing object in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void set(T target, T editedObject) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(target, editedObject);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            throw new IdentityNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!target.isSameAs(editedObject) \u0026\u0026 contains(editedObject)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            throw new DuplicateIdentityException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        internalList.set(index, editedObject);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Removes the equivalent object from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The object must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            throw new IdentityNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void setList(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Replaces the contents of this list with {@code objects}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * {@code objects} must not contain duplicate objects."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void setList(List\u003cT\u003e objects) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!objectsAreUnique(objects)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            throw new DuplicateIdentityException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        internalList.setAll(objects);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof UniqueList // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueList) other).internalList));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if {@code objects} contains only unique objects."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private boolean objectsAreUnique(List\u003cT\u003e objects) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (int i \u003d 0; i \u003c objects.size() - 1; i++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            for (int j \u003d i + 1; j \u003c objects.size(); j++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                if (objects.get(i).isSameAs(objects.get(j))) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path customerBookFilePath \u003d Paths.get(\"data\" , \"customerbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path phoneBookFilePath \u003d Paths.get(\"data\" , \"phonebook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path scheduleBookFilePath \u003d Paths.get(\"data\" , \"schedulebook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path orderBookFilePath \u003d Paths.get(\"data\" , \"orderbook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Path archivedOrderBookFilePath \u003d Paths.get(\"data\", \"archivedbook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getCustomerBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return customerBookFilePath;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void setCustomerBookFilePath(Path customerBookFilePath) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(customerBookFilePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.customerBookFilePath \u003d customerBookFilePath;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getPhoneBookFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return phoneBookFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void setPhoneBookFilePath(Path phoneBookFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(phoneBookFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.phoneBookFilePath \u003d phoneBookFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getScheduleBookFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return scheduleBookFilePath;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void setScheduleBookFilePath(Path scheduleBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(scheduleBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.scheduleBookFilePath \u003d scheduleBookFilePath;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return orderBookFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void setOrderBookFilePath(Path orderBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.orderBookFilePath \u003d orderBookFilePath;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Path getArchivedOrderBookFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return archivedOrderBookFilePath;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setArchivedOrderBookFilePath(Path archivedOrderBookFilePath) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(orderBookFilePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrderBookFilePath \u003d archivedOrderBookFilePath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u0026\u0026 customerBookFilePath.equals(o.customerBookFilePath)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u0026\u0026 phoneBookFilePath.equals(o.phoneBookFilePath)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u0026\u0026 scheduleBookFilePath.equals(o.scheduleBookFilePath)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 orderBookFilePath.equals(o.orderBookFilePath)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 archivedOrderBookFilePath.equals(o.archivedOrderBookFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        sb.append(\"\\nCustomer data file location : \" + customerBookFilePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        sb.append(\"\\nPhone data file location : \" + phoneBookFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        sb.append(\"\\nSchedule data file location : \" + scheduleBookFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        sb.append(\"\\nOrder data file location : \" + orderBookFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 12,
      "-": 86,
      "yeodonghan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/ContactNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContactNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class ContactNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"ContactNumber numbers should only contain numbers, and it should be at least 8 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code ContactNumber}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param contactNumber A valid contactNumber."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(contactNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        checkArgument(isValidContactNumber(contactNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        value \u003d contactNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a given string is a valid contactNumber."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidContactNumber(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof ContactNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 value.equals(((ContactNumber) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 1,
      "EugeneTeu": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.Identifiable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Customer implements Identifiable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final CustomerName customerName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final ContactNumber contactNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Customer(CustomerName customerName, ContactNumber contactNumber, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireAllNonNull(customerName, contactNumber, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerName getCustomerName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return customerName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ContactNumber getContactNumber() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if both customers have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * This defines a stronger notion of equality between two customers."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return otherCustomer.getCustomerName().equals(getCustomerName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getContactNumber().equals(getContactNumber())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Objects.hash(customerName, contactNumber, email, tags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        builder.append(getCustomerName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" ContactNumber: \")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(getContactNumber())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSameAs(Customer other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 other.getCustomerName().equals(getCustomerName())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 (other.getContactNumber().equals(getContactNumber())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || other.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 14,
      "qiujiaaa": 9,
      "EugeneTeu": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/CustomerName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCustomerName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class CustomerName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        checkArgument(isValidCustomerName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static boolean isValidCustomerName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CustomerName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 fullName.equals(((CustomerName) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 3,
      "zhixianggg": 4,
      "EugeneTeu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "EugeneTeu": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/predicates/ContactNumberContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ContactNumberContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ContactNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(customer.getContactNumber().toString(), keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof ContactNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/predicates/CustomerNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerNameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getCustomerName().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CustomerNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((CustomerNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 1,
      "zhixianggg": 7,
      "EugeneTeu": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/predicates/CustomerTagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerTagContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerTagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d customer.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e customer.getTags().stream().anyMatch("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    tag -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CustomerTagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((CustomerTagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/predicates/EmailContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getEmail().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.Identifiable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents an Order in the SML."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: details are present, field values are validated."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Order implements Identifiable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Optional\u003cSchedule\u003e schedule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Order(UUID id, Customer customer, Phone phone, Price price, Status status,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                 Optional\u003cSchedule\u003e schedule, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(id, customer, phone, price, status, schedule, tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Optional\u003cSchedule\u003e getSchedule() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both orders have the same data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherOrder.getId().equals(getId())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherOrder.getSchedule().equals(getSchedule())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Objects.hash(id, customer, phone, price, status, schedule, tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        builder.append(\" # \")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Customer: \")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getCustomer())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Order Status: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSameAs(Order other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 22,
      "qiujiaaa": 117,
      "zhixianggg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Phone\u0027s selling price in an Order in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            \"Costs must start with $, have at most 2 decimals and be non-negative.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\$\\\\d+(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 47,
      "qiujiaaa": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents an Order\u0027s status in the SML."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: Only 4 valid status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    UNSCHEDULED(\"Unscheduled\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SCHEDULED(\"Scheduled\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    COMPLETED(\"Completed\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    CANCELLED(\"Cancelled\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    Status(String label) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this.label;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/CustomerContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Customer} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(order.getCustomer().getCustomerName().toString(), keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    || StringUtil.containsWordIgnoreCase(order.getCustomer().getContactNumber().toString(), keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CustomerContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((CustomerContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/IdContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Id} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class IdContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public IdContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getId().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof IdContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 keywords.equals(((IdContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 2,
      "EugeneTeu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/OrderTagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderTagContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderTagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d order.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e order.getTags().stream().anyMatch("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    tag -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof OrderTagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((OrderTagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/PhoneContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Phone} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        StringUtil.containsWordIgnoreCase(order.getPhone().getCapacity().toString(), keyword)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getPhone().getColour().toString(), keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getPhone().getIdentityNumber().toString(), keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(order.getPhone().getPhoneName().toString(), keyword));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/PriceContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Price} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PriceContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PriceContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getPrice().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof PriceContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((PriceContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/predicates/StatusContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Order}\u0027s {@code Status} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class StatusContainsKeywordsPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(order.getStatus().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsExactWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson((Person)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "EugeneTeu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Brand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s brand in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBrand(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Brand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Brands can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the brand must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Brand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param brand A valid brand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Brand(String brand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(brand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidBrand(brand), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d brand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid brand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidBrand(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Brand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Brand) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Capacity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s memory capacity in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public enum Capacity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_8GB(\"8GB\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_16GB(\"16GB\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_32GB(\"32GB\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_64GB(\"64GB\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_128GB(\"128GB\"),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_256GB(\"256GB\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_512GB(\"512GB\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_1024GB(\"1024GB\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            \"Capacity should only be these numbers { 8, 16, 32, 64, 128, 256, 512, 1024 }. \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final List\u003cString\u003e VALID_CAPACITY_STRINGS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new ArrayList\u003c\u003e(List.of(\"8\", \"16\", \"64\", \"128\", \"256\", \"512\", \"1024\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    Capacity(String value) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a given string is a valid capacity."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static boolean isValidCapacity(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return VALID_CAPACITY_STRINGS"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(str -\u003e str.equals(test));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 8,
      "qiujiaaa": 15,
      "zhixianggg": 20,
      "EugeneTeu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Colour.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s colour in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidColour(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Colour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Colours can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the colour must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Colour}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param colour A valid colour."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Colour(String colour) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidColour(colour), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d colour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid colour."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidColour(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Colour // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Colour) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Cost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s cost in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Costs must start with $, have at most 2 decimals and be non-negative.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\$\\\\d+(\\\\.\\\\d{1,2})?\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Cost}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/IdentityNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s IdentityNumber in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIdentityNumber(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class IdentityNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IMEIs must contain only digits and be 15 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{15}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public IdentityNumber(String identityNumber) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(identityNumber);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidIdentityNumber(identityNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d identityNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid IMEI."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidIdentityNumber(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof IdentityNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((IdentityNumber) other).value)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.Identifiable;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone in the SML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Phone implements Identifiable\u003cPhone\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final IdentityNumber identityNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final SerialNumber serialNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final PhoneName phoneName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Brand brand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Capacity capacity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Colour colour;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Phone(IdentityNumber identityNumber, SerialNumber serialNumber, PhoneName phoneName, Brand brand,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                 Capacity capacity, Colour colour, Cost cost, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(identityNumber, serialNumber, phoneName, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.identityNumber \u003d identityNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneName \u003d phoneName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.brand \u003d brand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.colour \u003d colour;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public IdentityNumber getIdentityNumber() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return identityNumber;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public SerialNumber getSerialNumber() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return serialNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneName getPhoneName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phoneName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Brand getBrand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return brand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return capacity;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Colour getColour() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return colour;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if both phones have the same identity fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * This defines a weaker notion of equality between two phones."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSamePhone(Phone otherPhone) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (otherPhone \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherPhone !\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 (otherPhone.getIdentityNumber().equals(getIdentityNumber())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || otherPhone.getSerialNumber().equals(getSerialNumber()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if both phones have the same identity and data fields."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * This defines a stronger notion of equality between two phones."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!(other instanceof Phone)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Phone otherPhone \u003d (Phone) other;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherPhone.getIdentityNumber().equals(getIdentityNumber())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getSerialNumber().equals(getSerialNumber())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getPhoneName().equals(getPhoneName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getBrand().equals((getBrand()))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getCapacity().equals((getCapacity()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getColour().equals((getColour()))"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getCost().equals(getCost())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Objects.hash(identityNumber, serialNumber, phoneName, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        builder.append(\" IMEI: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getIdentityNumber())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" SN: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getSerialNumber())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .append(getPhoneName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Brand: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getBrand())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Capacity: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getCapacity())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Color: \")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getColour())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSameAs(Phone other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 other.getIdentityNumber().equals(getIdentityNumber())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 other.getSerialNumber().equals(getSerialNumber());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 151,
      "zhixianggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/PhoneName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s name in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhoneName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class PhoneName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @param phoneName A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public PhoneName(String phoneName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(phoneName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        checkArgument(isValidPhoneName(phoneName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        fullName \u003d phoneName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static boolean isValidPhoneName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof PhoneName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 fullName.equals(((PhoneName) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 50,
      "qiujiaaa": 7,
      "zhixianggg": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/SerialNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s SerialNumber in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSerialNumber(String)}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class SerialNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Serial numbers should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the serial number must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public SerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(serialNumber);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidSerialNumber(serialNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d serialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid serial number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidSerialNumber(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof SerialNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((SerialNumber) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/BrandContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code Brand} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class BrandContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public BrandContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getBrand().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof BrandContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((BrandContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/CapacityContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code Capacity} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CapacityContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CapacityContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getCapacity().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CapacityContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((CapacityContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/ColourContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code Colour} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ColourContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ColourContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getColour().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof ColourContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((ColourContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/CostContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code Cost} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CostContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CostContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getCost().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CostContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((CostContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/IdentityNumberContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code IdentityNumber} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class IdentityNumberContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public IdentityNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getIdentityNumber().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof IdentityNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((IdentityNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/PhoneNameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code PhoneName} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PhoneNameContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PhoneNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getPhoneName().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof PhoneNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 1,
      "zhixianggg": 2,
      "EugeneTeu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/PhoneTagContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneTagContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneTagContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d phone.getTags();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e phone.getTags().stream().anyMatch("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    tag -\u003e StringUtil.containsWordIgnoreCase(tag.toString(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof PhoneTagContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((PhoneTagContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/predicates/SerialNumberContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Tests that a {@code Phone}\u0027s {@code SerialNumber} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class SerialNumberContainsKeywordsPredicate implements Predicate\u003cPhone\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public SerialNumberContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean test(Phone phone) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(phone.getSerialNumber().toString(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof SerialNumberContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 keywords.equals(((SerialNumberContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.Identifiable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Schedule in the SML."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Schedule implements Identifiable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Calendar calendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Schedule(UUID id, Calendar calendar, Venue venue, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(id, calendar, venue, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Return a formatted String of the Calendar Object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String getCalendarString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // month to be changed back to 1-based"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        sb.append(calendar.get(Calendar.YEAR) + \".\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(String.format(\"%02d\", calendar.get(Calendar.MONTH) + 1) + \".\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(String.format(\"%02d\", calendar.get(Calendar.DAY_OF_MONTH)) + \" \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(String.format(\"%02d\", calendar.get(Calendar.HOUR_OF_DAY)) + \":\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(String.format(\"%02d\", calendar.get(Calendar.MINUTE)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both schedules have the same identity and data fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a stronger notion of equality between two schedules."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!(other instanceof Schedule)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule otherSchedule \u003d (Schedule) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherSchedule.getId().equals(getId())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getCalendar().equals(getCalendar())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Objects.hash(id, calendar, venue, tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        builder.append(\" # \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Date and Time: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getCalendarString())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSameAs(Schedule other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other !\u003d null"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 other.getId().equals(getId());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 24,
      "qiujiaaa": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Schedule\u0027s venue in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Venue can take any string, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Constructs an {@code venue}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @param venue A valid venue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if a given string is a valid venue."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static boolean isValidVenue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                || (other instanceof Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 venue.equals(((Venue) other).venue)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Customer[] getSampleCustomers() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Customer[] {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"Alex Yeoh\"), new ContactNumber(\"87438807\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Email(\"alexyeoh@example.com\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"Bernice Yu\"), new ContactNumber(\"99272758\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Email(\"berniceyu@example.com\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"Charlotte Oliveiro\"), new ContactNumber(\"93210283\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new Email(\"charlotte@example.com\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"David Li\"), new ContactNumber(\"91031282\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new Email(\"lidavid@example.com\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"Irfan Ibrahim\"), new ContactNumber(\"92492021\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new Email(\"irfan@example.com\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Customer(new CustomerName(\"Roy Balakrishnan\"), new ContactNumber(\"92624417\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new Email(\"royb@example.com\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static ReadOnlyDataBook\u003cCustomer\u003e getSampleCustomerBook() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cCustomer\u003e sampleCustBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Customer sampleCustomer : getSampleCustomers()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            sampleCustBook.add(sampleCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return sampleCustBook;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Phone[] getSamplePhones() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Phone[] {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"990003709954321\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"28xa9q2ns\"), new PhoneName(\"iPhone 11\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_128GB, new Colour(\"Jet Black\"), new Cost(\"$1100\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"New\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"990001940227978\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"1d27s9az\"), new PhoneName(\"iPhone 8\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_64GB, new Colour(\"White\"), new Cost(\"$400\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"Used\")),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"352039075644270\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"2ncs81ma\"), new PhoneName(\"Galaxy S11\"), new Brand(\"Samsung\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_256GB, new Colour(\"Black\"), new Cost(\"$1000\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"New\")),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"013373005371667\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"29asdn1mx\"), new PhoneName(\"iPhone XR\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_256GB, new Colour(\"Coral\"), new Cost(\"$750\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"Used\")),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"358373060612446\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"129zn28xa\"), new PhoneName(\"Pixel 3\"), new Brand(\"Google\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_64GB, new Colour(\"White\"), new Cost(\"$800\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"New\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Phone(new IdentityNumber(\"990002722150925\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new SerialNumber(\"x82n10zm1a\"), new PhoneName(\"iPhone 11\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                Capacity.SIZE_256GB, new Colour(\"Purple\"), new Cost(\"$1300\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTagSet(\"New\"))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static ReadOnlyDataBook\u003cPhone\u003e getSamplePhoneBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cPhone\u003e samplePhoneBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Phone samplePhone : getSamplePhones()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            samplePhoneBook.add(samplePhone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return samplePhoneBook;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static Schedule[] getSampleSchedule() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new Schedule[] {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            new Schedule(UUID.randomUUID(), Calendar.getInstance(), new Venue(\"Kovan\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        getTagSet(\"Rush\")),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            new Schedule(UUID.randomUUID(), Calendar.getInstance(), new Venue(\"Orchard\"),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        getTagSet(\"Office\"))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        };"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static ReadOnlyDataBook\u003cSchedule\u003e getSampleScheduleBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cSchedule\u003e sampleScheduleBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (Schedule sampleSchedule : getSampleSchedule()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            sampleScheduleBook.add(sampleSchedule);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return sampleScheduleBook;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new Order[] {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Order(UUID.randomUUID(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                   new Customer(new CustomerName(\"Charlotte Oliveiro\"), new ContactNumber(\"93210283\"),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        new Email(\"charlotte@example.com\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    new Phone(new IdentityNumber(\"990003709954321\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            new SerialNumber(\"28xa9q2ns\"), new PhoneName(\"iPhone 11\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            Capacity.SIZE_128GB, new Colour(\"Jet Black\"), new Cost(\"$1100\"),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                            getTagSet(\"New\")),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                   new Price(\"$1000\"),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Status.COMPLETED,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Optional.of(sampleSchedule()),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                   getTagSet(\"Urgent\")),"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Order(UUID.randomUUID(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Customer(new CustomerName(\"Alex Yeoh\"), new ContactNumber(\"87438807\"),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        new Email(\"alexyeoh@example.com\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Phone(new IdentityNumber(\"990001940227978\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        new SerialNumber(\"1d27s9az\"), new PhoneName(\"iPhone 8\"), new Brand(\"Apple\"),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        Capacity.SIZE_64GB, new Colour(\"White\"), new Cost(\"$400\"),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        getTagSet(\"Used\")),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Price(\"$1500\"),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Status.COMPLETED,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Optional.of(sampleSchedule()), getTagSet(\"New\")),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            new Order(UUID.randomUUID(),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Customer(new CustomerName(\"David Li\"), new ContactNumber(\"91031282\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        new Email(\"lidavid@example.com\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Phone(new IdentityNumber(\"352039075644270\"),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        new SerialNumber(\"2ncs81ma\"), new PhoneName(\"Galaxy S11\"), new Brand(\"Samsung\"),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        Capacity.SIZE_256GB, new Colour(\"Black\"), new Cost(\"$540\"),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        getTagSet(\"New\")),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                  new Price(\"$1200\"),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Status.COMPLETED,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    Optional.of(sampleSchedule()), getTagSet(\"New\")),"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new Order(UUID.randomUUID(),"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Customer(new CustomerName(\"David Li\"), new ContactNumber(\"91031282\"),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                new Email(\"lidavid@example.com\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Phone(new IdentityNumber(\"352039075644270\"),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                new SerialNumber(\"2ncs81ma\"), new PhoneName(\"Galaxy S11\"), new Brand(\"Samsung\"),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                Capacity.SIZE_256GB, new Colour(\"Black\"), new Cost(\"$581\"),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                getTagSet(\"New\")),"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Price(\"$1200\"),"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        Status.COMPLETED,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        Optional.of(sampleSchedule2()), getTagSet(\"New\")),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new Order(UUID.randomUUID(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Customer(new CustomerName(\"David Li\"), new ContactNumber(\"91031282\"),"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                new Email(\"lidavid@example.com\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Phone(new IdentityNumber(\"352039075644270\"),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                new SerialNumber(\"2ncs81ma\"), new PhoneName(\"Galaxy S11\"), new Brand(\"Samsung\"),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                Capacity.SIZE_256GB, new Colour(\"Black\"), new Cost(\"$95\"),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                getTagSet(\"New\")),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        new Price(\"$1200\"),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        Status.COMPLETED,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        Optional.of(sampleSchedule3()), getTagSet(\"New\"))"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *Return sample Schedule object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static Schedule sampleSchedule() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new Schedule("
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                UUID.randomUUID(),"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Calendar.Builder().setDate(2019, 10, 02).build(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Venue(\"test venue\"),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                getTagSet(\"New\"));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *Return sample Schedule object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static Schedule sampleSchedule2() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new Schedule("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                UUID.randomUUID(),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Calendar.Builder().setDate(2019, 1, 31).build(),"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Venue(\"test venue\"),"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                getTagSet(\"New\"));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *Return sample Schedule object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static Schedule sampleSchedule3() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new Schedule("
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                UUID.randomUUID(),"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Calendar.Builder().setDate(2019, 4, 31).build(),"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                new Venue(\"test venue\"),"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                getTagSet(\"New\"));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static ReadOnlyDataBook\u003cOrder\u003e getSampleOrderBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cOrder\u003e sampleOrderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            sampleOrderBook.add(sampleOrder);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return sampleOrderBook;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9,
      "qiujiaaa": 1,
      "zhixianggg": 112,
      "-": 54,
      "EugeneTeu": 64,
      "yeodonghan": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/statistic/DateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Utility class to help with extracting date value for use in statistic calculations"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class DateUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static int extractMonth(Order order) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return order.getSchedule().get().getCalendar().get(Calendar.MONTH);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static int extractYear(Order order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return order.getSchedule().get().getCalendar().get(Calendar.YEAR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static List\u003cCalendar\u003e getListOfYearMonth(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCalendar\u003e listOfYearMonth \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Calendar startDate \u003d statsPayload.getStartingDate();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Calendar endDate \u003d statsPayload.getEndingDate();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        while (startDate.before(endDate)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            //System.out.println(convertCalendarDateToString(startDate));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            Calendar temp \u003d (Calendar) startDate.clone();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfYearMonth.add(temp);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            startDate.add(Calendar.MONTH, 1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        listOfYearMonth.add(endDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return listOfYearMonth;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/statistic/Statistic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * API of statistics component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * contains methods that CommandResult will call to calculate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public interface Statistic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Method to calculate total profit on completed Orders"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param orderBook order book of model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsPayload payload object containing stats query"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @return total calculated profit"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalProfitOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                           StatsPayload statsPayload);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    XYChart.Series\u003cString, Number\u003e calculateTotalProfitOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                                       StatsPayload statsPayload);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Method to calculate total revenue on completed Orders"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param orderBook order book of model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsPayload payload object containing stats query"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @return total calculated  revenue"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalRevenueOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                            StatsPayload statsPayload);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    XYChart.Series\u003cString, Number\u003e calculateTotalRevenueOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                             StatsPayload statsPayload);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Method to calculate total Cost from {@Code phone} on completed orders"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param orderBook order book of model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsPayload payload object containing stats query"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @return total calculated cost"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    String calculateTotalCostOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                         StatsPayload statsPayload);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    XYChart.Series\u003cString, Number\u003e calculateTotalCostOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                                        StatsPayload statsPayload);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/statistic/StatisticManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import org.apache.commons.math3.stat.StatUtils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.MoneyUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents the in-memory statistics module of the current SML data.Ò"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Utility module to calculate statistics from the model data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatisticManager implements Statistic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatisticManager() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*--------------------Methods to calculate--------------------------*/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalProfitOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                                                StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //filter the list of orders to be only the orders within the starting and ending date."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //dummy data here to test, should be passing orderBook straight in"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cOrder\u003e listOfFilteredOrders \u003d getFilteredOrderListByDate(SampleDataUtil.getSampleOrderBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                statsPayload)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns a list of Months between starting and ending date."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCalendar\u003e listOfMonth \u003d DateUtil.getListOfYearMonth(statsPayload);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // loops through the list of months, for each month, calculate the revenue for all orders in that month"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns this in the format of XYChat.DaTa()."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cXYChart.Data\u003cString, Number\u003e\u003e listOfMonthlyProfit \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                listOfMonth.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .map(month -\u003e processProfitByMonth(listOfFilteredOrders, month))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        listOfMonthlyProfit.stream().forEach(x -\u003e series.getData().add(x));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return series;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalRevenueOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                                     StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //filter the list of orders to be only the orders within the starting and ending date."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //dummy data here to test, should be passing orderBook straight in"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cOrder\u003e listOfFilteredOrders \u003d getFilteredOrderListByDate(SampleDataUtil.getSampleOrderBook(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                statsPayload)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns a list of Months between starting and ending date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCalendar\u003e listOfMonth \u003d DateUtil.getListOfYearMonth(statsPayload);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // loops through the list of months, for each month, calculate the revenue for all orders in that month"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns this in the format of XYChat.DaTa()."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cXYChart.Data\u003cString, Number\u003e\u003e listOfMonthlyRevenue \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                listOfMonth.stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(month -\u003e processRevenueByMonth(listOfFilteredOrders, month))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        listOfMonthlyRevenue.stream().forEach(x -\u003e series.getData().add(x));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return series;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public XYChart.Series\u003cString, Number\u003e calculateTotalCostOnCompletedGraph(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                                               StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //filter the list of orders to be only the orders within the starting and ending date."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //dummy data here to test, should be passing orderBook straight in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cOrder\u003e listOfFilteredOrders \u003d getFilteredOrderListByDate(SampleDataUtil.getSampleOrderBook(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                statsPayload)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns a list of Months between starting and ending date."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCalendar\u003e listOfMonth \u003d DateUtil.getListOfYearMonth(statsPayload);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        XYChart.Series\u003cString, Number\u003e series \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // loops through the list of months, for each month, calculate the cost for all orders in that month"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // returns this in the format of XYChat.DaTa()."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cXYChart.Data\u003cString, Number\u003e\u003e listOfMonthlyCost \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                listOfMonth.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .map(month -\u003e processCostByMonth(listOfFilteredOrders, month))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        listOfMonthlyCost.stream().forEach(x -\u003e series.getData().add(x));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return series;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalProfitOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                  StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double revenue \u003d this.getTotalRevenue(orderBook, statsPayload);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double cost \u003d this.getTotalCost(orderBook, statsPayload);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double totalProfit \u003d revenue - cost;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return String.valueOf(totalProfit);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalRevenueOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireAllNonNull(orderBook, statsPayload);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double totalRevenue \u003d getTotalRevenue(orderBook, statsPayload);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return String.valueOf(totalRevenue);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String calculateTotalCostOnCompleted(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireAllNonNull(orderBook);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double totalCost \u003d getTotalCost(orderBook, statsPayload);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return String.valueOf(totalCost);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*-------Methods to help with calculating monthly detail---------*/"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // utility function to help with extract the relevant data to an XYChar.Data\u003cA,B\u003e object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private XYChart.Data\u003cString, Number\u003e processProfitByMonth(List\u003cOrder\u003e listOfOrders, Calendar month) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new XYChart.Data\u003cString, Number\u003e("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StringUtil.convertCalendarDateToGraphDisplay(month),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.calculateProfitByMonth(listOfOrders, month));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // utility function to help with extract the relevant data to an XYChar.Data\u003cA,B\u003e object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private XYChart.Data\u003cString, Number\u003e processRevenueByMonth(List\u003cOrder\u003e listOfOrders, Calendar month) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new XYChart.Data\u003cString, Number\u003e("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StringUtil.convertCalendarDateToGraphDisplay(month),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.calculateRevenueByMonth(listOfOrders, month));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // utility function to help with extract the relevant data to an XYChar.Data\u003cA,B\u003e object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private XYChart.Data\u003cString, Number\u003e processCostByMonth(List\u003cOrder\u003e listOfOrders, Calendar month) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new XYChart.Data\u003cString, Number\u003e("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StringUtil.convertCalendarDateToGraphDisplay(month),"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.calculateCostByMonth(listOfOrders, month));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Takes in an orderlist, calculates the profit of all orders in this month"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static double calculateProfitByMonth(List\u003cOrder\u003e orderList, Calendar month) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double[] doubleProfitList \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.checkIfOrderIsPresent(orderList.stream())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .filter(currentOrder -\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                DateUtil.extractMonth(currentOrder) \u003d\u003d month.get(2)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                        \u0026\u0026 DateUtil.extractYear(currentOrder) \u003d\u003d month.get(1))"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .map(currentOrder -\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                MoneyUtil.convertToDouble(currentOrder.getPrice())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                -"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                MoneyUtil.convertToDouble(currentOrder.getPhone().getCost()))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .mapToDouble(d -\u003e d).toArray();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StatUtils.sum(doubleProfitList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Takes in an orderlist, calculates the revenue of all orders in this month"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param orderList list of Orders"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param month the month"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static double calculateRevenueByMonth(List\u003cOrder\u003e orderList, Calendar month) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double[] doubleRevenueList \u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.checkIfOrderIsPresent(orderList.stream())"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(currentOrder -\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        DateUtil.extractMonth(currentOrder) \u003d\u003d month.get(2)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u0026\u0026 DateUtil.extractYear(currentOrder) \u003d\u003d month.get(1))"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(currentOrder -\u003e MoneyUtil.convertToDouble(currentOrder.getPrice()))"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .mapToDouble(d -\u003e d).toArray();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StatUtils.sum(doubleRevenueList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Takes in an orderlist, calculates the cost of all orders in this month"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static double calculateCostByMonth(List\u003cOrder\u003e orderList, Calendar month) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double[] doubleCostList \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.checkIfOrderIsPresent(orderList.stream())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .filter(currentOrder -\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                DateUtil.extractMonth(currentOrder) \u003d\u003d month.get(2)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                        \u0026\u0026 DateUtil.extractYear(currentOrder) \u003d\u003d month.get(1))"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .map(currentOrder -\u003e MoneyUtil.convertToDouble(currentOrder.getPhone().getCost()))"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .mapToDouble(d -\u003e d).toArray();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StatUtils.sum(doubleCostList);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*-------------- helper methods ------------------*/"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private double getTotalRevenue(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double[] completedOrderPriceArray \u003d getDoubleOrderPriceArray(orderBook, statsPayload);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StatUtils.sum(completedOrderPriceArray);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private double getTotalCost(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        double[] completedOrderPhoneCostList \u003d getDoublePhoneCostArray(orderBook, statsPayload);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StatUtils.sum(completedOrderPhoneCostList);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*-----Methods that deal with returning double[]----*/"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static double[] getDoubleOrderPriceArray(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        ObservableList\u003cOrder\u003e orderList \u003d orderBook.getList();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cDouble\u003e completedOrderPriceList \u003d getFilteredOrderListByDate(orderBook, statsPayload)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(currentOrder -\u003e MoneyUtil.convertToDouble(currentOrder.getPrice()))"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return completedOrderPriceList.stream().mapToDouble(d -\u003e d).toArray();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static double[] getDoublePhoneCostArray(ReadOnlyDataBook\u003cOrder\u003e orderBook, StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        ObservableList\u003cOrder\u003e orderList \u003d orderBook.getList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cDouble\u003e completedOrderPhoneList \u003d getFilteredOrderListByDate(orderBook, statsPayload)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(currentOrder -\u003e MoneyUtil.convertToDouble(currentOrder.getPhone().getCost()))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return completedOrderPhoneList.stream().mapToDouble(d -\u003e d).toArray();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*-----helper methods with regards to Stream----*/"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static Stream\u003cOrder\u003e checkIfOrderIsPresent(Stream\u003cOrder\u003e streamOrder) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return streamOrder.filter(currentOrder -\u003e currentOrder.getStatus() \u003d\u003d Status.COMPLETED)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(currentOrder -\u003e currentOrder.getSchedule().isPresent());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static Stream\u003cOrder\u003e getFilteredOrderListByDate(ReadOnlyDataBook\u003cOrder\u003e orderBook,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                                            StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        ObservableList\u003cOrder\u003e orderList \u003d orderBook.getList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Stream\u003cOrder\u003e filteredOrderListByDate \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                StatisticManager.checkIfOrderIsPresent(orderList.stream())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .filter(currentOrder -\u003e statsPayload.getStartingDate().compareTo("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                currentOrder.getSchedule().get().getCalendar()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .filter(currentOrder -\u003e statsPayload.getEndingDate().compareTo("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                currentOrder.getSchedule().get().getCalendar()) \u003e 0);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return filteredOrderListByDate;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 254
    }
  },
  {
    "path": "src/main/java/seedu/address/statistic/StatsParseUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * utility class to check stats Input"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsParseUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar MIN_DATE \u003d new Calendar"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .Builder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setInstant(new Date(Long.MIN_VALUE))"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar MAX_DATE \u003d new Calendar"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .Builder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setInstant(new Date(Long.MAX_VALUE))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * list of valid stat types"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final List\u003cString\u003e typeList \u003d Arrays.asList(\"PROFIT\", \"COST\", \"REVENUE\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a given string is a valid Stat Type."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidStatType(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return typeList.stream().anyMatch(x -\u003e x.contains(test.toUpperCase()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //generate-s s/PROFIT d1/2018.12.12 d2/2019.12.12"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/statistic/StatsPayload.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatisticType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Payload class to send user input to logic Manager via commandResult"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsPayload {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final boolean isDefaultQuery;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Calendar startingDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Calendar endingDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final StatisticType statisticType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code StatsPayload} with the specified {@code startingDate}, {@code statisticType}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and specified {@Code endingDate},"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * and set other fields to their default value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param startingDate starting date of query"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param endingDate ending date of query"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayload(Calendar startingDate, Calendar endingDate,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        StatisticType statisticType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.startingDate \u003d startingDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.endingDate \u003d endingDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statisticType \u003d statisticType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (startingDate.equals(StatsParseUtil.MIN_DATE) \u0026\u0026 endingDate.equals(StatsParseUtil.MAX_DATE)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            this.isDefaultQuery \u003d true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            this.isDefaultQuery \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isDefaultQuery() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.isDefaultQuery;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Calendar getStartingDate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.startingDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Calendar getEndingDate() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.endingDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatisticType getStatisticType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.statisticType;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * extract out starting Date with year and date"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String displayStartingDate() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StringUtil.convertCalendarDateToString(this.startingDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * extract out ending date with year and date"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String displayEndingDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return StringUtil.convertCalendarDateToString(this.endingDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ArchivedOrderBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Represents a storage for {@link Order} {@link seedu.address.model.DataBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public interface ArchivedOrderBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Path getArchivedOrderBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns ArchivedOrder DataBook data as a {@link ReadOnlyDataBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readArchivedOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see #getArchivedOrderBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readArchivedOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Saves the given {@link ReadOnlyDataBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param archivedOrderBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void saveArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see #saveArchivedOrderBook(ReadOnlyDataBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void saveArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CustomerBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a storage for {@link Customer} {@link seedu.address.model.DataBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public interface CustomerBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getCustomerBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns customer DataBook data as a {@link ReadOnlyDataBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #getCustomerBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Saves the given {@link ReadOnlyDataBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param customerBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #saveCustomerBook(ReadOnlyDataBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "yeodonghan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCustomer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " * Jackson-friendly version of {@link Customer}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonAdaptedCustomer {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final String customerName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final String contactNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public JsonAdaptedCustomer(@JsonProperty(\"customerName\") String customerName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                               @JsonProperty(\"contactNumber\") String contactNumber,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                             @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.customerName \u003d customerName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code Customer} into this class for Jackson use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedCustomer(Customer source) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerName \u003d source.getCustomerName().fullName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        contactNumber \u003d source.getContactNumber().value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Customer toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final List\u003cTag\u003e customerTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            customerTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (customerName \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    CustomerName.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!CustomerName.isValidCustomerName(customerName)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(CustomerName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        final CustomerName modelCustomerName \u003d new CustomerName(customerName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (contactNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    ContactNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!ContactNumber.isValidContactNumber(contactNumber)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(ContactNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        final ContactNumber modelContactNumber \u003d new ContactNumber(contactNumber);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(customerTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new Customer(modelCustomerName, modelContactNumber, modelEmail, modelTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 15,
      "yeodonghan": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedOrder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " * Jackson-friendly version of {@link Order}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonAdaptedOrder {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final JsonAdaptedCustomer customer;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final JsonAdaptedPhone phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private JsonAdaptedSchedule schedule;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonAdaptedOrder} with the given order details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedOrder(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"customer\") JsonAdaptedCustomer customer,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"phone\") JsonAdaptedPhone phone, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"schedule\") JsonAdaptedSchedule schedule,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code Order} into this class for Jackson use."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        customer \u003d new JsonAdaptedCustomer(source.getCustomer());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        phone \u003d new JsonAdaptedPhone(source.getPhone());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (source.getSchedule().isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            schedule \u003d new JsonAdaptedSchedule(source.getSchedule().get());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts this Jackson-friendly adapted Order object into the model\u0027s {@code Order} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Order toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final List\u003cTag\u003e orderTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            orderTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    UUID.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final UUID modelId \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Customer.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!CustomerName.isValidCustomerName(customer.toModelType().getCustomerName()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .toString())) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(CustomerName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!ContactNumber.isValidContactNumber(customer.toModelType().getContactNumber()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .toString())) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(ContactNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Email.isValidEmail(customer.toModelType().getEmail().toString())) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Customer modelCustomer \u003d customer.toModelType();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!IdentityNumber.isValidIdentityNumber(phone.toModelType().getIdentityNumber().toString())) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(IdentityNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(phone.toModelType().getSerialNumber().toString())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!PhoneName.isValidPhoneName(phone.toModelType().getPhoneName().toString())) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(PhoneName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Brand.isValidBrand(phone.toModelType().getBrand().toString())) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Brand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Capacity.isValidCapacity(phone.toModelType().getCapacity().toString().split(\"GB\")[0])) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Colour.isValidColour(phone.toModelType().getColour().toString())) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Colour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Cost.isValidCost(phone.toModelType().getCost().toString())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Phone modelPhone \u003d phone.toModelType();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Status temp;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (status.equals(\"Unscheduled\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            temp \u003d Status.UNSCHEDULED;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } else if (status.equals(\"Scheduled\")) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            temp \u003d Status.SCHEDULED;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } else if (status.equals(\"Completed\")) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            temp \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            temp \u003d Status.CANCELLED;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Status modelStatus \u003d temp;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (schedule \u003d\u003d null \u0026\u0026 !status.equals(\"Unscheduled\")) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Schedule.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (schedule !\u003d null \u0026\u0026 !Venue.isValidVenue(schedule.toModelType().getVenue().toString())) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Optional\u003cSchedule\u003e modelSchedule;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (schedule !\u003d null) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            modelSchedule \u003d Optional.of(schedule.toModelType());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            modelSchedule \u003d Optional.ofNullable(null);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(orderTags);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new Order(modelId, modelCustomer, modelPhone, modelPrice, modelStatus, modelSchedule,"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                modelTags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPhone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " * Jackson-friendly version of {@link Phone}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonAdaptedPhone {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Phone\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String identityNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String serialNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String phoneName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String brand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String capacity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String colour;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonAdaptedPhone} with the given phone details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedPhone(@JsonProperty(\"identityNumber\") String identityNumber,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                               @JsonProperty(\"serialNumber\") String serialNumber,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                               @JsonProperty(\"phoneName\") String phoneName, @JsonProperty(\"brand\") String brand,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                               @JsonProperty(\"capacity\") String capacity, @JsonProperty(\"colour\") String colour,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                               @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.identityNumber \u003d identityNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.serialNumber \u003d serialNumber;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.phoneName \u003d phoneName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.brand \u003d brand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.colour \u003d colour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code Phone} into this class for Jackson use."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedPhone(Phone source) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        identityNumber \u003d source.getIdentityNumber().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        serialNumber \u003d source.getSerialNumber().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        phoneName \u003d source.getPhoneName().fullName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        brand \u003d source.getBrand().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        capacity \u003d source.getCapacity().value.split(\"GB\")[0];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        colour \u003d source.getColour().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts this Jackson-friendly adapted phone object into the model\u0027s {@code Phone} object."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted phone."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Phone toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final List\u003cTag\u003e phoneTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            phoneTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (identityNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    IdentityNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!IdentityNumber.isValidIdentityNumber(identityNumber)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(IdentityNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final IdentityNumber modelIdentityNumber \u003d new IdentityNumber(identityNumber);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (serialNumber \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    SerialNumber.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!SerialNumber.isValidSerialNumber(serialNumber)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(SerialNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final SerialNumber modelSerialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (phoneName \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    PhoneName.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!PhoneName.isValidPhoneName(phoneName)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(PhoneName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final PhoneName modelPhoneName \u003d new PhoneName(phoneName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (brand \u003d\u003d null) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Brand.class.getSimpleName()));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Brand.isValidBrand(brand)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Brand.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Brand modelBrand \u003d new Brand(brand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (capacity \u003d\u003d null) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Capacity.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Capacity.isValidCapacity(capacity)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Capacity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Capacity temp;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        switch (capacity) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"8\": temp \u003d Capacity.SIZE_8GB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"16\": temp \u003d Capacity.SIZE_16GB;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"32\": temp \u003d Capacity.SIZE_32GB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"64\": temp \u003d Capacity.SIZE_64GB;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"128\": temp \u003d Capacity.SIZE_128GB;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"256\": temp \u003d Capacity.SIZE_256GB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        case \"512\": temp \u003d Capacity.SIZE_512GB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        default: temp \u003d Capacity.SIZE_1024GB;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Capacity modelCapacity \u003d temp;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (colour \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Colour.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Colour.isValidColour(colour)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Colour.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Colour modelColour \u003d new Colour(colour);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(phoneTags);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new Phone(modelIdentityNumber, modelSerialNumber, modelPhoneName, modelBrand, modelCapacity,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                modelColour, modelCost, modelTags);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 182
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedSchedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " * Jackson-friendly version of {@link Schedule}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonAdaptedSchedule {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Schedule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String calendar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final String venue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonAdaptedSchedule} with the given schedule details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedSchedule(@JsonProperty(\"id\") String id,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"calendar\") String calendar,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"venue\") String venue,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code Schedule} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonAdaptedSchedule(Schedule source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        id \u003d source.getId().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        sb.append(source.getCalendar().get(Calendar.YEAR) + \".\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .append(String.format(\"%02d\", source.getCalendar().get(Calendar.MONTH)) + \".\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .append(String.format(\"%02d\", source.getCalendar().get(Calendar.DAY_OF_MONTH)) + \".\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .append(String.format(\"%02d\", source.getCalendar().get(Calendar.HOUR_OF_DAY)) + \".\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .append(String.format(\"%02d\", source.getCalendar().get(Calendar.MINUTE)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        calendar \u003d sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        venue \u003d source.getVenue().venue;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts this Jackson-friendly adapted schedule object into the model\u0027s {@code Schedule} object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted schedule."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Schedule toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final List\u003cTag\u003e scheduleTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            scheduleTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (id \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    UUID.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final UUID modelId \u003d UUID.fromString(id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (calendar \u003d\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Calendar.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        //YYYYMMDDHHmm"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        String[] stringCalendar \u003d calendar.split(\"\\\\.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        int[] input \u003d new int[5];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (int index \u003d 0; index \u003c 5; index++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            input[index] \u003d Integer.parseInt(stringCalendar[index]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        input[1] -\u003d 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Calendar modelCalendar \u003d new Calendar.Builder().setDate(input[0], input[1], input[2])"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                .setTimeOfDay(input[3], input[4], 0).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (venue \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    Venue.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!Venue.isValidVenue(venue.toString())) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new IllegalValueException(Venue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Venue modelVenue \u003d new Venue(venue.toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(scheduleTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return new Schedule(modelId, modelCalendar, modelVenue, modelTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCustomerBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A class to access Customer DataBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public class JsonCustomerBookStorage implements CustomerBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCustomerBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonCustomerBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getCustomerBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readCustomerBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #readCustomerBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Optional\u003cJsonSerializableCustomerBook\u003e jsonCustomerBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                filePath, JsonSerializableCustomerBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!jsonCustomerBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.of(jsonCustomerBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveCustomerBook(customerBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #saveCustomerBook(ReadOnlyDataBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(customerBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCustomerBook(customerBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "yeodonghan": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonOrderBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A class to access Order DataBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public class JsonOrderBookStorage implements OrderBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonOrderBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonOrderBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readOrderBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #readOrderBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Optional\u003cJsonSerializableOrderBook\u003e jsonOrderBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                filePath, JsonSerializableOrderBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!jsonOrderBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.of(jsonOrderBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (IllegalValueException | ParseException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #saveOrderBook(ReadOnlyDataBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(orderBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableOrderBook(orderBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "yeodonghan": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPhoneBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A class to access Phone DataBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public class JsonPhoneBookStorage implements PhoneBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPhoneBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonPhoneBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getPhoneBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readPhoneBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #readPhoneBook()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Optional\u003cJsonSerializablePhoneBook\u003e jsonPhoneBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                filePath, JsonSerializablePhoneBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!jsonPhoneBook.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.of(jsonPhoneBook.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        savePhoneBook(phoneBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #savePhoneBook(ReadOnlyDataBook)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(phoneBook);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePhoneBook(phoneBook), filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "yeodonghan": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonScheduleBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A class to access Schedule DataBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public class JsonScheduleBookStorage implements ScheduleBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonScheduleBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonScheduleBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getScheduleBookFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readScheduleBook(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #readScheduleBook()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        Optional\u003cJsonSerializableScheduleBook\u003e jsonScheduleBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                filePath, JsonSerializableScheduleBook.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        if (!jsonScheduleBook.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            return Optional.of(jsonScheduleBook.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        } catch (IllegalValueException | ParseException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveScheduleBook(scheduleBook, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Similar to {@link #saveScheduleBook(ReadOnlyDataBook)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(scheduleBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableScheduleBook(scheduleBook), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "yeodonghan": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCustomerBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * An Immutable Customer DataBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "@JsonRootName(value \u003d \"customerbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonSerializableCustomerBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"Customers list contains duplicate customer(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonSerializableCustomerBook} with the given customers."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableCustomerBook(@JsonProperty(\"customers\") List\u003cJsonAdaptedCustomer\u003e customers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.customers.addAll(customers);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code ReadOnlyCustomerBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCustomerBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        customers.addAll(source.getList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Converts this customer book into the model\u0027s {@code DataBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cCustomer\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cCustomer\u003e customerBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            Customer customer \u003d jsonAdaptedCustomer.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (customerBook.has(customer)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            customerBook.add(customer);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return customerBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 7,
      "yeodonghan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableOrderBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * An Immutable Order DataBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "@JsonRootName(value \u003d \"orderbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonSerializableOrderBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"orders list contains duplicate order(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedOrder\u003e orders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonSerializableOrderBook} with the given orders."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableOrderBook(@JsonProperty(\"orders\") List\u003cJsonAdaptedOrder\u003e orders) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.orders.addAll(orders);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code ReadOnlyOrderBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableOrderBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableOrderBook(ReadOnlyDataBook\u003cOrder\u003e source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        orders.addAll(source.getList().stream().map(JsonAdaptedOrder::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Converts this order book into the model\u0027s {@code DataBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cOrder\u003e toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cOrder\u003e orderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedOrder jsonAdaptedOrder : orders) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            Order order \u003d jsonAdaptedOrder.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (orderBook.has(order)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            orderBook.add(order);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 7,
      "yeodonghan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializablePhoneBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * An Immutable Phone DataBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "@JsonRootName(value \u003d \"phonebook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonSerializablePhoneBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PHONE \u003d \"phones list contains duplicate phone(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedPhone\u003e phones \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonSerializablePhoneBook} with the given phones."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializablePhoneBook(@JsonProperty(\"phones\") List\u003cJsonAdaptedPhone\u003e phones) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.phones.addAll(phones);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code ReadOnlyPhoneBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePhoneBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializablePhoneBook(ReadOnlyDataBook\u003cPhone\u003e source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        phones.addAll(source.getList().stream().map(JsonAdaptedPhone::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Converts this phone book into the model\u0027s {@code DataBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cPhone\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cPhone\u003e phoneBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedPhone jsonAdaptedPhone : phones) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            Phone phone \u003d jsonAdaptedPhone.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (phoneBook.has(phone)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            phoneBook.add(phone);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return phoneBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 7,
      "yeodonghan": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableScheduleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * An Immutable Schedule DataBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "@JsonRootName(value \u003d \"schedulebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "class JsonSerializableScheduleBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_SCHEDULE \u003d \"schedules list contains duplicate schedule(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private final List\u003cJsonAdaptedSchedule\u003e schedules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Constructs a {@code JsonSerializableScheduleBook} with the given schedule."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableScheduleBook(@JsonProperty(\"schedules\") List\u003cJsonAdaptedSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.schedules.addAll(schedules);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Converts a given {@code ReadOnlyScheduleBook} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableScheduleBook}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public JsonSerializableScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        schedules.addAll(source.getList().stream().map(JsonAdaptedSchedule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Converts this schedule book into the model\u0027s {@code DataBook} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cSchedule\u003e toModelType() throws IllegalValueException, ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cSchedule\u003e scheduleBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        for (JsonAdaptedSchedule jsonAdaptedSchedule : schedules) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            Schedule schedule \u003d jsonAdaptedSchedule.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (scheduleBook.has(schedule)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_SCHEDULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            scheduleBook.add(schedule);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return scheduleBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 7,
      "yeodonghan": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/OrderBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a storage for {@link Order} {@link seedu.address.model.DataBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public interface OrderBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns Order DataBook data as a {@link ReadOnlyDataBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #getOrderBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Saves the given {@link ReadOnlyDataBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param orderBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #saveOrderBook(ReadOnlyDataBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "yeodonghan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PhoneBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a storage for {@link Phone} {@link seedu.address.model.DataBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public interface PhoneBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getPhoneBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns Phone DataBook data as a {@link ReadOnlyDataBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #getPhoneBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Saves the given {@link ReadOnlyDataBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param phoneBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #savePhoneBook(ReadOnlyDataBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "yeodonghan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ScheduleBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a storage for {@link Schedule} {@link seedu.address.model.DataBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public interface ScheduleBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getScheduleBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns Schedule DataBook data as a {@link ReadOnlyDataBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #getScheduleBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * Saves the given {@link ReadOnlyDataBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @param scheduleBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     * @see #saveScheduleBook(ReadOnlyDataBook)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "yeodonghan": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "public interface Storage extends AddressBookStorage, CustomerBookStorage, PhoneBookStorage, ScheduleBookStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        OrderBookStorage, ArchivedOrderBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getCustomerBookFilePath();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getPhoneBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getScheduleBookFilePath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) throws IOException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Path getOrderBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) throws IOException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Path getArchivedOrderBookFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readArchivedOrderBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void saveArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) throws IOException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 9,
      "-": 31,
      "yeodonghan": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private CustomerBookStorage customerBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private PhoneBookStorage phoneBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private ScheduleBookStorage scheduleBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    private OrderBookStorage orderBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private OrderBookStorage archivedOrderBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, CustomerBookStorage customerBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                          PhoneBookStorage phoneBookStorage, ScheduleBookStorage scheduleBookStorage,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                          OrderBookStorage orderBookStorage, OrderBookStorage archivedOrderBookStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.customerBookStorage \u003d customerBookStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.phoneBookStorage \u003d phoneBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.scheduleBookStorage \u003d scheduleBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        this.orderBookStorage \u003d orderBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrderBookStorage \u003d archivedOrderBookStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Customer DataBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getCustomerBookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return customerBookStorage.getCustomerBookFilePath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readCustomerBook(customerBookStorage.getCustomerBookFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cCustomer\u003e\u003e readCustomerBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return customerBookStorage.readCustomerBook(filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) throws IOException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveCustomerBook(customerBook, customerBookStorage.getCustomerBookFilePath());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        customerBookStorage.saveCustomerBook(customerBook, filePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Phone DataBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getPhoneBookFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return phoneBookStorage.getPhoneBookFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readPhoneBook(phoneBookStorage.getPhoneBookFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cPhone\u003e\u003e readPhoneBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return phoneBookStorage.readPhoneBook(filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) throws IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        savePhoneBook(phoneBook, phoneBookStorage.getPhoneBookFilePath());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void savePhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        phoneBookStorage.savePhoneBook(phoneBook, filePath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Schedule DataBook"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getScheduleBookFilePath() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return scheduleBookStorage.getScheduleBookFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readScheduleBook(scheduleBookStorage.getScheduleBookFilePath());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cSchedule\u003e\u003e readScheduleBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return scheduleBookStorage.readScheduleBook(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveScheduleBook(scheduleBook, scheduleBookStorage.getScheduleBookFilePath());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        scheduleBookStorage.saveScheduleBook(scheduleBook, filePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Order DataBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Path getOrderBookFilePath() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return orderBookStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return readOrderBook(orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readOrderBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        return orderBookStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) throws IOException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        saveOrderBook(orderBook, orderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    public void saveOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        orderBookStorage.saveOrderBook(orderBook, filePath);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Archived Order DataBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Path getArchivedOrderBookFilePath() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return archivedOrderBookStorage.getOrderBookFilePath();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readArchivedOrderBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return readOrderBook(archivedOrderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Optional\u003cReadOnlyDataBook\u003cOrder\u003e\u003e readArchivedOrderBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return archivedOrderBookStorage.readOrderBook(filePath);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void saveArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook) throws IOException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        saveArchivedOrderBook(archivedOrderBook, archivedOrderBookStorage.getOrderBookFilePath());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void saveArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        archivedOrderBookStorage.saveOrderBook(archivedOrderBook, filePath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 5,
      "zhixianggg": 34,
      "-": 76,
      "yeodonghan": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AutoCompleteTextField.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.ui.CommandBox.ERROR_STYLE_CLASS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.SortedSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.geometry.Side;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.control.ContextMenu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.control.CustomMenuItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.text.Font;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.text.FontWeight;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import javafx.scene.text.TextFlow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author uberSaiyan-reused"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "//StackOverflow answer on writing an autocomplete text field from"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "//https://stackoverflow.com/questions/36861056/javafx-textfield-auto-suggestions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a JavaFX TextField with auto-complete drop down menu built-in."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class AutoCompleteTextField extends TextField {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final SortedSet\u003cString\u003e entries;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private ContextMenu entriesPopup;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public AutoCompleteTextField() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.entries \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.entriesPopup \u003d new ContextMenu();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        setListener();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private void setListener() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        textProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            setStyleToDefault();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            String enteredText \u003d getText();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            // hide suggestions if no input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            if (enteredText \u003d\u003d null || enteredText.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                // filter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                List\u003cString\u003e filteredEntries \u003d entries.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                        .filter(e -\u003e e.toLowerCase().contains(enteredText.toLowerCase()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                        .sorted((e1, e2) -\u003e compareEntries(e1, e2, enteredText))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                if (!filteredEntries.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    populatePopup(filteredEntries, enteredText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    entriesPopup.hide(); // This ensures the down key always works"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    entriesPopup.show(AutoCompleteTextField.this, Side.BOTTOM, 0, 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                    entriesPopup.hide();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        focusedProperty().addListener(((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            entriesPopup.hide();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Populates drop down menu with results from {@code searchResults}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param searchResults A list of strings that match {@code searchWord}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param searchWord The word being matched against."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private void populatePopup(List\u003cString\u003e searchResults, String searchWord) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cCustomMenuItem\u003e menuItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int maxEntries \u003d 5;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int count \u003d Math.min(searchResults.size(), maxEntries);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            final String result \u003d searchResults.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            Label entryLabel \u003d new Label();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            entryLabel.setGraphic(buildTextFlow(result, searchWord));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            entryLabel.setPrefHeight(10);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            CustomMenuItem item \u003d new CustomMenuItem(entryLabel, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            menuItems.add(item);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            item.setOnAction(actionEvent -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                setText(result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                positionCaret(result.length());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                entriesPopup.hide();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        entriesPopup.getItems().clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        entriesPopup.getItems().addAll(menuItems);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public SortedSet\u003cString\u003e getEntries() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return entries;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns a {@code TextFlow} that highlights the filtered word in a matching word."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param text A word containing {@code filter}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param filter A word to highlight."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @return A highlighted TextFlow."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static TextFlow buildTextFlow(String text, String filter) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int filterIndex \u003d text.toLowerCase().indexOf(filter.toLowerCase());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Text textBefore \u003d new Text(text.substring(0, filterIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Text textAfter \u003d new Text(text.substring(filterIndex + filter.length()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Text textFilter \u003d new Text(text.substring(filterIndex, filterIndex + filter.length()));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        textFilter.setFill(Color.YELLOW);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        textFilter.setFont(Font.font(\"Helvetica\", FontWeight.BOLD, 12));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return new TextFlow(textBefore, textFilter, textAfter);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private int compareEntries(String firstMatch, String secondMatch, String text) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int firstIndex \u003d firstMatch.indexOf(text);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        int secondIndex \u003d secondMatch.indexOf(text);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return firstIndex - secondIndex;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 132,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.exception.EnumNotPresentException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private AutoCompleteTextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        commandTextField.getEntries().addAll(CommandSuggestions.getSuggestions());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } catch (CommandException | ParseException | EnumNotPresentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException, EnumNotPresentException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "-": 64,
      "EugeneTeu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandSuggestions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A class containing command keywords to be matched with for autocompletion."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class CommandSuggestions {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static List\u003cString\u003e suggestions \u003d Arrays.asList("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"add-c\", \"add-o\", \"add-p\", \"add-s\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"delete-c\", \"delete-p\", \"delete-s\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"edit-c\", \"edit-o\", \"edit-p\", \"edit-s\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"switch-c\", \"switch-o\", \"switch-p\", \"switch-s\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"list\", \"cancel\", \"exit\", \"help\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"generate-s\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    );"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static List\u003cString\u003e getSuggestions() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return suggestions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static void addSuggestion(String suggestion) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        suggestions.add(suggestion);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.UiChange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.exception.EnumNotPresentException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.ArchivedOrderListPanel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.ui.panels.CalendarPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.CustomerListPanel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.OrderListPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.PhoneListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StatisticsWindow statsWindow;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //real panels"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private CustomerListPanel customerListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private PhoneListPanel phoneListPanel;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private CalendarPanel calendarPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ArchivedOrderListPanel archiveOrderListPanel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*@FXML"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane personListPanelPlaceholder;*/"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListPanel \u003d new CustomerListPanel(logic.getFilteredCustomerList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListPanel \u003d new PhoneListPanel(logic.getFilteredPhoneList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarPanel \u003d new CalendarPanel(logic.getFilteredScheduleList(), logic.getFilteredOrderList(),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                logic.getCalendarDate());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        archiveOrderListPanel \u003d new ArchivedOrderListPanel(logic.getFilteredArchivedOrderList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel \u003d new TabPanel(customerListPanel, phoneListPanel, orderListPanel,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                calendarPanel, archiveOrderListPanel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * handle StatisticsWindow and create a new one based on user input"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void handleStats(StatsPayload statsPayload) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (statsPayload.isDefaultQuery()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            switch (statsPayload.getStatisticType()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case PROFIT:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                String totalProfitResult \u003d this.logic.calculateTotalProfit(statsPayload);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(totalProfitResult, \"Total Profit\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case REVENUE:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                String totalRevenueResult \u003d this.logic.calculateTotalRevenue(statsPayload);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(totalRevenueResult, \"Total Revenue\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case COST:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                String totalCostResult \u003d this.logic.calculateTotalCost(statsPayload);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(totalCostResult, \"Total Cost\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new EnumNotPresentException(\"Enum not present in stat command\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            //calculate stats with input to logic manager"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            switch (statsPayload.getStatisticType()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case PROFIT:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                XYChart.Series\u003cString, Number\u003e profitResult \u003d this.logic.calculateTotalProfitGraph(statsPayload);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(\"Total Profit\", profitResult);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case REVENUE:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                XYChart.Series\u003cString, Number\u003e revenueResult \u003d this.logic.calculateTotalRevenueGraph(statsPayload);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(\"Total Revenue\", revenueResult);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case COST:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                XYChart.Series\u003cString, Number\u003e costResult \u003d this.logic.calculateTotalCostGraph(statsPayload);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow \u003d new StatisticsWindow(\"Total Cost\", costResult);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.statsWindow.show();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new EnumNotPresentException(\"Enum not present in stat command\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            //retrieve the type that the command works on here;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            performUiChanges(commandResult);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * checks which Uichange the command acts on and switches it"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void performUiChanges(CommandResult input) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cUiChange\u003e listOfUiChange \u003d input.getUiChange();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        for (UiChange type : listOfUiChange) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case ARCHIVED_ORDER:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.showArchivedOrderPanel();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case CUSTOMER:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.showCustomerPanel();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case PHONE:"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.showPhonePanel();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case ORDER:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.showOrderPanel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case SCHEDULE:"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                this.showSchedulePanel();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.handleHelp();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case STATS:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.handleStats(input.getPayloadObject());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                this.handleExit();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                //do nothing"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new EnumNotPresentException(\"Enum not present in command\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * switch selected tab to customer tab"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void showCustomerPanel() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.switchTabCustomer();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * switch selected tab to phone tab"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void showPhonePanel() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.switchTabPhone();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * switch selected tab to order tab"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void showOrderPanel() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.switchTabOrder();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * switch selected tab to order tab"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private void showSchedulePanel() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.switchTabSchedule();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * switch selected tab to archived order tab"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void showArchivedOrderPanel() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.switchTabArchivedOrder();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 7,
      "zhixianggg": 1,
      "-": 178,
      "EugeneTeu": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * pop up window that will be used to display statistics calculated"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatisticsWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"StatisticsWindow.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private XYChart.Series\u003cString, Number\u003e axisSeries;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label statsLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label testLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private LineChart\u003cString, Number\u003e testChart;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Create a new Statistic window"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param root Stage in which the window will use"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatisticsWindow(Stage root, Optional\u003cXYChart.Series\u003cString, Number\u003e\u003e axisSeriesOptional) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (axisSeriesOptional.isPresent()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            this.axisSeries \u003d axisSeriesOptional.get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            buildChart();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * utility method to create statistic window with the data"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsLabel the title of the stats"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param axisSeries  graph data from logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatisticsWindow(String statsLabel, XYChart.Series\u003cString, Number\u003e axisSeries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this(new Stage(), Optional.of(axisSeries));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testChart.setTitle(statsLabel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * utility method to create statistic window with the data"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statisticsResult the result of the statistic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param statsLabel the title of the stats"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatisticsWindow(String statisticsResult, String statsLabel) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this(new Stage(), Optional.empty());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testLabel.setText(statisticsResult);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statsLabel.setText(statsLabel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testChart.setVisible(false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * intialize the chart in the fxml file"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void buildChart() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //Defining the x axis"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        xAxis.setLabel(\"Months\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //Defining the y axis"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        yAxis.setLabel(\"Value in $\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testChart.getData().add(axisSeries);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testChart.setLegendVisible(false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.testChart.setCreateSymbols(false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Shows the Statistics Window."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the statistics Window is currently being shown."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Hides the statistics Window."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Focuses on the statistics Window."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.ArchivedOrderListPanel;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.ui.panels.CalendarPanel;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.CustomerListPanel;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.OrderListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.panels.PhoneListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * class containing TabPane class"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane phoneListPanelPlaceholder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane customerListPanelPlaceholder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private StackPane calendarPanelPlaceHolder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane archivedOrderListPanelPlaceHolder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private TabPane tabPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public TabPanel(CustomerListPanel customerListPanel,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    PhoneListPanel phoneListPanel,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    OrderListPanel orderlistPanel,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    CalendarPanel calendarPanel,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    ArchivedOrderListPanel archivedOrderListPanel) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListPanelPlaceholder.getChildren().add(customerListPanel.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListPanelPlaceholder.getChildren().add(phoneListPanel.getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(orderlistPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarPanelPlaceHolder.getChildren().add(calendarPanel.getAgenda());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        archivedOrderListPanelPlaceHolder.getChildren().add(archivedOrderListPanel.getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected void switchTabCustomer() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tabPanel.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected void switchTabPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tabPanel.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected void switchTabOrder() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tabPanel.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected void switchTabSchedule() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tabPanel.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected void switchTabArchivedOrder() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tabPanel.getSelectionModel().select(4);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 4,
      "EugeneTeu": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/SMLTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ArchivedOrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * An UI component that displays information of a {@code Order} that had been archived."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ArchivedOrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"ArchivedOrderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public final Order archivedOrder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label contactNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label customerName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label phoneId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label phoneName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label phoneColour;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label phoneCapacity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label orderId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label orderPrice;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label orderStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ArchivedOrderCard(Order archivedOrder, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.archivedOrder \u003d archivedOrder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerName.setText(archivedOrder.getCustomer().getCustomerName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        contactNumber.setText(archivedOrder.getCustomer().getContactNumber().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        System.out.println(customerName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneId.setText(archivedOrder.getPhone().getIdentityNumber().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneName.setText(archivedOrder.getPhone().getPhoneName().fullName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneColour.setText(archivedOrder.getPhone().getColour().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneCapacity.setText(archivedOrder.getPhone().getCapacity().value);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderId.setText(archivedOrder.getId().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderPrice.setText(archivedOrder.getPrice().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderStatus.setText(archivedOrder.getStatus().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        archivedOrder.getTags().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof ArchivedOrderCard)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        ArchivedOrderCard card \u003d (ArchivedOrderCard) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 archivedOrder.equals(card.archivedOrder);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "EugeneTeu": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/CustomerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"CustomerListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label contactNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        name.setText(customer.getCustomerName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        System.out.println(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        contactNumber.setText(customer.getContactNumber().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        email.setText(customer.getEmail().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 1,
      "EugeneTeu": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/OrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label contactNumber;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label customerName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneId;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneName;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneColour;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneCapacity;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderId;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderPrice;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderStatus;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        customerName.setText(order.getCustomer().getCustomerName().fullName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        contactNumber.setText(order.getCustomer().getContactNumber().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneId.setText(order.getPhone().getIdentityNumber().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        phoneName.setText(order.getPhone().getPhoneName().fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneColour.setText(order.getPhone().getColour().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneCapacity.setText(order.getPhone().getCapacity().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderId.setText(order.getId().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderPrice.setText(order.getPrice().value);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderStatus.setText(order.getStatus().toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        order.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 2,
      "zhixianggg": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/PhoneCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * An UI component that displays information of a {@code Phone}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PhoneCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PhoneListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // No price displayed here for phone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label colour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label capacity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label brand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label identityNumber;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label serialNumber;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PhoneCard(Phone phone, int displayedIndex) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        brand.setText(phone.getBrand().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        capacity.setText(phone.getCapacity().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        colour.setText(phone.getColour().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        cost.setText(phone.getCost().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        name.setText(phone.getPhoneName().fullName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phone.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        identityNumber.setText(phone.getIdentityNumber().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        serialNumber.setText(phone.getSerialNumber().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof PhoneCard)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        PhoneCard card \u003d (PhoneCard) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 phone.equals(card.phone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 1,
      "EugeneTeu": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ScheduleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * An UI component that displays information of a {@code Schedule}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public final Schedule schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Label scheduleId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleCard(Schedule schedule, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        name.setText(schedule.getId().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        System.out.println(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        time.setText(schedule.getCalendarString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        venue.setText(schedule.getVenue().venue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedule.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof ScheduleCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ScheduleCard card \u003d (ScheduleCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 schedule.equals(card.schedule);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 8,
      "zhixianggg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/exception/EnumNotPresentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents an error which occurs during execution of a UiChange."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class EnumNotPresentException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public EnumNotPresentException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/ArchivedOrderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.cards.ArchivedOrderCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ArchivedOrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"ArchivedOrderListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ArchivedOrderListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ListView\u003cOrder\u003e archivedOrderListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ArchivedOrderListPanel(ObservableList\u003cOrder\u003e archivedOrderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        archivedOrderListView.setItems(archivedOrderList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        archivedOrderListView.setCellFactory(listView -\u003e new ArchivedOrderListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code ArchivedOrderCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    class ArchivedOrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(new ArchivedOrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/CalendarPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import jfxtras.scene.control.agenda.Agenda;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.CalendarDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Panel containing the calendar."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class CalendarPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String FXML \u003d \"CalendarPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Agenda agenda;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private ObservableList\u003cSchedule\u003e scheduleList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private ObservableList\u003cOrder\u003e orderList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private CalendarDate calendarDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private VBox calendarBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CalendarPanel(ObservableList\u003cSchedule\u003e scheduleList, ObservableList\u003cOrder\u003e orderList,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                         CalendarDate calendarDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.scheduleList \u003d scheduleList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.orderList \u003d orderList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendarDate \u003d calendarDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        agenda \u003d new Agenda();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        agenda.setAllowDragging(false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        agenda.setAllowResize(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarBox.getChildren().add(agenda);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        populateAgenda();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        setAgendaView(Calendar.getInstance());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // set up listener"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        scheduleList.addListener((ListChangeListener\u003cSchedule\u003e) change -\u003e populateAgenda());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarDate.getProperty().addListener((observableValue, calendar, t1) -\u003e setAgendaView(t1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * To populate the agenda with the schedules in the observable list"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void populateAgenda() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        agenda.appointments().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        for (Schedule schedule: scheduleList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            int orderIndex \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            for (Order order : orderList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                Optional\u003cSchedule\u003e s \u003d order.getSchedule();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                if (s.isPresent() \u0026\u0026 s.get().isSameAs(schedule)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    // change to 1-based"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    orderIndex \u003d orderList.indexOf(order) + 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            agenda.appointments().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                    new Agenda.AppointmentImplLocal()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                            .withStartLocalDateTime(scheduleToLocalDateTime(schedule))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                            .withEndLocalDateTime(scheduleToLocalDateTime(schedule).plusHours(1))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                            .withSummary(\"Order \" + orderIndex)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Helper method to convert the calendar attribute in the schedule object into LocalDateTime object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private LocalDateTime scheduleToLocalDateTime(Schedule schedule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar calendar \u003d schedule.getCalendar();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // offset to 1-based"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int month \u003d calendar.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int date \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int hour \u003d calendar.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int minute \u003d calendar.get(Calendar.MINUTE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return LocalDateTime.of(year, month, date, hour, minute);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Agenda getAgenda() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return agenda;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Switch the agenda view according to the date input by the user"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private void setAgendaView(Calendar calendar) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int year \u003d calendar.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // offset to 1-based"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int month \u003d calendar.get(Calendar.MONTH) + 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        int date \u003d calendar.get(Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        LocalDateTime localDateTime \u003d LocalDateTime.of(year, month, date, 0, 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        agenda.setDisplayedLocalDateTime(localDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/CustomerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.cards.CustomerCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"CustomerListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/OrderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.cards.OrderCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code OrderCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/PhoneListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.cards.PhoneCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Panel containing the list of phones."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PhoneListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PhoneListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PhoneListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ListView\u003cPhone\u003e phoneListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PhoneListPanel(ObservableList\u003cPhone\u003e phoneList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListView.setItems(phoneList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListView.setCellFactory(listView -\u003e new PhoneListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Phone} using a {@code PhoneCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    class PhoneListViewCell extends ListCell\u003cPhone\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        protected void updateItem(Phone phone, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            super.updateItem(phone, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (empty || phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(new PhoneCard(phone, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 1,
      "EugeneTeu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/ScheduleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.cards.ScheduleCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Panel containing the list of schedules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private ListView\u003cSchedule\u003e scheduleListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleListPanel(ObservableList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleListView.setItems(scheduleList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Schedule} using a {@code ScheduleCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    class ScheduleListViewCell extends ListCell\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        protected void updateItem(Schedule schedule, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            super.updateItem(schedule, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (empty || schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(new ScheduleCard(schedule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 48
    }
  },
  {
    "path": "src/main/main.iml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cmodule type\u003d\"JAVA_MODULE\" version\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "  \u003ccomponent name\u003d\"NewModuleRootManager\" inherit-compiler-output\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cexclude-output /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003ccontent url\u003d\"file://$MODULE_DIR$\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003csourceFolder url\u003d\"file://$MODULE_DIR$/java\" isTestSource\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003corderEntry type\u003d\"inheritedJdk\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003corderEntry type\u003d\"sourceFolder\" forTests\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.openjfx:javafx-base:win:11\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: com.fasterxml.jackson.core:jackson-annotations:2.7.0\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.openjfx:javafx-graphics:win:11\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.openjfx:javafx-fxml:win:11\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.jfxtras:jfxtras-agenda:9.0-r1-SNAPSHOT\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.openjfx:javafx-controls:linux:11\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: org.apache.commons:commons-math3:3.6.1\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: com.fasterxml.jackson.core:jackson-databind:2.7.4\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" name\u003d\"Gradle: com.fasterxml.jackson.core:jackson-core:2.7.4\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "  \u003c/component\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 6,
      "EugeneTeu": 11,
      "yeodonghan": 3
    }
  },
  {
    "path": "src/main/resources/view/ArchivedOrderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"customerName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderId\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customerName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneColour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneColour\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneCapacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneCapacity\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderPrice\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderStatus\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 41
    }
  },
  {
    "path": "src/main/resources/view/ArchivedOrderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"archivedOrderListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"panel-background\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 8
    }
  },
  {
    "path": "src/main/resources/view/CalendarPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    \u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"calendarBox\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 12
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "\u003c?import seedu.address.ui.AutoCompleteTextField?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "  \u003cAutoCompleteTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$contactNumber\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 35
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"customerListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"panel-background\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         title\u003d\"Seller Manager Lite\" minWidth\u003d\"650\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cURL value\u003d\"@SMLTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" \u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   minHeight\u003d\"150\" prefHeight\u003d\"150\" maxHeight\u003d\"150\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"0\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox  styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"tabPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   minHeight\u003d\"200\"  \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"0\" right\u003d\"20\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "EugeneTeu": 12
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u003cLabel fx:id\u003d\"customerName\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderId\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customerName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneId\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneName\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneColour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneColour\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneCapacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneCapacity\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderPrice\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderStatus\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "yeodonghan": 38
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"panel-background\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 1,
      "yeodonghan": 7
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/resources/view/PhoneListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel  fx:id\u003d\"serialNumber\"  styleClass\u003d\"cell_small_label\" text\u003d\"\\$IMEI\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"identityNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$IMEI\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"brand\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$brand\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"colour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$colour\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 43
    }
  },
  {
    "path": "src/main/resources/view/PhoneListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"phoneListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"panel-background\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/resources/view/SMLTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    background-color: #484B95; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart-content {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-padding: 30px;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: #4682b4;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-size: 1.6em;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".axis-label {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: #4682b4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart-series-line {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-stroke-width: 3px;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-effect: null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-stroke: green;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart-vertical-grid-lines {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-stroke: #3278fa;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".chart-horizontal-grid-lines {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-stroke: #3278fa;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".axis {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-size: 1.4em;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tick-label-fill: darkgreen;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-family: Tahoma;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tick-length: 20;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-minor-tick-length: 10;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-header-background {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color:transparent;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-pane .tab-header-area .tab-header-background {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-pane"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tab-min-width: 200px;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /* 24 */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tab-max-width: 250px;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tab-min-height: 3em;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-tab-max-height: 10em;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-effect: dropShadow(gaussian, rgba(0.3, 0.3, 0.3, 0.3), 10, 0.5, 0.5, 0.5);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-pane .tab"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #e6e6e6;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-pane .tab:selected"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #3c3c3c;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab-pane:top *.tab-header-area {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-insets: 0, 0 0 1 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-padding: 0.416667em 0.166667em 0.0em 0.0em;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab .tab-label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-content-display: top;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-size: 15px;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".tab:selected .tab-label {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-alignment: CENTER;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 20%);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 20%);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 20%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-effect: dropShadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #484B95;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #484B99;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 20%);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     -fx-background-color: derive(white, 40%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     -fx-border-color: derive(white, 10%);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(#484B95, 30%);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #484B95;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: white !important;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: derive(white, 20%);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-font-size: 10pt;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #484B95, #484B95, #484B95, #484B95;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".panel-background {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    -fx-background-color: #484B95;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 329,
      "EugeneTeu": 108
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 35
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"panel-background\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 1,
      "yeodonghan": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cfx:root minWidth\u003d\"750\" minHeight\u003d\"600\" resizable\u003d\"true\" title\u003d\"Statistics\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cURL value\u003d\"@SMLTheme.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\" minWidth\u003d\"650\" minHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"650\" minHeight\u003d\"500\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cLabel fx:id\u003d\"statsLabel\"  styleClass\u003d\"label\"\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cLabel fx:id\u003d\"testLabel\" styleClass\u003d\"label\" \u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cLineChart fx:id\u003d\"testChart\" title\u003d\"\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                            \u003cxAxis\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                            \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                            \u003cyAxis\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                                \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                            \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 42
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPanel\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003ctabs\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Customers\" \u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003cgraphic\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003cImageView\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                         \u003cImage url\u003d\"@../images/peopleIcon.png\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003c/graphic\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"customerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"5\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"customerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Phones\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003cgraphic\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003cImageView\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                         \u003cImage url\u003d\"@../images/phoneIcon.png\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003c/graphic\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"phoneList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"5\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"phoneListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Order\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003cgraphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003cImageView\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                         \u003cImage url\u003d\"@../images/orderIcon.png\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003c/graphic\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"orderList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"5\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"orderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Schedule\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003cgraphic\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003cImageView\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                         \u003cImage url\u003d\"@../images/scheduleIcon.png\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                 \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "             \u003c/graphic\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"scheduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"5\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"calendarPanelPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003cTab text\u003d\"Archived\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003cgraphic\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "              \u003cImageView\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                  \u003cimage\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                      \u003cImage url\u003d\"@../images/archiveIcon.png\"/\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                  \u003c/image\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "              \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003c/graphic\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "              \u003ccontent\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                  \u003cVBox fx:id\u003d\"archivedOrderList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                      \u003cpadding\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                          \u003cInsets top\u003d\"5\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                      \u003c/padding\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                      \u003cStackPane fx:id\u003d\"archivedOrderListPanelPlaceHolder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "              \u003c/content\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003c/Tab\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003c/tabs\u003e\u003c/TabPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 2,
      "EugeneTeu": 103
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 119
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/AlertDialogHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.DialogPane;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A handle for the {@code AlertDialog} of the UI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class AlertDialogHandle extends StageHandle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final DialogPane dialogPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public AlertDialogHandle(Stage stage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        dialogPane \u003d getChildNode(\"#\" + UiManager.ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text of the header in the {@code AlertDialog}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getHeaderText() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return dialogPane.getHeaderText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text of the content in the {@code AlertDialog}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getContentText() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return dialogPane.getContentText();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 32
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void run(String command) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 42
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CustomerCardHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle to a customer card in the person list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String CONTACT_NUMBER_FIELD_ID \u003d \"#contactNumber\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label contactNumberLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        contactNumberLabel \u003d getChildNode(CONTACT_NUMBER_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getContactNumber() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return contactNumberLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Customer customer) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getName().equals(customer.getCustomerName().fullName)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getContactNumber().equals(customer.getContactNumber().value)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getEmail().equals(customer.getEmail().value)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getTags().equals(customer.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 75
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CustomerListPanelHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle for {@code CustomerListPanel} containing the list of {@code CustomerCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerListPanelHandle extends NodeHandle\u003cListView\u003cCustomer\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String CUSTOMER_LIST_VIEW_ID \u003d \"#customerListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Optional\u003cCustomer\u003e lastRememberedSelectedCustomerCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerListPanelHandle(ListView\u003cCustomer\u003e customerListPanelNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(customerListPanelNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns a handle to the selected {@code CustomerListCardHandle}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCustomer\u003e selectedCustomerList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedCustomerList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new AssertionError(\"Customer list size expected 1.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(CustomerCardHandle::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedCustomerList.get(0)))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCustomer\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Navigates the listview to display {@code customer}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void navigateToCard(Customer customer) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!getRootNode().getItems().contains(customer)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new IllegalArgumentException(\"Customer does not exist.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            getRootNode().scrollTo(customer);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the customer card handle of a customer associated with the {@code index} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerCardHandle getCustomerCardHandle(int index) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(CustomerCardHandle::new)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(handle -\u003e handle.equals(getCustomer(index)))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Customer getCustomer(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void rememberSelectedCustomerCard() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCustomer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            lastRememberedSelectedCustomerCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            lastRememberedSelectedCustomerCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the selected {@code CustomerCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code rememberSelectedCustomerCard()} call."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isSelectedCustomerCardChanged() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cCustomer\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return lastRememberedSelectedCustomerCard.isPresent();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return !lastRememberedSelectedCustomerCard.isPresent()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    || !lastRememberedSelectedCustomerCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 160
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/HelpWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class HelpWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String HELP_WINDOW_TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String HELP_WINDOW_BROWSER_ID \u003d \"#browser\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public HelpWindowHandle(Stage helpWindowStage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(helpWindowStage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new GuiRobot().isWindowShown(HELP_WINDOW_TITLE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 26
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Opens the {@code HelpWindow} using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void openHelpWindowUsingMenu() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        clickOnMenuItemsSequentially(\"Help\", \"F1\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Opens the {@code HelpWindow} by pressing the shortcut key associated"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * with the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void openHelpWindowUsingAccelerator() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.push(KeyCode.F1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 39
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 40
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/NodeHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides access to a node in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public abstract class NodeHandle\u003cT extends Node\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final T rootNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected NodeHandle(T rootNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.rootNode \u003d requireNonNull(rootNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected T getRootNode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return rootNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code rootNode}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected \u003cQ extends Node\u003e Q getChildNode(String query) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Clicks on the root node (i.e. itself)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void click() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.clickOn(rootNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 44
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getAddress().equals(person.getAddress().value)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 getTags().equals(person.getTags().stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .sorted()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 86
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPerson\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Optional\u003cPerson\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPerson\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cPerson\u003e selectedPersonList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedPersonList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedPersonList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cPerson\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Navigates the listview to display {@code person}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void navigateToCard(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!getRootNode().getItems().contains(person)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            getRootNode().scrollTo(person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .map(PersonCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .filter(handle -\u003e handle.equals(getPerson(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Person getPerson(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        List\u003cPerson\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 159
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 22
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StageHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import guitests.guihandles.exceptions.NodeNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Provides access to a stage in a JavaFx application for GUI testing purposes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public abstract class StageHandle {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Stage stage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StageHandle(Stage stage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.stage \u003d requireNonNull(stage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Closes {@code stage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void close() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(stage::close);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        assertFalse(stage.isShowing());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Focuses on this {@code stage}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String windowTitle \u003d stage.getTitle();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logger.info(\"Focusing on\" + windowTitle);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        guiRobot.interact(stage::requestFocus);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logger.info(\"Finishing focus on\" + windowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if currently focusing on this stage."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isFocused() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return stage.isFocused();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Retrieves the {@code query} node owned by the {@code stage}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param query name of the CSS selector for the node to retrieve."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @throws NodeNotFoundException if no such node exists."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    protected \u003cT extends Node\u003e T getChildNode(String query) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Optional\u003cT\u003e node \u003d guiRobot.from(stage.getScene().getRoot()).lookup(query).tryQuery();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return node.orElseThrow(NodeNotFoundException::new);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Labeled;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Labeled syncStatusNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Labeled saveLocationNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/NodeNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Signals that the node cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class NodeNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 9
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/exceptions/StageNotFoundException.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package guitests.guihandles.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Signals that the stage cannot be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StageNotFoundException extends NoSuchElementException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/MoneyUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class MoneyUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void convertToDouble_nullPrice_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MoneyUtil.convertToDouble((Price) null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void convertToDouble_nullCost_throwsNullPointerException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e MoneyUtil.convertToDouble((Cost) null));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void convertToDouble_validPrice_returnsCorrespondingDouble() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Price validPrice \u003d new Price(\"$1.00\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(MoneyUtil.convertToDouble(validPrice), 1.00);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void convertToDouble_validCost_returnsCorrespondingDouble() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Cost validCost \u003d new Cost(\"$0.10\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(MoneyUtil.convertToDouble(validCost), 0.10);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StatsPayloadBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatisticType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A utility class to help with building Stat Payloads objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsPayloadBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatisticType DEFAULT_STATS_TYPE \u003d StatisticType.PROFIT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar DEFAULT_STARTING_TIME \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new Calendar.Builder().setDate(2018, 1, 2).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar DEFAULT_ENDING_TIME \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new Calendar.Builder().setDate(2019, 2, 3).build();;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Calendar startingDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Calendar endingDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StatisticType statisticType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructor that returns a default stats Payload object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    StatsPayloadBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statisticType \u003d this.DEFAULT_STATS_TYPE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.startingDate \u003d this.DEFAULT_STARTING_TIME;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.endingDate \u003d this.DEFAULT_ENDING_TIME;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Sets the {@code statisticType} of the {@code StatsPayload} that we are building."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayloadBuilder withStatsType(StatisticType type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.statisticType \u003d type;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Sets the {@code startingDate} of the {@code StatsPayload} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayloadBuilder withStartingDate(Calendar calendar) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.startingDate \u003d calendar;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Sets the {@code endingDate} of the {@code StatsPayload} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayloadBuilder withEndingDate(Calendar calendar) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.endingDate \u003d calendar;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * return the {@code StatsPayload} object that we built"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public StatsPayload build() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return new StatsPayload(this.startingDate, this.endingDate, this.statisticType);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StatsPayloadTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.TypicalStatsPayload.DEFAULT_STATS_PAYLOAD_REVENUE_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatsPayloadTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    void isSameStatsPayload() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        assertTrue(DEFAULT_STATS_PAYLOAD_REVENUE_1.equals(DEFAULT_STATS_PAYLOAD_REVENUE_1));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e StringUtil.containsExactWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e StringUtil.containsExactWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e StringUtil.containsExactWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e StringUtil.containsExactWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(StringUtil.containsExactWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(StringUtil.containsExactWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(StringUtil.containsExactWordIgnoreCase(\"aaa bbb ccc\", \"bb\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // Sentence word bigger than query word"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(StringUtil.containsExactWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // Query word bigger than sentence word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(StringUtil.containsExactWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 19,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/TypicalStatsPayload.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.commands.statisticcommand.StatisticType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatsPayload;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " *  A utility class containing a list of {@code StatsPayload} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class TypicalStatsPayload {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar STARTING_DATE_1 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 1, 1)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar STARTING_DATE_2 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 2, 3)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar STARTING_DATE_3 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 3, 4)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar STARTING_DATE_4 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 5, 10)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar STARTING_DATE_5 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 10, 29)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar ENDING_DATE_1 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 1, 1)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar ENDING_DATE_2 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2018, 3, 4)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar ENDING_DATE_3 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2019, 4, 24)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar ENDING_DATE_4 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2020, 4, 17)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final Calendar ENDING_DATE_5 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .setDate(2019, 11, 29)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_REVENUE_1 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.REVENUE)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_1)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_1).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_REVENUE_2 \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.REVENUE)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_2)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_2).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_PROFIT_1 \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.PROFIT)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_1).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_PROFIT_2 \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.PROFIT)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_2)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_2).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_COST_1 \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.COST)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_1)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_1).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final StatsPayload DEFAULT_STATS_PAYLOAD_COST_2 \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            new StatsPayloadBuilder().withStatsType(StatisticType.COST)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withStartingDate(STARTING_DATE_2)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    .withEndingDate(ENDING_DATE_2).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.Statistic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.statistic.StatisticManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonCustomerBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonOrderBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonPhoneBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "import seedu.address.storage.JsonScheduleBookStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Statistic statistic \u003d new StatisticManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonCustomerBookStorage customerBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                new JsonCustomerBookStorage(temporaryFolder.resolve(\"customerBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonPhoneBookStorage phoneBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                new JsonPhoneBookStorage(temporaryFolder.resolve(\"phoneBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonScheduleBookStorage scheduleBookStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                new JsonScheduleBookStorage(temporaryFolder.resolve(\"scheduleBook.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonOrderBookStorage orderBookStorage \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                new JsonOrderBookStorage(temporaryFolder.resolve(\"orderBook.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        JsonOrderBookStorage archivedOrderBookStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new JsonOrderBookStorage(temporaryFolder.resolve(\"archivedOrderBook.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, customerBookStorage, phoneBookStorage,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                scheduleBookStorage, orderBookStorage, archivedOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logic \u003d new LogicManager(model, storage, statistic);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logic \u003d new LogicManager(model, storage, new StatisticManager());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 11,
      "-": 150,
      "EugeneTeu": 6,
      "yeodonghan": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTACT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand.EditPhoneDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.CustomerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.IdentityNumberContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditPhoneDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_CONTACT_NUMBER_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_CONTACT_NUMBER_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_NAME_ALICE \u003d \"Alice Lim\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_NAME_BEN \u003d \"Ben Ten\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_CONTACT_NUMBER_ALICE \u003d \"98123459\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_CONTACT_NUMBER_BEN \u003d \"83719038\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_EMAIL_ALICE \u003d \"alice@example.com\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_EMAIL_BEN \u003d \"ben@example.com\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_TAG_REGULAR \u003d \"Regular\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_TAG_RICH \u003d \"Rich\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_PHONE_NAME_IPHONE \u003d \"iPhone Pro 11\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_PHONE_NAME_SAMSUNG \u003d \"Galaxy S10\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_IDENTITY_NUMBER_IPHONE \u003d \"013373005371667\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_IDENTITY_NUMBER_SAMSUNG \u003d \"352039075644270\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_IPHONE \u003d \"1d27s9az\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_SERIAL_NUMBER_SAMSUNG \u003d \"29asdn1mx\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_COLOUR_IPHONE \u003d \"Purple\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_COLOUR_SAMSUNG \u003d \"Black\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_BRAND_IPHONE \u003d \"Apple\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_BRAND_SAMSUNG \u003d \"Samsung\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Capacity VALID_CAPACITY_IPHONE \u003d Capacity.SIZE_128GB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Capacity VALID_CAPACITY_SAMSUNG \u003d Capacity.SIZE_256GB;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_COST_IPHONE \u003d \"$1649\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_COST_SAMSUNG \u003d \"$1298\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_PRICE_IPHONE \u003d \"$2000\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_PRICE_SAMSUNG \u003d \"$1500\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_TAG_NEW \u003d \"New\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String VALID_TAG_BESTSELLER \u003d \"Bestseller\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String NAME_DESC_ALICE \u003d \" \" + PREFIX_NAME + VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String NAME_DESC_BEN \u003d \" \" + PREFIX_NAME + VALID_NAME_BEN;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String CONTACT_NUMBER_DESC_ALICE \u003d \" \" + PREFIX_CONTACT + VALID_CONTACT_NUMBER_ALICE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String CONTACT_NUMBER_DESC_BEN \u003d \" \" + PREFIX_CONTACT + VALID_CONTACT_NUMBER_BEN;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String EMAIL_DESC_ALICE \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_ALICE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String EMAIL_DESC_BEN \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BEN;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String TAG_DESC_REGULAR \u003d \" \" + PREFIX_TAG + VALID_TAG_REGULAR;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String TAG_DESC_RICH \u003d \" \" + PREFIX_TAG + VALID_TAG_RICH;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String INVALID_CUSTOMER_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final String INVALID_CONTACT_NUMBER_DESC \u003d \" \" + PREFIX_CONTACT + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final EditCustomerDescriptor DESC_ALICE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final EditCustomerDescriptor DESC_BEN;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final EditPhoneDescriptor DESC_IPHONE;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final EditPhoneDescriptor DESC_SAMSUNG;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DESC_ALICE \u003d new EditCustomerDescriptorBuilder().withCustomerName(VALID_NAME_ALICE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withContactNumber(VALID_CONTACT_NUMBER_ALICE).withEmail(VALID_EMAIL_ALICE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withTags(VALID_TAG_REGULAR).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DESC_BEN \u003d new EditCustomerDescriptorBuilder().withCustomerName(VALID_NAME_BEN)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withContactNumber(VALID_CONTACT_NUMBER_BEN).withEmail(VALID_EMAIL_BEN)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withTags(VALID_TAG_RICH).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DESC_IPHONE \u003d new EditPhoneDescriptorBuilder().withPhoneName(VALID_PHONE_NAME_IPHONE)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withBrand(VALID_BRAND_IPHONE).withCapacity(VALID_CAPACITY_IPHONE).withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withColour(VALID_COLOUR_IPHONE).withSerialNumber(VALID_SERIAL_NUMBER_IPHONE)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withIdentityNumber(VALID_IDENTITY_NUMBER_IPHONE).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DESC_SAMSUNG \u003d new EditPhoneDescriptorBuilder().withPhoneName(VALID_PHONE_NAME_SAMSUNG)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withBrand(VALID_BRAND_SAMSUNG).withCapacity(VALID_CAPACITY_SAMSUNG).withCost(VALID_COST_SAMSUNG)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withColour(VALID_COLOUR_SAMSUNG).withSerialNumber(VALID_SERIAL_NUMBER_SAMSUNG)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withIdentityNumber(VALID_IDENTITY_NUMBER_SAMSUNG).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the customer at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static void showCustomerAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customer \u003d model.getFilteredCustomerList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final String[] splitName \u003d customer.getCustomerName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredCustomerList(new CustomerNameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(1, model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the phone at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static void showPhoneAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPhoneList().size());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phone \u003d model.getFilteredPhoneList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final String[] splitName \u003d phone.getIdentityNumber().value.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredPhoneList(new IdentityNumberContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(1, model.getFilteredPhoneList().size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 103,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 2,
      "-": 172
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, UiChange.EXIT);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 83
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, UiChange.HELP);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddCustomerCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void constructor_nullCustomer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCustomerCommand(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_customerAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStubAcceptingCustomerAdded modelStub \u003d new ModelStubAcceptingCustomerAdded();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CommandResult commandResult \u003d new AddCustomerCommand(validCustomer).execute(modelStub);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(String.format(AddCustomerCommand.MESSAGE_SUCCESS, validCustomer),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Arrays.asList(validCustomer), modelStub.customersAdded);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicateCustomer_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer validCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddCustomerCommand addCustomerCommand \u003d new AddCustomerCommand(validCustomer);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithCustomer(validCustomer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(CommandException.class, AddCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER, ()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e addCustomerCommand.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer alice \u003d new CustomerBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer bob \u003d new CustomerBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddCustomerCommand addAliceCommand \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddCustomerCommand addBobCommand \u003d new AddCustomerCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddCustomerCommand addAliceCommandCopy \u003d new AddCustomerCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that contains a single customer."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubWithCustomer extends ModelStub {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private final Customer customer;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStubWithCustomer(Customer customer) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.customer \u003d customer;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return this.customer.isSameAs(customer);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that always accept the customer being added."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubAcceptingCustomerAdded extends ModelStub {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final ArrayList\u003cCustomer\u003e customersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return customersAdded.stream().anyMatch(customer::isSameAs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(customer);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            customersAdded.add(customer);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DataBook\u003cCustomer\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddOrderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/*package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.OrderBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.CustomerBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.TypicalCustomers;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.TypicalIndexes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddOrderCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void constructor_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                -\u003e new AddOrderCommand(null, null, null, null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_orderAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Order editedOrder \u003d new OrderBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index customerIndex \u003d TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index phoneIndex \u003d TypicalIndexes.INDEX_FIRST_PHONE;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Price price \u003d new Price(\"$1212\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddOrderCommand addOrderCommand \u003d new AddOrderCommand(customerIndex, phoneIndex, price, tagSet);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(AddOrderCommand.MESSAGE_SUCCESS, );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new CustomerBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone iphone11 \u003d new PhoneBuilder().withName(\"iPhone 11\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone iphone11pro \u003d new PhoneBuilder().withName(\"iPhone 11 Pro\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11Command \u003d new AddPhoneCommand(iphone11);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11ProCommand \u003d new AddPhoneCommand(iphone11pro);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addiPhone11Command.equals(addiPhone11Command));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11CommandCopy \u003d new AddPhoneCommand(iphone11);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addiPhone11Command.equals(addiPhone11CommandCopy));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(addiPhone11ProCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that contains a single order."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubWithOrder extends ModelStub {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private final Order order;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStubWithOrder(Order order) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.order \u003d order;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return this.order.isSameOrder(order);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that always accept the order being added."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubAcceptingOrderAdded extends ModelStub {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final ArrayList\u003cOrder\u003e ordersAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return ordersAdded.stream().anyMatch(order::isSameOrder);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void addOrder(Order order) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(order);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            ordersAdded.add(order);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public ReadOnlyDataBook\u003cOrder\u003e getOrderBook() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new OrderBook();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new CustomerBookBuilder().withCustomer(TypicalCustomers.ALICE).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 144
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/addcommand/AddPhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.ModelStub;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.PhoneBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddPhoneCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void constructor_nullPhone_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddPhoneCommand(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_phoneAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStubAcceptingPhoneAdded modelStub \u003d new ModelStubAcceptingPhoneAdded();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone validPhone \u003d new PhoneBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CommandResult commandResult \u003d new AddPhoneCommand(validPhone).execute(modelStub);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(String.format(AddPhoneCommand.MESSAGE_SUCCESS, validPhone), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Arrays.asList(validPhone), modelStub.phonesAdded);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicatePhone_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone validPhone \u003d new PhoneBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addPhoneCommand \u003d new AddPhoneCommand(validPhone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPhone(validPhone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(CommandException.class, AddPhoneCommand.MESSAGE_DUPLICATE_PHONE, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            -\u003e addPhoneCommand.execute(modelStub));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone iphone11 \u003d new PhoneBuilder().withName(\"iPhone 11\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone iphone11pro \u003d new PhoneBuilder().withName(\"iPhone 11 Pro\").build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11Command \u003d new AddPhoneCommand(iphone11);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11ProCommand \u003d new AddPhoneCommand(iphone11pro);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addiPhone11Command.equals(addiPhone11Command));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        AddPhoneCommand addiPhone11CommandCopy \u003d new AddPhoneCommand(iphone11);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(addiPhone11Command.equals(addiPhone11CommandCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(addiPhone11Command.equals(addiPhone11ProCommand));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that contains a single phone."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubWithPhone extends ModelStub {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        private final Phone phone;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelStubWithPhone(Phone phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return this.phone.isSamePhone(phone);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * A Model stub that always accept the phone being added."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private class ModelStubAcceptingPhoneAdded extends ModelStub {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final ArrayList\u003cPhone\u003e phonesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return phonesAdded.stream().anyMatch(phone::isSamePhone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public void addPhone(Phone phone) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            requireNonNull(phone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            phonesAdded.add(phone);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        public ReadOnlyDataBook\u003cPhone\u003e getPhoneBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return new DataBook\u003cPhone\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/clearcommand/ClearCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.clearcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ClearCustomerCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_emptyCustomerBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_nonEmptyCustomerBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setCustomerBook(new DataBook\u003cCustomer\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ClearCustomerCommand(), model, ClearCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/clearcommand/ClearPhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.clearcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ClearPhoneCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_emptyPhoneBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ClearPhoneCommand(), model, ClearPhoneCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_nonEmptyPhoneBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setPhoneBook(new DataBook\u003cPhone\u003e());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ClearPhoneCommand(), model, ClearPhoneCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deletecommand/DeleteCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * {@code DeleteCustomerCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeleteCustomerCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCustomerCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.deleteCustomer(customerToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showNoCustomer(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCustomerBook().getList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteCommand \u003d new DeleteCustomerCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommand \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteSecondCommand \u003d new DeleteCustomerCommand(INDEX_SECOND_CUSTOMER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeleteCustomerCommand deleteFirstCommandCopy \u003d new DeleteCustomerCommand(INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private void showNoCustomer(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredCustomerList(c -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(model.getFilteredCustomerList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/deletecommand/DeletePhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPhoneAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * {@code DeletePhoneCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DeletePhoneCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneToDelete \u003d model.getFilteredPhoneList().get(INDEX_FIRST_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteCommand \u003d new DeletePhoneCommand(INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePhoneCommand.MESSAGE_DELETE_PHONE_SUCCESS, phoneToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.deletePhone(phoneToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPhoneList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteCommand \u003d new DeletePhoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneToDelete \u003d model.getFilteredPhoneList().get(INDEX_FIRST_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteCommand \u003d new DeletePhoneCommand(INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(DeletePhoneCommand.MESSAGE_DELETE_PHONE_SUCCESS, phoneToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.deletePhone(phoneToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showNoPhone(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PHONE;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPhoneBook().getList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteCommand \u003d new DeletePhoneCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteFirstCommand \u003d new DeletePhoneCommand(INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteSecondCommand \u003d new DeletePhoneCommand(INDEX_SECOND_PHONE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DeletePhoneCommand deleteFirstCommandCopy \u003d new DeletePhoneCommand(INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private void showNoPhone(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model.updateFilteredPhoneList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(model.getFilteredPhoneList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTACT_NUMBER_BEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REGULAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditCustomerCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index indexLastCustomer \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer lastCustomer \u003d model.getFilteredCustomerList().get(indexLastCustomer.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerBuilder customerInList \u003d new CustomerBuilder(lastCustomer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer editedCustomer \u003d customerInList.withName(VALID_NAME_BEN).withContactNumber(VALID_CONTACT_NUMBER_BEN)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withTags(VALID_TAG_REGULAR).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withCustomerName(VALID_NAME_BEN)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withContactNumber(VALID_CONTACT_NUMBER_BEN).withTags(VALID_TAG_REGULAR).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(indexLastCustomer, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setCustomer(lastCustomer, editedCustomer);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, new EditCustomerDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer editedCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerInFilteredList \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer editedCustomer \u003d new CustomerBuilder(customerInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditCustomerDescriptorBuilder().withCustomerName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCustomerCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new DataBook\u003cCustomer\u003e(model.getCustomerBook()), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicateCustomerUnfilteredList_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer firstCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(firstCustomer).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(INDEX_SECOND_CUSTOMER, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicateCustomerFilteredList_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // edit customer in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer customerInList \u003d model.getCustomerBook().getList().get(INDEX_SECOND_CUSTOMER.getZeroBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditCustomerDescriptorBuilder(customerInList).build());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCustomerCommand.MESSAGE_DUPLICATE_CUSTOMER);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidCustomerIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withCustomerName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * but smaller than size of customer book"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidCustomerIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getCustomerBook().getList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand editCommand \u003d new EditCustomerCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditCustomerDescriptorBuilder().withCustomerName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final EditCustomerCommand standardCommand \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, DESC_ALICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor copyDescriptor \u003d new EditCustomerDescriptor(DESC_ALICE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerCommand commandWithSameValues \u003d new EditCustomerCommand(INDEX_FIRST_CUSTOMER, copyDescriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_SECOND_CUSTOMER, DESC_ALICE)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCustomerCommand(INDEX_FIRST_CUSTOMER, DESC_BEN)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditCustomerDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTACT_NUMBER_BEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BEN;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditCustomerDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditCustomerDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor descriptorWithSameValues \u003d new EditCustomerDescriptor(DESC_ALICE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(DESC_ALICE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(DESC_ALICE.equals(DESC_ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(DESC_BEN));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditCustomerDescriptor editedAlice \u003d new EditCustomerDescriptorBuilder(DESC_ALICE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withCustomerName(VALID_NAME_BEN).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedAlice \u003d new EditCustomerDescriptorBuilder(DESC_ALICE).withContactNumber(VALID_CONTACT_NUMBER_BEN).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedAlice \u003d new EditCustomerDescriptorBuilder(DESC_ALICE).withEmail(VALID_EMAIL_BEN).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedAlice \u003d new EditCustomerDescriptorBuilder(DESC_ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditPhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_IPHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SAMSUNG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BRAND_IPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CAPACITY_IPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_IPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_NAME_IPHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_IPHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPhoneAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PHONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PHONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand.EditPhoneDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditPhoneDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.PhoneBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditPhoneCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone editedPhone \u003d new PhoneBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor descriptor \u003d new EditPhoneDescriptorBuilder(editedPhone).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(INDEX_FIRST_PHONE, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditPhoneCommand.MESSAGE_EDIT_PHONE_SUCCESS, editedPhone);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setPhone(model.getFilteredPhoneList().get(0), editedPhone);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index indexLastPhone \u003d Index.fromOneBased(model.getFilteredPhoneList().size());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone lastPhone \u003d model.getFilteredPhoneList().get(indexLastPhone.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        PhoneBuilder phoneInList \u003d new PhoneBuilder(lastPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone editedPhone \u003d phoneInList.withName(VALID_PHONE_NAME_IPHONE)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withBrand(VALID_BRAND_IPHONE).withCapacity(VALID_CAPACITY_IPHONE).withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withColour(VALID_COLOUR_IPHONE).withSerialNumber(VALID_SERIAL_NUMBER_IPHONE).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor descriptor \u003d new EditPhoneDescriptorBuilder().withPhoneName(VALID_PHONE_NAME_IPHONE)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withBrand(VALID_BRAND_IPHONE).withCapacity(VALID_CAPACITY_IPHONE).withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withColour(VALID_COLOUR_IPHONE).withSerialNumber(VALID_SERIAL_NUMBER_IPHONE).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(indexLastPhone, descriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditPhoneCommand.MESSAGE_EDIT_PHONE_SUCCESS, editedPhone);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setPhone(lastPhone, editedPhone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(INDEX_FIRST_PHONE, new EditPhoneDescriptor());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone editedPhone \u003d model.getFilteredPhoneList().get(INDEX_FIRST_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditPhoneCommand.MESSAGE_EDIT_PHONE_SUCCESS, editedPhone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneInFilteredList \u003d model.getFilteredPhoneList().get(INDEX_FIRST_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone editedPhone \u003d new PhoneBuilder(phoneInFilteredList).withSerialNumber(VALID_SERIAL_NUMBER_IPHONE).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(INDEX_FIRST_PHONE,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditPhoneDescriptorBuilder().withSerialNumber(VALID_SERIAL_NUMBER_IPHONE).build());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(EditPhoneCommand.MESSAGE_EDIT_PHONE_SUCCESS, editedPhone);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), new DataBook\u003cPhone\u003e(model.getPhoneBook()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.setPhone(model.getFilteredPhoneList().get(0), editedPhone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicatePhoneUnfilteredList_failure() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone firstPhone \u003d model.getFilteredPhoneList().get(INDEX_FIRST_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor descriptor \u003d new EditPhoneDescriptorBuilder(firstPhone).build();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(INDEX_SECOND_PHONE, descriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPhoneCommand.MESSAGE_DUPLICATE_PHONE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_duplicatePhoneFilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // edit phone in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Phone phoneInList \u003d model.getPhoneBook().getList().get(INDEX_SECOND_PHONE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(INDEX_FIRST_PHONE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditPhoneDescriptorBuilder(phoneInList).build());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditPhoneCommand.MESSAGE_DUPLICATE_PHONE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidPhoneIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPhoneList().size() + 1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor descriptor \u003d new EditPhoneDescriptorBuilder()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withPhoneName(VALID_PHONE_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * but smaller than size of phone book"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_invalidPhoneIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PHONE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getPhoneBook().getList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand editCommand \u003d new EditPhoneCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new EditPhoneDescriptorBuilder().withPhoneName(VALID_PHONE_NAME_IPHONE).build());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PHONE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        final EditPhoneCommand standardCommand \u003d new EditPhoneCommand(INDEX_FIRST_PHONE, DESC_IPHONE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor copyDescriptor \u003d new EditPhoneDescriptor(DESC_IPHONE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneCommand commandWithSameValues \u003d new EditPhoneCommand(INDEX_FIRST_PHONE, copyDescriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPhoneCommand(INDEX_SECOND_PHONE, DESC_IPHONE)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditPhoneCommand(INDEX_FIRST_PHONE, DESC_SAMSUNG)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/editcommand/EditPhoneDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_IPHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_SAMSUNG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BRAND_SAMSUNG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CAPACITY_SAMSUNG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COLOUR_SAMSUNG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_SAMSUNG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_IDENTITY_NUMBER_SAMSUNG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_NAME_SAMSUNG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SERIAL_NUMBER_SAMSUNG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REGULAR;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand.EditPhoneDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.EditPhoneDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditPhoneDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor descriptorWithSameValues \u003d new EditPhoneDescriptor(DESC_IPHONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(DESC_IPHONE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(DESC_IPHONE.equals(DESC_IPHONE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(DESC_SAMSUNG));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        EditPhoneDescriptor editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withPhoneName(VALID_PHONE_NAME_SAMSUNG).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different identity number -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withIdentityNumber(VALID_IDENTITY_NUMBER_SAMSUNG).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different serial number -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withSerialNumber(VALID_SERIAL_NUMBER_SAMSUNG).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different brand -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE).withBrand(VALID_BRAND_SAMSUNG).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different capacity -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE).withCapacity(VALID_CAPACITY_SAMSUNG).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different cost -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE).withCost(VALID_COST_SAMSUNG).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different colour -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE).withColour(VALID_COLOUR_SAMSUNG).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        editedIphone \u003d new EditPhoneDescriptorBuilder(DESC_IPHONE).withTags(VALID_TAG_REGULAR).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(DESC_IPHONE.equals(editedIphone));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/findcommand/FindCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.CustomerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class FindCustomerCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cCustomer\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cCustomer\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindCustomerCommand findFirstCommand \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindCustomerCommand findSecondCommand \u003d new FindCustomerCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindCustomerCommand findFirstCommandCopy \u003d new FindCustomerCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different customer -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindCustomerCommand command \u003d new FindCustomerCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.updateFilteredCustomerList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCustomerList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses {@code userInput} into a {@code CustomerNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private CustomerNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new CustomerNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/findcommand/FindPhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PHONE_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONETWO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEXR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.PhoneNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class FindPhoneCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cPhone\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Predicate\u003cPhone\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindPhoneCommand findFirstCommand \u003d new FindPhoneCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindPhoneCommand findSecondCommand \u003d new FindPhoneCommand(secondPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindPhoneCommand findFirstCommandCopy \u003d new FindPhoneCommand(firstPredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PHONE_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        PhoneNameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindPhoneCommand command \u003d new FindPhoneCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.updateFilteredPhoneList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPhoneList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PHONE_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        PhoneNameContainsKeywordsPredicate predicate \u003d preparePredicate(\"iPhone\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        FindPhoneCommand command \u003d new FindPhoneCommand(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel.updateFilteredPhoneList(predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertEquals(Arrays.asList(IPHONEONE, IPHONETWO, IPHONEXR), model.getFilteredPhoneList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses {@code userInput} into a {@code CustomerNameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private PhoneNameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new PhoneNameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/listcommand/ListCustomerCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ListCustomerCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCustomerBook(), model.getPhoneBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                model.getOrderBook(), model.getScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ListCustomerCommand(), model, ListCustomerCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/listcommand/ListPhoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPhoneAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.getTypicalCustomerBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrderBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.getTypicalPhoneBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.getTypicalScheduleBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ListPhoneCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        model \u003d new ModelManager(getTypicalCustomerBook(), getTypicalPhoneBook(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                getTypicalOrderBook(), getTypicalScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getCustomerBook(), model.getPhoneBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                model.getOrderBook(), model.getScheduleBook(), new DataBook\u003cOrder\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ListPhoneCommand(), model, ListPhoneCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        showPhoneAtIndex(model, INDEX_FIRST_PHONE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertCommandSuccess(new ListPhoneCommand(), model, ListPhoneCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/*package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.listcommand.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*@Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 13,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.parser.deletecommandparser.DeleteCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 2,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}*/"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 5,
      "-": 206
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.findcommand.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 194
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/addcommandparser/AddCustomerCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_NUMBER_DESC_ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CONTACT_NUMBER_DESC_BEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CONTACT_NUMBER_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CUSTOMER_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_ALICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BEN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_REGULAR;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RICH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CONTACT_NUMBER_ALICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_ALICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_ALICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REGULAR;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RICH;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCustomerCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class AddCustomerCommandParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private AddCustomerCommandParser parser \u003d new AddCustomerCommandParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_RICH).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_ALICE + TAG_DESC_RICH, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BEN + NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_ALICE + TAG_DESC_RICH, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_BEN"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + CONTACT_NUMBER_DESC_ALICE + EMAIL_DESC_ALICE"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + TAG_DESC_RICH, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_BEN + EMAIL_DESC_ALICE"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + TAG_DESC_RICH, new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer expectedCustomerMultipleTags \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_RICH, VALID_TAG_REGULAR)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE + EMAIL_DESC_ALICE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + TAG_DESC_RICH + TAG_DESC_REGULAR, new AddCustomerCommand(expectedCustomerMultipleTags));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Customer expectedCustomer \u003d new CustomerBuilder(ALICE).withTags().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE + EMAIL_DESC_ALICE,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new AddCustomerCommand(expectedCustomer));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_ALICE + CONTACT_NUMBER_DESC_ALICE + EMAIL_DESC_ALICE,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // missing contact number prefix"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + VALID_CONTACT_NUMBER_ALICE + EMAIL_DESC_ALICE,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE + VALID_EMAIL_ALICE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_ALICE + VALID_CONTACT_NUMBER_ALICE + VALID_EMAIL_ALICE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, INVALID_CUSTOMER_NAME_DESC + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_ALICE + TAG_DESC_RICH, CustomerName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // invalid contact number"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + INVALID_CONTACT_NUMBER_DESC"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_ALICE + TAG_DESC_RICH, ContactNumber.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + INVALID_EMAIL_DESC + TAG_DESC_RICH, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                + EMAIL_DESC_ALICE + INVALID_TAG_DESC + TAG_DESC_RICH, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, INVALID_CUSTOMER_NAME_DESC + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        + INVALID_EMAIL_DESC ,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                CustomerName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_ALICE + CONTACT_NUMBER_DESC_ALICE"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        + EMAIL_DESC_ALICE + TAG_DESC_RICH,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCustomerCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CalendarDateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class CalendarDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Calendar calendar \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .setDate(2020, 11, 11).setTimeOfDay(11, 11, 0).build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final CalendarDate calendarDate \u003d new CalendarDate(calendar);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertEquals(calendar, calendarDate.getCalendar());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendar_nullCalendar_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e calendarDate.setCalendar(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendar_validCalendar_replacesData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar newCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendarDate.setCalendar(newCalendar);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertEquals(newCalendar, calendarDate.getCalendar());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(calendarDate.equals(calendarDate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(calendarDate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(calendarDate.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same calendar -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        CalendarDate newCalendarDate \u003d new CalendarDate(calendar);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(calendarDate.equals(newCalendarDate));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different calendar -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        newCalendarDate \u003d new CalendarDate(Calendar.getInstance());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(calendarDate.equals(newCalendarDate));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.FIONA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDERONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDERTHREE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.VIPORDER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEXR;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.CBD_SCHEDULE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.SCHEDULEONE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.predicates.CustomerNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.CustomerBookBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.OrderBookBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.PhoneBookBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.testutil.ScheduleBookBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasCustomer_nullCustomer_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCustomer(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasCustomer_customerNotInCustomerBook_returnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.hasCustomer(DANIEL));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasCustomer_customerInCustomerBook_returnsTrue() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.addCustomer(DANIEL);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(modelManager.hasCustomer(DANIEL));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void getFilteredCustomerList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCustomerList().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasPhone_nullPhone_throwsNullPointerException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPhone(null));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasPhone_phoneNotInPhoneBook_returnsFalse() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.hasPhone(IPHONEXR));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasPhone_phoneInPhoneBook_returnsTrue() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.addPhone(IPHONEXR);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(modelManager.hasPhone(IPHONEXR));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void getFilteredPhoneList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPhoneList().remove(0));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasOrder_nullOrder_throwsNullPointerException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasOrder(null));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasOrder_orderNotInOrderBook_returnsFalse() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.hasOrder(VIPORDER));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasOrder_orderInOrderBook_returnsTrue() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.addOrder(VIPORDER);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(modelManager.hasOrder(VIPORDER));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void getFilteredOrderList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredOrderList().remove(0));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasSchedule_nullSchedule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasSchedule(null));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasSchedule_scheduleNotInScheduleBook_returnsFalse() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.hasSchedule(CBD_SCHEDULE));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void hasSchedule_scheduleInScheduleBook_returnsTrue() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.addSchedule(CBD_SCHEDULE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(modelManager.hasSchedule(CBD_SCHEDULE));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void getFilteredScheduleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredScheduleList().remove(0));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendarDate_nullCalendarDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCalendarDate(null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void setCalendarDate_validCalendarDate_replacesData() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar newCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        modelManager.setCalendarDate(newCalendar);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertEquals(newCalendar, modelManager.getCalendarDate().getCalendar());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        //AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cCustomer\u003e customerBook \u003d new CustomerBookBuilder().withCustomer(DANIEL).withCustomer(FIONA).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cPhone\u003e phoneBook \u003d new PhoneBookBuilder().withPhone(IPHONEONE).withPhone(IPHONEXR).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cOrder\u003e orderBook \u003d new OrderBookBuilder().withOrder(ORDERONE).withOrder(ORDERTHREE).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cSchedule\u003e scheduleBook \u003d new ScheduleBookBuilder().withSchedule(CBD_SCHEDULE)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withSchedule(SCHEDULEONE).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DataBook\u003cOrder\u003e archivedOrderBook \u003d new OrderBookBuilder().withOrder(ORDERONE).withOrder(ORDERTHREE).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cCustomer\u003e differentCustomerBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cPhone\u003e differentPhoneBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cOrder\u003e differentOrderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cSchedule\u003e differentScheduleBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        DataBook\u003cOrder\u003e differentArchivedOrderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager \u003d new ModelManager(customerBook, phoneBook, orderBook, scheduleBook, archivedOrderBook, userPrefs);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(customerBook, phoneBook, orderBook,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                scheduleBook, archivedOrderBook, userPrefs);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different customerBook -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(differentCustomerBook, phoneBook, orderBook, scheduleBook, archivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different phoneBook -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(customerBook, differentPhoneBook, orderBook, scheduleBook, archivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different orderBook -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(customerBook, phoneBook, differentOrderBook, scheduleBook, archivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different archiveOrderBook -\u003e returns false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(customerBook, phoneBook, orderBook, scheduleBook, differentArchivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different scheduleBook -\u003e returns false"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(customerBook, phoneBook, orderBook, differentScheduleBook, archivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String[] keywords \u003d DANIEL.getCustomerName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.updateFilteredCustomerList(new CustomerNameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(customerBook, phoneBook, orderBook, scheduleBook,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                archivedOrderBook, userPrefs)));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        modelManager.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(modelManager.equals(new"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                ModelManager(customerBook, phoneBook, orderBook, scheduleBook,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                archivedOrderBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different calendar in calendarDate -\u003e returns true"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Calendar differentCalendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        modelManagerCopy.setCalendarDate(differentCalendar);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 12,
      "qiujiaaa": 19,
      "zhixianggg": 134,
      "-": 118
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class UniqueListTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private UniqueList\u003cIdentifiableStub\u003e uniqueList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void contains_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.contains(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void contains_objectNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(new IdentifiableStub(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(uniqueList.contains(new IdentifiableStub(1)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void contains_objectInList_returnsTrue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj \u003d new IdentifiableStub(1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(obj);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void add_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void add_duplicateObject_throwsDuplicateIdentityException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(new IdentifiableStub(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(DuplicateIdentityException.class, () -\u003e uniqueList.add(new IdentifiableStub(1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void add_uniqueObject_objectAdded() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(new IdentifiableStub(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj \u003d new IdentifiableStub(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(obj);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_nullTarget_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.set(null, new IdentifiableStub(1)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_nullEditedObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.set(new IdentifiableStub(1), null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_targetNotInList_throwsIdentityNotFoundException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IdentityNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                uniqueList.set(new IdentifiableStub(1), new IdentifiableStub(0)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_targetNotSameAsEditedObjectAndEditedObjectIsDuplicate_throwsDuplicateIdentityException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub target \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(target);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub editedObject \u003d new IdentifiableStub(1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(new IdentifiableStub(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(DuplicateIdentityException.class, () -\u003e uniqueList.set(target, editedObject));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_targetNotSameAsEditedObjectAndEditedObjectIsNotDuplicate_replaceTargetWithEditedObject() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub target \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub editedObject \u003d new IdentifiableStub(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.set(target, editedObject);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(editedObject));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void set_targetSameAsEditedObject_replaceTargetWithEditedObject() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub target \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub editedObject \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.set(target, editedObject);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(editedObject));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void remove_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.remove(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void remove_objectNotInList_throwsIdentityNotFoundException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IdentityNotFoundException.class, () -\u003e uniqueList.remove(new IdentifiableStub(0)));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void remove_objectInList_objectRemoved() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.add(obj);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.remove(obj);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void setList_nullUniqueList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.setList((UniqueList\u003cIdentifiableStub\u003e) null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void setList_uniqueList_uniqueListIsReplaced() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        UniqueList\u003cIdentifiableStub\u003e inputList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        inputList.add(obj);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.setList(inputList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void setList_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueList.setList((List\u003cIdentifiableStub\u003e) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void setList_listWithDuplicates_throwsDuplicateIdentityException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cIdentifiableStub\u003e duplicateList \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                Arrays.asList(new IdentifiableStub(0), new IdentifiableStub(0));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(DuplicateIdentityException.class, () -\u003e uniqueList.setList(duplicateList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void setList_listWithNoDuplicates_listIsReplaced() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj1 \u003d new IdentifiableStub(0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        IdentifiableStub obj2 \u003d new IdentifiableStub(1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cIdentifiableStub\u003e nonDuplicateList \u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                Arrays.asList(obj1, obj2);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        uniqueList.setList(nonDuplicateList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(uniqueList.contains(obj2));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void asUnmodifiableObservableList_modify_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e uniqueList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static class IdentifiableStub implements Identifiable\u003cIdentifiableStub\u003e {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        private int identity;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        private IdentifiableStub(int identity) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            this.identity \u003d identity;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        public boolean isSameAs(IdentifiableStub other) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return this.identity \u003d\u003d other.identity;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/ContactNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class ContactNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ContactNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_invalidContactNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String invalidContactNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ContactNumber(invalidContactNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void isValidContactNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null contact number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ContactNumber.isValidContactNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // invalid contact numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\"1234567\")); // less than 8 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(ContactNumber.isValidContactNumber(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // valid contact numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(ContactNumber.isValidContactNumber(\"93121534\")); // exactly 8 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 1,
      "qiujiaaa": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/CustomerNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class CustomerNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new CustomerName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_invalidCustomerName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new CustomerName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void isValidCustomerName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e CustomerName.isValidCustomerName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(CustomerName.isValidCustomerName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(CustomerName.isValidCustomerName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(CustomerName.isValidCustomerName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(CustomerName.isValidCustomerName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(CustomerName.isValidCustomerName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(CustomerName.isValidCustomerName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(CustomerName.isValidCustomerName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(CustomerName.isValidCustomerName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(CustomerName.isValidCustomerName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/CustomerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERTWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class CustomerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hoon Meier\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_CONTACTNUMBER \u003d \"87652533\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"stefan@example.com\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_TAG \u003d \"friendly\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isSameCustomer() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(CUSTOMERONE.isSameAs(CUSTOMERONE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(CUSTOMERONE.isSameAs(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(CUSTOMERONE.isSameAs(new CustomerBuilder(CUSTOMERONE).withContactNumber(VALID_CONTACTNUMBER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .withEmail(VALID_EMAIL).build()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(CUSTOMERONE.isSameAs(new CustomerBuilder(CUSTOMERONE).withName(VALID_NAME).build()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(CUSTOMERONE.isSameAs(new CustomerBuilder(CUSTOMERONE).withEmail(VALID_EMAIL)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(CUSTOMERONE.isSameAs(new CustomerBuilder(CUSTOMERONE).withContactNumber(VALID_CONTACTNUMBER)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(CUSTOMERONE.isSameAs(new CustomerBuilder(CUSTOMERONE).withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e equals"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(CUSTOMERONE, CUSTOMERONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e not equals"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(null, CUSTOMERONE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same data fields -\u003e not equals"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(CUSTOMERONE, new CustomerBuilder(CUSTOMERONE).build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different type -\u003e not equals"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(5, CUSTOMERONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different person -\u003e not equals"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(CUSTOMERONE, CUSTOMERTWO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different name -\u003e not equals"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(CUSTOMERONE, new CustomerBuilder(CUSTOMERONE).withName(VALID_NAME).build());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different phone -\u003e not equals"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(CUSTOMERONE, new CustomerBuilder(CUSTOMERONE).withContactNumber(VALID_CONTACTNUMBER)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .build());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different email -\u003e not equals"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(CUSTOMERONE, new CustomerBuilder(CUSTOMERONE).withEmail(VALID_EMAIL).build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e not equals"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(CUSTOMERONE, new CustomerBuilder(CUSTOMERONE).withTags(VALID_TAG).build());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 31,
      "qiujiaaa": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/predicates/ContactNumberContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ContactNumberContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/customer/predicates/CustomerNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.customer.predicates;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.testutil.CustomerBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        predicate \u003d new CustomerNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        predicate \u003d new CustomerNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        predicate \u003d new CustomerNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        CustomerNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        predicate \u003d new CustomerNameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // Keywords match phone and email, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        predicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                new CustomerNameContainsKeywordsPredicate("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        Arrays.asList(\"12345678\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").withContactNumber(\"12345678\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 63,
      "zhixianggg": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERTWO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDERONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONETWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.SCHEDULETWO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.testutil.OrderBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class OrderTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final UUID VALID_ID \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Customer VALID_CUSTOMER \u003d CUSTOMERTWO;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Phone VALID_PHONE \u003d IPHONETWO;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_PRICE \u003d \"$1021\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final Status VALID_STATUS \u003d Status.CANCELLED;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Schedule VALID_SCHEDULE \u003d SCHEDULETWO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_TAG \u003d \"Cancelled\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isSameOrder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(ORDERONE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(ORDERONE.isSameAs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different id -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withId(VALID_ID).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different customer -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withCustomer(VALID_CUSTOMER).build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertFalse(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withPhone(VALID_PHONE).build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different price -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withPrice(VALID_PRICE).build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different status -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withStatus(VALID_STATUS).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different schedule -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .withSchedule(Optional.of(VALID_SCHEDULE)).build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(ORDERONE.isSameAs(new OrderBuilder(ORDERONE).withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e equals"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(ORDERONE, ORDERONE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e not equals"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(null, ORDERONE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different id -\u003e not equals"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withId(VALID_ID).build());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different customer -\u003e not equals"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withCustomer(VALID_CUSTOMER).build());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different phone -\u003e not equals"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withPhone(VALID_PHONE).build());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different price -\u003e not equals"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withPrice(VALID_PRICE).build());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different status -\u003e not equals"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withStatus(VALID_STATUS).build());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different schedule -\u003e not equals"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withSchedule(Optional.of(VALID_SCHEDULE)).build());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e not equals"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(ORDERONE, new OrderBuilder(ORDERONE).withTags(VALID_TAG).build());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 55,
      "qiujiaaa": 33,
      "zhixianggg": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/PriceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null price"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$91.113\")); // more than 2 decimal points"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"12.12\")); // no leading $"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$.12\")); // no digit before decimal"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Price.isValidPrice(\"$-1.5\")); // negative"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // valid price"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$911\")); // no decimal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$123.2\")); // 1 decimal"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Price.isValidPrice(\"$123.12\")); // 2 decimal"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/BrandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class BrandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Brand(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_invalidBrand_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String invalidBrand \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Brand(invalidBrand));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void isValidBrand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null brand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Brand.isValidBrand(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // invalid brand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Brand.isValidBrand(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Brand.isValidBrand(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // valid brand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"orange juice\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"8888\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"forever 21\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"New Balance\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"Xiaomi Futuristic Ultra 3000 Foldable Dual Screen\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Brand.isValidBrand(\"*Victoria\u0027s Secret*\")); // with symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/ColourTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class ColourTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Colour(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_invalidColour_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String invalidColour \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Colour(invalidColour));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isValidColour() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null colour"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Colour.isValidColour(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // invalid colour"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Colour.isValidColour(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Colour.isValidColour(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // valid colour"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"hot pink\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"1337\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"rainbow 7\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"Phthalo Blue\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"Antique white with a tinge of cyan and a smudge of green\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Colour.isValidColour(\"Blue + Green\")); // with symbols"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/CostTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class CostTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cost(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public void constructor_invalidCost_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String invalidCost \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cost(invalidCost));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isValidCost() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null cost"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cost.isValidCost(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // invalid cost"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\"1\")); // no leading $"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\"$-1.5\")); // negative"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\"$4.501\")); // more than 2 decimals"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(Cost.isValidCost(\"$.12\")); // no digit before decimal"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // valid cost"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Cost.isValidCost(\"$0\")); // no decimals"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Cost.isValidCost(\"$1.5\")); // 1 decimal"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Cost.isValidCost(\"$99.99\")); // 2 decimals"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(Cost.isValidCost(\"$1234567898765432100000000000000\")); // long"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/IdentityNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class IdentityNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IdentityNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void constructor_invalidIdentityNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String invalidIdentityNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IdentityNumber(invalidIdentityNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isValidIdentityNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null identity number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IdentityNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // invalid identity number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IdentityNumber.isValidIdentityNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IdentityNumber.isValidIdentityNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IdentityNumber.isValidIdentityNumber(\"alphanumeric123\")); // alphanumeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IdentityNumber.isValidIdentityNumber(\"12345678909876\")); // less than 15 digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IdentityNumber.isValidIdentityNumber(\"1234567890987654\")); // more than 15 digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // valid identity number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IdentityNumber.isValidIdentityNumber(\"123456789098765\")); // 15 digits"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/PhoneNameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.predicates.PhoneNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.testutil.PhoneBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class PhoneNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        PhoneNameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        PhoneNameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(firstPredicate, firstPredicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        PhoneNameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(firstPredicate, firstPredicateCopy);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(1, firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(null, firstPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(firstPredicate, secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        PhoneNameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                new PhoneNameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(predicate.test(new PhoneBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        predicate \u003d new PhoneNameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(predicate.test(new PhoneBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        predicate \u003d new PhoneNameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(predicate.test(new PhoneBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        predicate \u003d new PhoneNameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(predicate.test(new PhoneBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        PhoneNameContainsKeywordsPredicate predicate \u003d new PhoneNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(predicate.test(new PhoneBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        predicate \u003d new PhoneNameContainsKeywordsPredicate(Collections.singletonList(\"Carol\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(predicate.test(new PhoneBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // Keywords match brand and colour, but does not match name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        predicate \u003d new PhoneNameContainsKeywordsPredicate(Arrays.asList(\"12345678\", \"iPhone\", \"Blue\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(predicate.test(new PhoneBuilder().withName(\"Alice\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .withBrand(\"iPhone\").withColour(\"Blue\").build()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 82,
      "zhixianggg": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/PhoneNameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PhoneName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PhoneName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PhoneName.isValidPhoneName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(PhoneName.isValidPhoneName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(PhoneName.isValidPhoneName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(PhoneName.isValidPhoneName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(PhoneName.isValidPhoneName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(PhoneName.isValidPhoneName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(PhoneName.isValidPhoneName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(PhoneName.isValidPhoneName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(PhoneName.isValidPhoneName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(PhoneName.isValidPhoneName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 10,
      "zhixianggg": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.testutil.PhoneBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class PhoneTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_IDENTITYNUMBER \u003d \"000000000000000\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_SERIALNUMBER \u003d \"12asd34\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_NAME \u003d \"iPhone 2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_BRAND \u003d \"Huawei\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Capacity VALID_CAPACITY \u003d Capacity.SIZE_8GB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_COLOUR \u003d \"Vanta Black\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_COST \u003d \"$0\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final String VALID_TAG \u003d \"1337code\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isSamePhone() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(IPHONEONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IPHONEONE.isSameAs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different IMEI and serial number -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(IPHONEONE.isSamePhone(new PhoneBuilder(IPHONEONE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withIdentityNumber(VALID_IDENTITYNUMBER)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .withSerialNumber(VALID_SERIALNUMBER).build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // different serial number and same IMEI -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        assertTrue(IPHONEONE.isSamePhone(new PhoneBuilder(IPHONEONE).build()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different phone name -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withName(VALID_NAME).build()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different brand -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withName(VALID_BRAND).build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different capacity -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withCapacity(VALID_CAPACITY).build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different colour -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withColour(VALID_COLOUR).build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different cost -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withCost(VALID_COST).build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(IPHONEONE.isSameAs(new PhoneBuilder(IPHONEONE).withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e equals"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(IPHONEONE, IPHONEONE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e not equals"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(null, IPHONEONE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different IMEI -\u003e not equals"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withIdentityNumber(VALID_IDENTITYNUMBER).build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different serial number -\u003e not equals"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withSerialNumber(VALID_SERIALNUMBER).build());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different phone name -\u003e not equals"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withName(VALID_NAME).build());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different brand -\u003e not equals"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withBrand(VALID_BRAND).build());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different capacity -\u003e not equals"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withCapacity(VALID_CAPACITY).build());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different colour -\u003e not equals"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withColour(VALID_COLOUR).build());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different cost -\u003e not equals"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withCost(VALID_COST).build());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e not equals"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(IPHONEONE, new PhoneBuilder(IPHONEONE).withTags(VALID_TAG).build());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 86,
      "zhixianggg": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/phone/SerialNumberTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class SerialNumberTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SerialNumber(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void constructor_invalidSerialNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        String invalidSerialNumber \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new SerialNumber(invalidSerialNumber));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isValidSerialNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null serial number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e SerialNumber.isValidSerialNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // invalid serial number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SerialNumber.isValidSerialNumber(\"^asad\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // valid serial number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"abc def\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"athe23rdphone\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"A 213 DFG\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SerialNumber.isValidSerialNumber(\"A0234234JURNB320420DSALGFDSIBN2131\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/ScheduleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.SCHEDULEONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.testutil.ScheduleBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final UUID VALID_ID \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_VENUE \u003d \"Changi Airport T3\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String VALID_TAG \u003d \"Freebie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final Calendar VALID_CALENDAR \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .setDate(2030, 3, 19).setTimeOfDay(15, 30, 0).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void isSameSchedule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SCHEDULEONE.isSameAs(SCHEDULEONE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SCHEDULEONE.isSameAs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different id -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertFalse(SCHEDULEONE.isSameAs(new ScheduleBuilder(SCHEDULEONE).withId(VALID_ID).build()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different calendar -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SCHEDULEONE.isSameAs(new ScheduleBuilder(SCHEDULEONE).withCalendar(VALID_CALENDAR).build()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different venue -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SCHEDULEONE.isSameAs(new ScheduleBuilder(SCHEDULEONE).withVenue(VALID_VENUE).build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertTrue(SCHEDULEONE.isSameAs(new ScheduleBuilder(SCHEDULEONE).withTags(VALID_TAG).build()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // same object -\u003e equals"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertEquals(SCHEDULEONE, SCHEDULEONE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // null -\u003e not equals"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(null, SCHEDULEONE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different id -\u003e not equals"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(SCHEDULEONE, new ScheduleBuilder(SCHEDULEONE).withId(VALID_ID).build());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different calendar -\u003e not equals"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(SCHEDULEONE, new ScheduleBuilder(SCHEDULEONE).withCalendar(VALID_CALENDAR).build());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different venue -\u003e not equals"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(SCHEDULEONE, new ScheduleBuilder(SCHEDULEONE).withVenue(VALID_VENUE).build());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // different tags -\u003e not equals"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        assertNotEquals(SCHEDULEONE, new ScheduleBuilder(SCHEDULEONE).withTags(VALID_TAG).build());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 33,
      "qiujiaaa": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/model/schedule/VenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class VenueTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Venue(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void constructor_invalidVenue_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        String invalidVenue \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Venue(invalidVenue));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Venue.isValidVenue(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Venue.isValidVenue(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertFalse(Venue.isValidVenue(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"Clementi MRT station\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"S123123\")); // numbers and alphabets"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"523523\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        assertTrue(Venue.isValidVenue(\"Vivo City Basement 1 beside Gongcha at Harbourfront MRT\")); // long venue"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/statistic/StatisticsManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.statistic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.TypicalStatsPayload.DEFAULT_STATS_PAYLOAD_COST_1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.TypicalStatsPayload.DEFAULT_STATS_PAYLOAD_PROFIT_1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.TypicalStatsPayload.DEFAULT_STATS_PAYLOAD_REVENUE_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.testutil.TypicalOrders;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.testutil.TypicalPhones;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class StatisticsManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Statistic statisticModule \u003d new StatisticManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ObservableList\u003cOrder\u003e listOfTypicalOrders;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void execute_calculateTotalRevenueOnCompleted() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        OrderBookStub orderBookStub \u003d new OrderBookStub();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String actualResult \u003d \"0.0\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String testResult \u003d this.statisticModule.calculateTotalRevenueOnCompleted(orderBookStub,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                DEFAULT_STATS_PAYLOAD_REVENUE_1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        assertEquals(actualResult, testResult);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void execute_calculateTotalProfitOnCompleted() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        OrderBookStub orderBookStub \u003d new OrderBookStub();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String actualResult \u003d \"0.0\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String testResult \u003d this.statisticModule.calculateTotalProfitOnCompleted(orderBookStub,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                DEFAULT_STATS_PAYLOAD_PROFIT_1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        assertEquals(actualResult, testResult);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void execute_calculateTotalCostOnCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        OrderBookStub orderBookStub \u003d new OrderBookStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        PhoneBookStub phoneBookStub \u003d new PhoneBookStub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String actualResult \u003d \"0.0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        String testResult \u003d this.statisticModule.calculateTotalCostOnCompleted(orderBookStub,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                DEFAULT_STATS_PAYLOAD_COST_1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        assertEquals(actualResult, testResult);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Stub method to build a dummy order book for use here"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static class OrderBookStub implements ReadOnlyDataBook\u003cOrder\u003e {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        OrderBookStub() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            ObservableList\u003cOrder\u003e listOfTypicalOrders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalOrders.add(TypicalOrders.ORDERONE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalOrders.add(TypicalOrders.ORDERTWO);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalOrders.add(TypicalOrders.ORDERTHREE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            this.orders.setAll(listOfTypicalOrders);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        public ObservableList\u003cOrder\u003e getList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return orders;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Stub method to build a dummy order book for use here"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static class PhoneBookStub implements ReadOnlyDataBook\u003cPhone\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        private final ObservableList\u003cPhone\u003e phones \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        PhoneBookStub() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            ObservableList\u003cPhone\u003e listOfTypicalPhones \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalPhones.add(TypicalPhones.IPHONEONE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalPhones.add(TypicalPhones.IPHONETWO);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalPhones.add(TypicalPhones.ANDROIDONE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            listOfTypicalPhones.add(TypicalPhones.IPHONETWO);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            this.phones.setAll(listOfTypicalPhones);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        public ObservableList\u003cPhone\u003e getList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return phones;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonCustomerBookStorage customerBookStorage \u003d new JsonCustomerBookStorage(getTempFilePath(\"cb\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonPhoneBookStorage phoneBookStorage \u003d new JsonPhoneBookStorage(getTempFilePath(\"pb\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonScheduleBookStorage scheduleBookStorage \u003d new JsonScheduleBookStorage(getTempFilePath(\"sb\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        JsonOrderBookStorage orderBookStorage \u003d new JsonOrderBookStorage(getTempFilePath(\"ob\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        JsonOrderBookStorage archivedOrderBookStorage \u003d new JsonOrderBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, customerBookStorage, phoneBookStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                scheduleBookStorage, orderBookStorage, archivedOrderBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 2,
      "-": 67,
      "yeodonghan": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CustomerBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class to help with building {@code Customer} {@code DataBook}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *     {@code DataBook\u003cCustomer\u003e ab \u003d new CustomerBookBuilder().withCustomer(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private DataBook\u003cCustomer\u003e customerBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public CustomerBookBuilder(DataBook\u003cCustomer\u003e customerBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerBook \u003d customerBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds a new {@code Customer} to the {@code DataBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerBookBuilder withCustomer(Customer customer) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        customerBook.add(customer);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cCustomer\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9,
      "zhixianggg": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CustomerBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class to help with building Customer objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class CustomerBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private CustomerName customerName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private ContactNumber contactNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        customerName \u003d new CustomerName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        contactNumber \u003d new ContactNumber(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Initializes the CustomerBuilder with the data of {@code customerToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder(Customer customerToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        customerName \u003d customerToCopy.getCustomerName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        contactNumber \u003d customerToCopy.getContactNumber();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        email \u003d customerToCopy.getEmail();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(customerToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code CustomerName} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder withName(String customerName) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.customerName \u003d new CustomerName(customerName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Customer} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code ContactNumber} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder withContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.contactNumber \u003d new ContactNumber(contactNumber);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Email} of the {@code Customer} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public CustomerBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Customer build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return new Customer(customerName, contactNumber, email, tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditCustomerDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCustomerCommand.EditCustomerDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.ContactNumber;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.CustomerName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A utility class to help with building EditCustomerDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditCustomerDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private EditCustomerDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder(EditCustomerDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.descriptor \u003d new EditCustomerDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an {@code EditCustomerDescriptor} with fields containing {@code customer}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder(Customer customer) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor \u003d new EditCustomerDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCustomerName(customer.getCustomerName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setContactNumber(customer.getContactNumber());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setEmail(customer.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setTags(customer.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code CustomerName} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder withCustomerName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCustomerName(new CustomerName(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code ContactNumber} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder withContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setContactNumber(new ContactNumber(contactNumber));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code Email} of the {@code EditCustomerDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditCustomerDescriptor build() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPhoneDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditPhoneCommand.EditPhoneDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A utility class to help with building EditPhoneDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class EditPhoneDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private EditPhoneDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor \u003d new EditPhoneDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder(EditPhoneDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.descriptor \u003d new EditPhoneDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an {@code EditPhoneDescriptor} with fields containing {@code phone}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder(Phone phone) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor \u003d new EditPhoneDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setSerialNumber(phone.getSerialNumber());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setIdentityNumber(phone.getIdentityNumber());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setPhoneName(phone.getPhoneName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setBrand(phone.getBrand());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCapacity(phone.getCapacity());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setColour(phone.getColour());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCost(phone.getCost());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setTags(phone.getTags());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code PhoneName} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withPhoneName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setPhoneName(new PhoneName(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setSerialNumber(new SerialNumber(serialNumber));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code IdentityNumber} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withIdentityNumber(String identityNumber) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setIdentityNumber(new IdentityNumber(identityNumber));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code Brand} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withBrand(String brand) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setBrand(new Brand(brand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code Capacity} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withCapacity(Capacity capacity) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCapacity(capacity);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code Colour} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withColour(String colour) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setColour(new Colour(colour));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Sets the {@code Cost} of the {@code EditPhoneDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setCost(new Cost(cost));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public EditPhoneDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.CalendarDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyDataBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cPhone\u003e getPhoneBook() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deletePhone(Phone target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhone(Phone target, Phone editedPhone) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPhone\u003e getFilteredPhoneList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredPhoneList(Predicate\u003cPhone\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getOrderBook() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////schedule operations"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cSchedule\u003e getScheduleBook() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteSchedule(Schedule target) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCalendarDate(Calendar calendar) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CalendarDate getCalendarDate() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setArchivedOrderBook(ReadOnlyDataBook\u003cOrder\u003e archivedOrderBook) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getArchivedOrderBook() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasArchivedOrder(Order order) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteArchivedOrder(Order target) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addArchivedOrder(Order order) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setArchivedOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredArchivedOrderList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredArchivedOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 305
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class to help with building {@code Order} {@code DataBook}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *     {@code DataBook\u003cOrder\u003e ab \u003d new OrderBookBuilder().withOrder(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private DataBook\u003cOrder\u003e orderBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        orderBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public OrderBookBuilder(DataBook\u003cOrder\u003e orderBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderBook \u003d orderBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds a new {@code Order} to the {@code DataBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderBookBuilder withOrder(Order order) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        orderBook.add(order);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cOrder\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9,
      "zhixianggg": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/OrderBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERONE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Price;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class to help with building Order objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class OrderBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final UUID DEFAULT_UUID \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Customer DEFAULT_CUSTOMER \u003d CUSTOMERONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Phone DEFAULT_PHONE \u003d IPHONEONE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_PRICE \u003d \"$1212\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final Status DEFAULT_STATUS \u003d Status.COMPLETED;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private static final Optional\u003cSchedule\u003e DEFAULT_SCHEDULE \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Status status;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Optional\u003cSchedule\u003e schedule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        customer \u003d new CustomerBuilder(CUSTOMERONE).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        phone \u003d new PhoneBuilder(IPHONEONE).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        status \u003d DEFAULT_STATUS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        schedule \u003d DEFAULT_SCHEDULE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Initializes the OrderBuilder with the data of {@code orderToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder(Order orderToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        id \u003d orderToCopy.getId();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        customer \u003d orderToCopy.getCustomer();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        phone \u003d orderToCopy.getPhone();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        price \u003d orderToCopy.getPrice();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        status \u003d orderToCopy.getStatus();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        schedule \u003d orderToCopy.getSchedule();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(orderToCopy.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code UUID} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public OrderBuilder withId(UUID id) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Customer} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder withCustomer(Customer customer) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Phone} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder withPhone(Phone phone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Price} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Status} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder withStatus(Status status) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Schedule} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public OrderBuilder withSchedule(Optional\u003cSchedule\u003e schedule) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Order} that we are building."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public OrderBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Order build() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return new Order(id, customer, phone, price, status, schedule, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 20,
      "qiujiaaa": 100,
      "zhixianggg": 1,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 2,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PhoneBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class to help with building {@code Phone} {@code DataBook}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *     {@code DataBook\u003cPhone\u003e ab \u003d new PhoneBookBuilder().withPhone(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private DataBook\u003cPhone\u003e phoneBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        phoneBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBookBuilder(DataBook\u003cPhone\u003e phoneBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneBook \u003d phoneBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds a new {@code Phone} to the {@code DataBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneBookBuilder withPhone(Phone phone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        phoneBook.add(phone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cPhone\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phoneBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9,
      "zhixianggg": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PhoneBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Brand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Colour;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Cost;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.IdentityNumber;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.phone.PhoneName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.SerialNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class to help with building Phone objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class PhoneBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_IDENTITYNUMBER \u003d \"123456789098765\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_SERIALNUMBER \u003d \"E0315345346\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Samsung Galaxy 10\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_BRAND \u003d \"Samsung\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Capacity DEFAULT_CAPACITY \u003d Capacity.SIZE_8GB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_COLOUR \u003d \"Vanilla White\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"$42.42\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private IdentityNumber identityNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private SerialNumber serialNumber;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private PhoneName phoneName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Brand brand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Capacity capacity;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Colour colour;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        identityNumber \u003d new IdentityNumber(DEFAULT_IDENTITYNUMBER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        serialNumber \u003d new SerialNumber(DEFAULT_SERIALNUMBER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        phoneName \u003d new PhoneName(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        brand \u003d new Brand(DEFAULT_BRAND);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        capacity \u003d DEFAULT_CAPACITY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        colour \u003d new Colour(DEFAULT_COLOUR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Initializes the PhoneBuilder with the data of {@code phoneToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder(Phone phoneToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        identityNumber \u003d phoneToCopy.getIdentityNumber();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        serialNumber \u003d phoneToCopy.getSerialNumber();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        phoneName \u003d phoneToCopy.getPhoneName();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        brand \u003d phoneToCopy.getBrand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        capacity \u003d phoneToCopy.getCapacity();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        colour \u003d phoneToCopy.getColour();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        cost \u003d phoneToCopy.getCost();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(phoneToCopy.getTags());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code IdentityNumber} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withIdentityNumber(String identityNumber) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.identityNumber \u003d new IdentityNumber(identityNumber);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code SerialNumber} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withSerialNumber(String serialNumber) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.serialNumber \u003d new SerialNumber(serialNumber);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code PhoneName} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public PhoneBuilder withName(String phoneName) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.phoneName \u003d new PhoneName(phoneName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code Brand} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withBrand(String brand) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.brand \u003d new Brand(brand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code Capacity} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withCapacity(Capacity capacity) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code Colour} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withColour(String colour) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.colour \u003d new Colour(colour);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code Cost} of the {@code Phone} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Phone} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public PhoneBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Phone build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return new Phone(identityNumber, serialNumber, phoneName, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 126,
      "qiujiaaa": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class to help with building {@code Schedule} {@code DataBook}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " *     {@code DataBook\u003cSchedule\u003e sb \u003d new ScheduleBookBuilder().withSchedule(...).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private DataBook\u003cSchedule\u003e scheduleBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        scheduleBook \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public ScheduleBookBuilder(DataBook\u003cSchedule\u003e scheduleBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.scheduleBook \u003d scheduleBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Adds a new {@code Schedule} to the {@code DataBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleBookBuilder withSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        scheduleBook.add(schedule);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public DataBook\u003cSchedule\u003e build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return scheduleBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 9,
      "zhixianggg": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ScheduleBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class to help with building Schedule objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class ScheduleBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_VENUE \u003d \"Central Library\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final Calendar DEFAULT_CALENDAR \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .setDate(2019, 12, 1).setTimeOfDay(23, 30, 0).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private UUID id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Calendar calendar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendar \u003d DEFAULT_CALENDAR;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        venue \u003d new Venue(DEFAULT_VENUE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Initializes the ScheduleBuilder with the data of {@code scheduleToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleBuilder(Schedule scheduleToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        id \u003d scheduleToCopy.getId();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        calendar \u003d scheduleToCopy.getCalendar();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        venue \u003d scheduleToCopy.getVenue();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(scheduleToCopy.getTags());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Sets the {@code UUID} of the {@code Order} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public ScheduleBuilder withId(UUID id) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Calendar} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleBuilder withCalendar(Calendar calendar) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Sets the {@code Venue} of the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleBuilder withVenue(String venue) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.venue \u003d new Venue(venue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Schedule} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public ScheduleBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Schedule build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return new Schedule(id, calendar, venue, tags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 8,
      "qiujiaaa": 72,
      "zhixianggg": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCustomers.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class containing a list of {@code Customer} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class TypicalCustomers {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // to be moved into some contants class for easier usage by other classes"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_NAME_1 \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_NAME_2 \u003d \"Benson Meier\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_NAME_3 \u003d \"Hoon Meier\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_CONTACTNUMBER_1 \u003d \"94351253\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_CONTACTNUMBER_2 \u003d \"95352563\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_CONTACTNUMBER_3 \u003d \"87652533\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_EMAIL_1 \u003d \"alice@example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_EMAIL_2 \u003d \"johnd@example.com\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_EMAIL_3 \u003d \"stefan@example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_TAG_1 \u003d \"frequent\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_TAG_2 \u003d \"new\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String DEFAULT_TAG_3 \u003d \"friendly\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final Customer CUSTOMERONE \u003d new CustomerBuilder().withName(DEFAULT_NAME_1)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .withContactNumber(DEFAULT_CONTACTNUMBER_1).withEmail(DEFAULT_EMAIL_1).withTags(DEFAULT_TAG_1).build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final Customer CUSTOMERTWO \u003d new CustomerBuilder().withName(DEFAULT_NAME_2)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .withContactNumber(DEFAULT_CONTACTNUMBER_2).withEmail(DEFAULT_EMAIL_2).withTags(DEFAULT_TAG_2).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final Customer CUSTOMERTHREE \u003d new CustomerBuilder().withName(DEFAULT_NAME_3)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .withContactNumber(DEFAULT_CONTACTNUMBER_3).withEmail(DEFAULT_EMAIL_3).withTags(DEFAULT_TAG_3).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer ALICE \u003d new CustomerBuilder().withName(\"Alice Lim\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"98123459\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withTags(\"regular\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer BENSON \u003d new CustomerBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"98765432\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"johnd@example.com\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withTags(\"new\", \"friends\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer CARL \u003d new CustomerBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"95352563\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer DANIEL \u003d new CustomerBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"87652533\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"cornelia@example.com\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer ELLE \u003d new CustomerBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"94822243\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer FIONA \u003d new CustomerBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"94824272\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Customer GEORGE \u003d new CustomerBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withContactNumber(\"94824423\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns a {@code DataBook} with all the typical customers."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static DataBook\u003cCustomer\u003e getTypicalCustomerBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cCustomer\u003e cb \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Customer c: getTypicalCustomers()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            cb.add(c);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return cb;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static List\u003cCustomer\u003e getTypicalCustomers() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 5,
      "qiujiaaa": 33,
      "zhixianggg": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_FIRST_CUSTOMER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_SECOND_CUSTOMER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_THIRD_CUSTOMER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_FIRST_PHONE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_SECOND_PHONE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Index INDEX_THIRD_PHONE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 8,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrders.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERTHREE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalCustomers.CUSTOMERTWO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.ANDROIDONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONETWO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.testutil.TypicalPhones.IPHONEXR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.SCHEDULEONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.testutil.TypicalSchedules.SCHEDULETWO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.order.Status;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_PRICE_1 \u003d \"$1231.12\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_PRICE_2 \u003d \"$909\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_PRICE_3 \u003d \"$500\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_TAG_1 \u003d \"Urgent\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_TAG_2 \u003d \"New\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_TAG_3 \u003d \"Old\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String VALID_PRICE_HIGH \u003d \"$3000\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Order ORDERONE \u003d new OrderBuilder().withId(UUID.randomUUID()).withCustomer(CUSTOMERONE)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withPhone(IPHONEONE).withPrice(DEFAULT_PRICE_1).withStatus(Status.UNSCHEDULED)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSchedule(Optional.of(SCHEDULEONE)).withTags(DEFAULT_TAG_1).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Order ORDERTWO \u003d new OrderBuilder().withId(UUID.randomUUID()).withCustomer(CUSTOMERTWO)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withPhone(ANDROIDONE).withPrice(DEFAULT_PRICE_2).withStatus(Status.SCHEDULED)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSchedule(Optional.of(SCHEDULETWO)).withTags(DEFAULT_TAG_2).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Order ORDERTHREE \u003d new OrderBuilder().withId(UUID.randomUUID()).withCustomer(CUSTOMERTHREE)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withPhone(IPHONETWO).withPrice(DEFAULT_PRICE_3).withStatus(Status.COMPLETED)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSchedule(Optional.empty()).withTags(DEFAULT_TAG_3).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Order VIPORDER \u003d new OrderBuilder().withCustomer(ALICE).withPhone(IPHONEXR)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withPrice(VALID_PRICE_HIGH).withTags(DEFAULT_TAG_2).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns a {@code DataBook} with all the typical orders."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static DataBook\u003cOrder\u003e getTypicalOrderBook() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cOrder\u003e ob \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Order o: getTypicalOrders()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            ob.add(o);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return ob;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ORDERONE, ORDERTWO, ORDERTHREE, VIPORDER));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 19,
      "qiujiaaa": 27,
      "zhixianggg": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPhones.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Capacity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * A utility class containing a list of {@code Phone} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class TypicalPhones {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Phone IPHONEONE \u003d new PhoneBuilder().withIdentityNumber(\"111111111111111\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSerialNumber(\"A342432\").withName(\"iPhone 11\").withBrand(\"iPhone\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withCapacity(Capacity.SIZE_32GB).withColour(\"White\").withCost(\"$500\").withTags(\"Old\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Phone IPHONETWO \u003d new PhoneBuilder().withIdentityNumber(\"111111111122222\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSerialNumber(\"A5864\").withName(\"iPhone X\").withBrand(\"iPhone\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withCapacity(Capacity.SIZE_64GB).withColour(\"Green\").withCost(\"$300\").withTags(\"Spoilt\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Phone ANDROIDONE \u003d new PhoneBuilder().withIdentityNumber(\"111143242133111\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSerialNumber(\"432\").withName(\"Samsung Galaxy 9\").withBrand(\"Samsung\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withCapacity(Capacity.SIZE_32GB).withColour(\"Black\").withCost(\"$300\").withTags(\"New\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Phone ANDROIDTWO \u003d new PhoneBuilder().withIdentityNumber(\"222222222222222\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withSerialNumber(\"603\").withName(\"Samsung Galaxy 10\").withBrand(\"Samsung\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            .withCapacity(Capacity.SIZE_1024GB).withColour(\"Pink\").withCost(\"$730\").withTags(\"Fresh\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Phone IPHONEXR \u003d new PhoneBuilder().withIdentityNumber(\"449682916074069\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withSerialNumber(\"182n8x81\").withName(\"iPhone XR\").withBrand(\"Apple\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withCapacity(Capacity.SIZE_128GB).withColour(\"Black\").withCost(\"$1000\").withTags(\"Used\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Phone IPHONEPRO11 \u003d new PhoneBuilder().withIdentityNumber(\"013373005371667\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withSerialNumber(\"1d27s9az\").withName(\"iPhone Pro 11\").withBrand(\"Apple\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withCapacity(Capacity.SIZE_128GB).withColour(\"Purple\").withCost(\"$1649\").withTags(\"New\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withTags(\"Bestseller\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns a {@code DataBook} with all the typical phones."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static DataBook\u003cPhone\u003e getTypicalPhoneBook() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cPhone\u003e pb \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Phone p: getTypicalPhones()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            pb.add(p);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return pb;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static List\u003cPhone\u003e getTypicalPhones() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(IPHONEONE, IPHONETWO, IPHONEXR, ANDROIDONE, ANDROIDTWO));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 31,
      "zhixianggg": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSchedules.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.DataBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * A utility class containing a list of {@code Schedule} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class TypicalSchedules {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final Calendar DEFAULT_CALENDAR_1 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .setDate(2019, 12, 17).setTimeOfDay(13, 0, 0).build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final Calendar DEFAULT_CALENDAR_2 \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .setDate(2020, 7, 1).setTimeOfDay(19, 30, 0).build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final Calendar CBD_CALENDAR \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .setDate(2020, 11, 11).setTimeOfDay(11, 11, 0).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_VENUE_1 \u003d \"Orchard MRT\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_VENUE_2 \u003d \"Buona Vista KOI\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String CBD_VENUE \u003d \"Tanjong Pagar MRT\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_TAG_1 \u003d \"Carrier\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private static final String DEFAULT_TAG_2 \u003d \"Freebie\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Schedule SCHEDULEONE \u003d new ScheduleBuilder().withId(UUID.randomUUID())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .withCalendar(DEFAULT_CALENDAR_1).withVenue(DEFAULT_VENUE_1).withTags(DEFAULT_TAG_1).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final Schedule SCHEDULETWO \u003d new ScheduleBuilder().withId(UUID.randomUUID())"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            .withCalendar(DEFAULT_CALENDAR_2).withVenue(DEFAULT_VENUE_2).withTags(DEFAULT_TAG_2).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Schedule CBD_SCHEDULE \u003d new ScheduleBuilder()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            .withCalendar(CBD_CALENDAR).withVenue(CBD_VENUE).withTags(DEFAULT_TAG_1).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns a {@code DataBook} with all the typical schedules."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static DataBook\u003cSchedule\u003e getTypicalScheduleBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        DataBook\u003cSchedule\u003e sb \u003d new DataBook\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (Schedule s: getTypicalSchedules()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            sb.add(s);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return sb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static List\u003cSchedule\u003e getTypicalSchedules() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SCHEDULEONE, SCHEDULETWO, CBD_SCHEDULE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 8,
      "qiujiaaa": 24,
      "zhixianggg": 22
    }
  },
  {
    "path": "src/test/test.iml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cmodule type\u003d\"JAVA_MODULE\" version\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "  \u003ccomponent name\u003d\"NewModuleRootManager\" inherit-compiler-output\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cexclude-output /\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003ccontent url\u003d\"file://$MODULE_DIR$\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003csourceFolder url\u003d\"file://$MODULE_DIR$/java\" isTestSource\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/content\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003corderEntry type\u003d\"inheritedJdk\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003corderEntry type\u003d\"sourceFolder\" forTests\u003d\"false\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003corderEntry type\u003d\"module-library\" scope\u003d\"TEST\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "      \u003clibrary name\u003d\"JUnit5.4\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cCLASSES\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter/5.4.2/junit-jupiter-5.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.4.2/junit-jupiter-api-5.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.1.1/opentest4j-1.1.1.jar!/\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.4.2/junit-platform-commons-1.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-params/5.4.2/junit-jupiter-params-5.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-engine/5.4.2/junit-jupiter-engine-5.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "          \u003croot url\u003d\"jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-engine/1.4.2/junit-platform-engine-1.4.2.jar!/\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/CLASSES\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cJAVADOC /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cSOURCES /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "      \u003c/library\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003c/orderEntry\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"library\" scope\u003d\"TEST\" name\u003d\"Gradle: org.openjfx:javafx-base:win:11\" level\u003d\"project\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"module\" module-name\u003d\"main\" scope\u003d\"TEST\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    \u003corderEntry type\u003d\"module\" module-name\u003d\"main\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "  \u003c/component\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 3,
      "EugeneTeu": 11,
      "yeodonghan": 16
    }
  }
]
